
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user_account
 * 
 */
export type user_account = $Result.DefaultSelection<Prisma.$user_accountPayload>
/**
 * Model user_profile
 * 
 */
export type user_profile = $Result.DefaultSelection<Prisma.$user_profilePayload>
/**
 * Model user_points
 * 
 */
export type user_points = $Result.DefaultSelection<Prisma.$user_pointsPayload>
/**
 * Model points_redemption
 * 
 */
export type points_redemption = $Result.DefaultSelection<Prisma.$points_redemptionPayload>
/**
 * Model points_redemption_items
 * 
 */
export type points_redemption_items = $Result.DefaultSelection<Prisma.$points_redemption_itemsPayload>
/**
 * Model coupon_table
 * 
 */
export type coupon_table = $Result.DefaultSelection<Prisma.$coupon_tablePayload>
/**
 * Model user_coupon
 * 
 */
export type user_coupon = $Result.DefaultSelection<Prisma.$user_couponPayload>
/**
 * Model organizer_account
 * 
 */
export type organizer_account = $Result.DefaultSelection<Prisma.$organizer_accountPayload>
/**
 * Model organizer_profile
 * 
 */
export type organizer_profile = $Result.DefaultSelection<Prisma.$organizer_profilePayload>
/**
 * Model organizer_reviews
 * 
 */
export type organizer_reviews = $Result.DefaultSelection<Prisma.$organizer_reviewsPayload>
/**
 * Model event_table
 * 
 */
export type event_table = $Result.DefaultSelection<Prisma.$event_tablePayload>
/**
 * Model ticket_holds
 * 
 */
export type ticket_holds = $Result.DefaultSelection<Prisma.$ticket_holdsPayload>
/**
 * Model ticket_type
 * 
 */
export type ticket_type = $Result.DefaultSelection<Prisma.$ticket_typePayload>
/**
 * Model event_attendees
 * 
 */
export type event_attendees = $Result.DefaultSelection<Prisma.$event_attendeesPayload>
/**
 * Model transactions_table
 * 
 */
export type transactions_table = $Result.DefaultSelection<Prisma.$transactions_tablePayload>
/**
 * Model voucher_table
 * 
 */
export type voucher_table = $Result.DefaultSelection<Prisma.$voucher_tablePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const account_role: {
  user: 'user',
  organizer: 'organizer',
  admin: 'admin'
};

export type account_role = (typeof account_role)[keyof typeof account_role]


export const coupon_status: {
  active: 'active',
  used: 'used',
  expired: 'expired'
};

export type coupon_status = (typeof coupon_status)[keyof typeof coupon_status]


export const issuer: {
  system: 'system',
  organizer: 'organizer',
  admin: 'admin'
};

export type issuer = (typeof issuer)[keyof typeof issuer]


export const event_status: {
  attended: 'attended',
  expired: 'expired',
  cancelled: 'cancelled'
};

export type event_status = (typeof event_status)[keyof typeof event_status]


export const transactions_status: {
  waiting_for_payment: 'waiting_for_payment',
  waiting_for_admin_confirmation: 'waiting_for_admin_confirmation',
  rejected: 'rejected',
  done: 'done',
  expired: 'expired',
  canceled: 'canceled'
};

export type transactions_status = (typeof transactions_status)[keyof typeof transactions_status]


export const discount_type: {
  fixed: 'fixed',
  percentage: 'percentage'
};

export type discount_type = (typeof discount_type)[keyof typeof discount_type]

}

export type account_role = $Enums.account_role

export const account_role: typeof $Enums.account_role

export type coupon_status = $Enums.coupon_status

export const coupon_status: typeof $Enums.coupon_status

export type issuer = $Enums.issuer

export const issuer: typeof $Enums.issuer

export type event_status = $Enums.event_status

export const event_status: typeof $Enums.event_status

export type transactions_status = $Enums.transactions_status

export const transactions_status: typeof $Enums.transactions_status

export type discount_type = $Enums.discount_type

export const discount_type: typeof $Enums.discount_type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more User_accounts
 * const user_accounts = await prisma.user_account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more User_accounts
   * const user_accounts = await prisma.user_account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Executes a typed SQL query and returns a typed result
   * @example
   * ```
   * import { myQuery } from '@prisma/client/sql'
   * 
   * const result = await prisma.$queryRawTyped(myQuery())
   * ```
   */
  $queryRawTyped<T>(typedSql: runtime.TypedSql<unknown[], T>): Prisma.PrismaPromise<T[]>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user_account`: Exposes CRUD operations for the **user_account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_accounts
    * const user_accounts = await prisma.user_account.findMany()
    * ```
    */
  get user_account(): Prisma.user_accountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_profile`: Exposes CRUD operations for the **user_profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_profiles
    * const user_profiles = await prisma.user_profile.findMany()
    * ```
    */
  get user_profile(): Prisma.user_profileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_points`: Exposes CRUD operations for the **user_points** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_points
    * const user_points = await prisma.user_points.findMany()
    * ```
    */
  get user_points(): Prisma.user_pointsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.points_redemption`: Exposes CRUD operations for the **points_redemption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Points_redemptions
    * const points_redemptions = await prisma.points_redemption.findMany()
    * ```
    */
  get points_redemption(): Prisma.points_redemptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.points_redemption_items`: Exposes CRUD operations for the **points_redemption_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Points_redemption_items
    * const points_redemption_items = await prisma.points_redemption_items.findMany()
    * ```
    */
  get points_redemption_items(): Prisma.points_redemption_itemsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coupon_table`: Exposes CRUD operations for the **coupon_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coupon_tables
    * const coupon_tables = await prisma.coupon_table.findMany()
    * ```
    */
  get coupon_table(): Prisma.coupon_tableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_coupon`: Exposes CRUD operations for the **user_coupon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_coupons
    * const user_coupons = await prisma.user_coupon.findMany()
    * ```
    */
  get user_coupon(): Prisma.user_couponDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizer_account`: Exposes CRUD operations for the **organizer_account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizer_accounts
    * const organizer_accounts = await prisma.organizer_account.findMany()
    * ```
    */
  get organizer_account(): Prisma.organizer_accountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizer_profile`: Exposes CRUD operations for the **organizer_profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizer_profiles
    * const organizer_profiles = await prisma.organizer_profile.findMany()
    * ```
    */
  get organizer_profile(): Prisma.organizer_profileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organizer_reviews`: Exposes CRUD operations for the **organizer_reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizer_reviews
    * const organizer_reviews = await prisma.organizer_reviews.findMany()
    * ```
    */
  get organizer_reviews(): Prisma.organizer_reviewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event_table`: Exposes CRUD operations for the **event_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Event_tables
    * const event_tables = await prisma.event_table.findMany()
    * ```
    */
  get event_table(): Prisma.event_tableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_holds`: Exposes CRUD operations for the **ticket_holds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_holds
    * const ticket_holds = await prisma.ticket_holds.findMany()
    * ```
    */
  get ticket_holds(): Prisma.ticket_holdsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ticket_type`: Exposes CRUD operations for the **ticket_type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ticket_types
    * const ticket_types = await prisma.ticket_type.findMany()
    * ```
    */
  get ticket_type(): Prisma.ticket_typeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event_attendees`: Exposes CRUD operations for the **event_attendees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Event_attendees
    * const event_attendees = await prisma.event_attendees.findMany()
    * ```
    */
  get event_attendees(): Prisma.event_attendeesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactions_table`: Exposes CRUD operations for the **transactions_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions_tables
    * const transactions_tables = await prisma.transactions_table.findMany()
    * ```
    */
  get transactions_table(): Prisma.transactions_tableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.voucher_table`: Exposes CRUD operations for the **voucher_table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Voucher_tables
    * const voucher_tables = await prisma.voucher_table.findMany()
    * ```
    */
  get voucher_table(): Prisma.voucher_tableDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.0
   * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user_account: 'user_account',
    user_profile: 'user_profile',
    user_points: 'user_points',
    points_redemption: 'points_redemption',
    points_redemption_items: 'points_redemption_items',
    coupon_table: 'coupon_table',
    user_coupon: 'user_coupon',
    organizer_account: 'organizer_account',
    organizer_profile: 'organizer_profile',
    organizer_reviews: 'organizer_reviews',
    event_table: 'event_table',
    ticket_holds: 'ticket_holds',
    ticket_type: 'ticket_type',
    event_attendees: 'event_attendees',
    transactions_table: 'transactions_table',
    voucher_table: 'voucher_table'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user_account" | "user_profile" | "user_points" | "points_redemption" | "points_redemption_items" | "coupon_table" | "user_coupon" | "organizer_account" | "organizer_profile" | "organizer_reviews" | "event_table" | "ticket_holds" | "ticket_type" | "event_attendees" | "transactions_table" | "voucher_table"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user_account: {
        payload: Prisma.$user_accountPayload<ExtArgs>
        fields: Prisma.user_accountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_accountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_accountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          findFirst: {
            args: Prisma.user_accountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_accountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          findMany: {
            args: Prisma.user_accountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>[]
          }
          create: {
            args: Prisma.user_accountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          createMany: {
            args: Prisma.user_accountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_accountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>[]
          }
          delete: {
            args: Prisma.user_accountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          update: {
            args: Prisma.user_accountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          deleteMany: {
            args: Prisma.user_accountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_accountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_accountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>[]
          }
          upsert: {
            args: Prisma.user_accountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_accountPayload>
          }
          aggregate: {
            args: Prisma.User_accountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_account>
          }
          groupBy: {
            args: Prisma.user_accountGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_accountGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_accountCountArgs<ExtArgs>
            result: $Utils.Optional<User_accountCountAggregateOutputType> | number
          }
        }
      }
      user_profile: {
        payload: Prisma.$user_profilePayload<ExtArgs>
        fields: Prisma.user_profileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_profileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_profileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          findFirst: {
            args: Prisma.user_profileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_profileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          findMany: {
            args: Prisma.user_profileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>[]
          }
          create: {
            args: Prisma.user_profileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          createMany: {
            args: Prisma.user_profileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_profileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>[]
          }
          delete: {
            args: Prisma.user_profileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          update: {
            args: Prisma.user_profileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          deleteMany: {
            args: Prisma.user_profileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_profileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_profileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>[]
          }
          upsert: {
            args: Prisma.user_profileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_profilePayload>
          }
          aggregate: {
            args: Prisma.User_profileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_profile>
          }
          groupBy: {
            args: Prisma.user_profileGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_profileGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_profileCountArgs<ExtArgs>
            result: $Utils.Optional<User_profileCountAggregateOutputType> | number
          }
        }
      }
      user_points: {
        payload: Prisma.$user_pointsPayload<ExtArgs>
        fields: Prisma.user_pointsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_pointsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_pointsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          findFirst: {
            args: Prisma.user_pointsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_pointsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          findMany: {
            args: Prisma.user_pointsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>[]
          }
          create: {
            args: Prisma.user_pointsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          createMany: {
            args: Prisma.user_pointsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_pointsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>[]
          }
          delete: {
            args: Prisma.user_pointsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          update: {
            args: Prisma.user_pointsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          deleteMany: {
            args: Prisma.user_pointsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_pointsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_pointsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>[]
          }
          upsert: {
            args: Prisma.user_pointsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_pointsPayload>
          }
          aggregate: {
            args: Prisma.User_pointsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_points>
          }
          groupBy: {
            args: Prisma.user_pointsGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_pointsGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_pointsCountArgs<ExtArgs>
            result: $Utils.Optional<User_pointsCountAggregateOutputType> | number
          }
        }
      }
      points_redemption: {
        payload: Prisma.$points_redemptionPayload<ExtArgs>
        fields: Prisma.points_redemptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.points_redemptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.points_redemptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          findFirst: {
            args: Prisma.points_redemptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.points_redemptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          findMany: {
            args: Prisma.points_redemptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>[]
          }
          create: {
            args: Prisma.points_redemptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          createMany: {
            args: Prisma.points_redemptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.points_redemptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>[]
          }
          delete: {
            args: Prisma.points_redemptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          update: {
            args: Prisma.points_redemptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          deleteMany: {
            args: Prisma.points_redemptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.points_redemptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.points_redemptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>[]
          }
          upsert: {
            args: Prisma.points_redemptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemptionPayload>
          }
          aggregate: {
            args: Prisma.Points_redemptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePoints_redemption>
          }
          groupBy: {
            args: Prisma.points_redemptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<Points_redemptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.points_redemptionCountArgs<ExtArgs>
            result: $Utils.Optional<Points_redemptionCountAggregateOutputType> | number
          }
        }
      }
      points_redemption_items: {
        payload: Prisma.$points_redemption_itemsPayload<ExtArgs>
        fields: Prisma.points_redemption_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.points_redemption_itemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.points_redemption_itemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          findFirst: {
            args: Prisma.points_redemption_itemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.points_redemption_itemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          findMany: {
            args: Prisma.points_redemption_itemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>[]
          }
          create: {
            args: Prisma.points_redemption_itemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          createMany: {
            args: Prisma.points_redemption_itemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.points_redemption_itemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>[]
          }
          delete: {
            args: Prisma.points_redemption_itemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          update: {
            args: Prisma.points_redemption_itemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          deleteMany: {
            args: Prisma.points_redemption_itemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.points_redemption_itemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.points_redemption_itemsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>[]
          }
          upsert: {
            args: Prisma.points_redemption_itemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$points_redemption_itemsPayload>
          }
          aggregate: {
            args: Prisma.Points_redemption_itemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePoints_redemption_items>
          }
          groupBy: {
            args: Prisma.points_redemption_itemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Points_redemption_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.points_redemption_itemsCountArgs<ExtArgs>
            result: $Utils.Optional<Points_redemption_itemsCountAggregateOutputType> | number
          }
        }
      }
      coupon_table: {
        payload: Prisma.$coupon_tablePayload<ExtArgs>
        fields: Prisma.coupon_tableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coupon_tableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coupon_tableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          findFirst: {
            args: Prisma.coupon_tableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coupon_tableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          findMany: {
            args: Prisma.coupon_tableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>[]
          }
          create: {
            args: Prisma.coupon_tableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          createMany: {
            args: Prisma.coupon_tableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.coupon_tableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>[]
          }
          delete: {
            args: Prisma.coupon_tableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          update: {
            args: Prisma.coupon_tableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          deleteMany: {
            args: Prisma.coupon_tableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coupon_tableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.coupon_tableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>[]
          }
          upsert: {
            args: Prisma.coupon_tableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coupon_tablePayload>
          }
          aggregate: {
            args: Prisma.Coupon_tableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoupon_table>
          }
          groupBy: {
            args: Prisma.coupon_tableGroupByArgs<ExtArgs>
            result: $Utils.Optional<Coupon_tableGroupByOutputType>[]
          }
          count: {
            args: Prisma.coupon_tableCountArgs<ExtArgs>
            result: $Utils.Optional<Coupon_tableCountAggregateOutputType> | number
          }
        }
      }
      user_coupon: {
        payload: Prisma.$user_couponPayload<ExtArgs>
        fields: Prisma.user_couponFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_couponFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_couponFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          findFirst: {
            args: Prisma.user_couponFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_couponFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          findMany: {
            args: Prisma.user_couponFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>[]
          }
          create: {
            args: Prisma.user_couponCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          createMany: {
            args: Prisma.user_couponCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_couponCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>[]
          }
          delete: {
            args: Prisma.user_couponDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          update: {
            args: Prisma.user_couponUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          deleteMany: {
            args: Prisma.user_couponDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_couponUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_couponUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>[]
          }
          upsert: {
            args: Prisma.user_couponUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_couponPayload>
          }
          aggregate: {
            args: Prisma.User_couponAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_coupon>
          }
          groupBy: {
            args: Prisma.user_couponGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_couponGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_couponCountArgs<ExtArgs>
            result: $Utils.Optional<User_couponCountAggregateOutputType> | number
          }
        }
      }
      organizer_account: {
        payload: Prisma.$organizer_accountPayload<ExtArgs>
        fields: Prisma.organizer_accountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.organizer_accountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.organizer_accountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          findFirst: {
            args: Prisma.organizer_accountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.organizer_accountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          findMany: {
            args: Prisma.organizer_accountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>[]
          }
          create: {
            args: Prisma.organizer_accountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          createMany: {
            args: Prisma.organizer_accountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.organizer_accountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>[]
          }
          delete: {
            args: Prisma.organizer_accountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          update: {
            args: Prisma.organizer_accountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          deleteMany: {
            args: Prisma.organizer_accountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.organizer_accountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.organizer_accountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>[]
          }
          upsert: {
            args: Prisma.organizer_accountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_accountPayload>
          }
          aggregate: {
            args: Prisma.Organizer_accountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizer_account>
          }
          groupBy: {
            args: Prisma.organizer_accountGroupByArgs<ExtArgs>
            result: $Utils.Optional<Organizer_accountGroupByOutputType>[]
          }
          count: {
            args: Prisma.organizer_accountCountArgs<ExtArgs>
            result: $Utils.Optional<Organizer_accountCountAggregateOutputType> | number
          }
        }
      }
      organizer_profile: {
        payload: Prisma.$organizer_profilePayload<ExtArgs>
        fields: Prisma.organizer_profileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.organizer_profileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.organizer_profileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          findFirst: {
            args: Prisma.organizer_profileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.organizer_profileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          findMany: {
            args: Prisma.organizer_profileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>[]
          }
          create: {
            args: Prisma.organizer_profileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          createMany: {
            args: Prisma.organizer_profileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.organizer_profileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>[]
          }
          delete: {
            args: Prisma.organizer_profileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          update: {
            args: Prisma.organizer_profileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          deleteMany: {
            args: Prisma.organizer_profileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.organizer_profileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.organizer_profileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>[]
          }
          upsert: {
            args: Prisma.organizer_profileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_profilePayload>
          }
          aggregate: {
            args: Prisma.Organizer_profileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizer_profile>
          }
          groupBy: {
            args: Prisma.organizer_profileGroupByArgs<ExtArgs>
            result: $Utils.Optional<Organizer_profileGroupByOutputType>[]
          }
          count: {
            args: Prisma.organizer_profileCountArgs<ExtArgs>
            result: $Utils.Optional<Organizer_profileCountAggregateOutputType> | number
          }
        }
      }
      organizer_reviews: {
        payload: Prisma.$organizer_reviewsPayload<ExtArgs>
        fields: Prisma.organizer_reviewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.organizer_reviewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.organizer_reviewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          findFirst: {
            args: Prisma.organizer_reviewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.organizer_reviewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          findMany: {
            args: Prisma.organizer_reviewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>[]
          }
          create: {
            args: Prisma.organizer_reviewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          createMany: {
            args: Prisma.organizer_reviewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.organizer_reviewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>[]
          }
          delete: {
            args: Prisma.organizer_reviewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          update: {
            args: Prisma.organizer_reviewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          deleteMany: {
            args: Prisma.organizer_reviewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.organizer_reviewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.organizer_reviewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>[]
          }
          upsert: {
            args: Prisma.organizer_reviewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$organizer_reviewsPayload>
          }
          aggregate: {
            args: Prisma.Organizer_reviewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganizer_reviews>
          }
          groupBy: {
            args: Prisma.organizer_reviewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Organizer_reviewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.organizer_reviewsCountArgs<ExtArgs>
            result: $Utils.Optional<Organizer_reviewsCountAggregateOutputType> | number
          }
        }
      }
      event_table: {
        payload: Prisma.$event_tablePayload<ExtArgs>
        fields: Prisma.event_tableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.event_tableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.event_tableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          findFirst: {
            args: Prisma.event_tableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.event_tableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          findMany: {
            args: Prisma.event_tableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>[]
          }
          create: {
            args: Prisma.event_tableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          createMany: {
            args: Prisma.event_tableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.event_tableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>[]
          }
          delete: {
            args: Prisma.event_tableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          update: {
            args: Prisma.event_tableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          deleteMany: {
            args: Prisma.event_tableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.event_tableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.event_tableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>[]
          }
          upsert: {
            args: Prisma.event_tableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_tablePayload>
          }
          aggregate: {
            args: Prisma.Event_tableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent_table>
          }
          groupBy: {
            args: Prisma.event_tableGroupByArgs<ExtArgs>
            result: $Utils.Optional<Event_tableGroupByOutputType>[]
          }
          count: {
            args: Prisma.event_tableCountArgs<ExtArgs>
            result: $Utils.Optional<Event_tableCountAggregateOutputType> | number
          }
        }
      }
      ticket_holds: {
        payload: Prisma.$ticket_holdsPayload<ExtArgs>
        fields: Prisma.ticket_holdsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_holdsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_holdsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          findFirst: {
            args: Prisma.ticket_holdsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_holdsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          findMany: {
            args: Prisma.ticket_holdsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>[]
          }
          create: {
            args: Prisma.ticket_holdsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          createMany: {
            args: Prisma.ticket_holdsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticket_holdsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>[]
          }
          delete: {
            args: Prisma.ticket_holdsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          update: {
            args: Prisma.ticket_holdsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          deleteMany: {
            args: Prisma.ticket_holdsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_holdsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticket_holdsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>[]
          }
          upsert: {
            args: Prisma.ticket_holdsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_holdsPayload>
          }
          aggregate: {
            args: Prisma.Ticket_holdsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_holds>
          }
          groupBy: {
            args: Prisma.ticket_holdsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_holdsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_holdsCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_holdsCountAggregateOutputType> | number
          }
        }
      }
      ticket_type: {
        payload: Prisma.$ticket_typePayload<ExtArgs>
        fields: Prisma.ticket_typeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticket_typeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticket_typeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          findFirst: {
            args: Prisma.ticket_typeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticket_typeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          findMany: {
            args: Prisma.ticket_typeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>[]
          }
          create: {
            args: Prisma.ticket_typeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          createMany: {
            args: Prisma.ticket_typeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticket_typeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>[]
          }
          delete: {
            args: Prisma.ticket_typeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          update: {
            args: Prisma.ticket_typeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          deleteMany: {
            args: Prisma.ticket_typeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticket_typeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ticket_typeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>[]
          }
          upsert: {
            args: Prisma.ticket_typeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticket_typePayload>
          }
          aggregate: {
            args: Prisma.Ticket_typeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTicket_type>
          }
          groupBy: {
            args: Prisma.ticket_typeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ticket_typeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticket_typeCountArgs<ExtArgs>
            result: $Utils.Optional<Ticket_typeCountAggregateOutputType> | number
          }
        }
      }
      event_attendees: {
        payload: Prisma.$event_attendeesPayload<ExtArgs>
        fields: Prisma.event_attendeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.event_attendeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.event_attendeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          findFirst: {
            args: Prisma.event_attendeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.event_attendeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          findMany: {
            args: Prisma.event_attendeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>[]
          }
          create: {
            args: Prisma.event_attendeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          createMany: {
            args: Prisma.event_attendeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.event_attendeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>[]
          }
          delete: {
            args: Prisma.event_attendeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          update: {
            args: Prisma.event_attendeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          deleteMany: {
            args: Prisma.event_attendeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.event_attendeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.event_attendeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>[]
          }
          upsert: {
            args: Prisma.event_attendeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$event_attendeesPayload>
          }
          aggregate: {
            args: Prisma.Event_attendeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent_attendees>
          }
          groupBy: {
            args: Prisma.event_attendeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Event_attendeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.event_attendeesCountArgs<ExtArgs>
            result: $Utils.Optional<Event_attendeesCountAggregateOutputType> | number
          }
        }
      }
      transactions_table: {
        payload: Prisma.$transactions_tablePayload<ExtArgs>
        fields: Prisma.transactions_tableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactions_tableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactions_tableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          findFirst: {
            args: Prisma.transactions_tableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactions_tableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          findMany: {
            args: Prisma.transactions_tableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>[]
          }
          create: {
            args: Prisma.transactions_tableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          createMany: {
            args: Prisma.transactions_tableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactions_tableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>[]
          }
          delete: {
            args: Prisma.transactions_tableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          update: {
            args: Prisma.transactions_tableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          deleteMany: {
            args: Prisma.transactions_tableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactions_tableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.transactions_tableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>[]
          }
          upsert: {
            args: Prisma.transactions_tableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactions_tablePayload>
          }
          aggregate: {
            args: Prisma.Transactions_tableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions_table>
          }
          groupBy: {
            args: Prisma.transactions_tableGroupByArgs<ExtArgs>
            result: $Utils.Optional<Transactions_tableGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactions_tableCountArgs<ExtArgs>
            result: $Utils.Optional<Transactions_tableCountAggregateOutputType> | number
          }
        }
      }
      voucher_table: {
        payload: Prisma.$voucher_tablePayload<ExtArgs>
        fields: Prisma.voucher_tableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.voucher_tableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.voucher_tableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          findFirst: {
            args: Prisma.voucher_tableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.voucher_tableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          findMany: {
            args: Prisma.voucher_tableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>[]
          }
          create: {
            args: Prisma.voucher_tableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          createMany: {
            args: Prisma.voucher_tableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.voucher_tableCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>[]
          }
          delete: {
            args: Prisma.voucher_tableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          update: {
            args: Prisma.voucher_tableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          deleteMany: {
            args: Prisma.voucher_tableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.voucher_tableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.voucher_tableUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>[]
          }
          upsert: {
            args: Prisma.voucher_tableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$voucher_tablePayload>
          }
          aggregate: {
            args: Prisma.Voucher_tableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVoucher_table>
          }
          groupBy: {
            args: Prisma.voucher_tableGroupByArgs<ExtArgs>
            result: $Utils.Optional<Voucher_tableGroupByOutputType>[]
          }
          count: {
            args: Prisma.voucher_tableCountArgs<ExtArgs>
            result: $Utils.Optional<Voucher_tableCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRawTyped: {
          args: runtime.UnknownTypedSql,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user_account?: user_accountOmit
    user_profile?: user_profileOmit
    user_points?: user_pointsOmit
    points_redemption?: points_redemptionOmit
    points_redemption_items?: points_redemption_itemsOmit
    coupon_table?: coupon_tableOmit
    user_coupon?: user_couponOmit
    organizer_account?: organizer_accountOmit
    organizer_profile?: organizer_profileOmit
    organizer_reviews?: organizer_reviewsOmit
    event_table?: event_tableOmit
    ticket_holds?: ticket_holdsOmit
    ticket_type?: ticket_typeOmit
    event_attendees?: event_attendeesOmit
    transactions_table?: transactions_tableOmit
    voucher_table?: voucher_tableOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type User_accountCountOutputType
   */

  export type User_accountCountOutputType = {
    user_points: number
    points_redemption: number
    organizer_reviews: number
    ticket_holds: number
    event_attendees: number
    transactions: number
    user_coupon: number
  }

  export type User_accountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_points?: boolean | User_accountCountOutputTypeCountUser_pointsArgs
    points_redemption?: boolean | User_accountCountOutputTypeCountPoints_redemptionArgs
    organizer_reviews?: boolean | User_accountCountOutputTypeCountOrganizer_reviewsArgs
    ticket_holds?: boolean | User_accountCountOutputTypeCountTicket_holdsArgs
    event_attendees?: boolean | User_accountCountOutputTypeCountEvent_attendeesArgs
    transactions?: boolean | User_accountCountOutputTypeCountTransactionsArgs
    user_coupon?: boolean | User_accountCountOutputTypeCountUser_couponArgs
  }

  // Custom InputTypes
  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_accountCountOutputType
     */
    select?: User_accountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountUser_pointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_pointsWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountPoints_redemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: points_redemptionWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountOrganizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_reviewsWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountTicket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_holdsWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountEvent_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_attendeesWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactions_tableWhereInput
  }

  /**
   * User_accountCountOutputType without action
   */
  export type User_accountCountOutputTypeCountUser_couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_couponWhereInput
  }


  /**
   * Count Type User_pointsCountOutputType
   */

  export type User_pointsCountOutputType = {
    points_redemption_items: number
  }

  export type User_pointsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    points_redemption_items?: boolean | User_pointsCountOutputTypeCountPoints_redemption_itemsArgs
  }

  // Custom InputTypes
  /**
   * User_pointsCountOutputType without action
   */
  export type User_pointsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_pointsCountOutputType
     */
    select?: User_pointsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * User_pointsCountOutputType without action
   */
  export type User_pointsCountOutputTypeCountPoints_redemption_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: points_redemption_itemsWhereInput
  }


  /**
   * Count Type Points_redemptionCountOutputType
   */

  export type Points_redemptionCountOutputType = {
    points_redemption_items: number
  }

  export type Points_redemptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    points_redemption_items?: boolean | Points_redemptionCountOutputTypeCountPoints_redemption_itemsArgs
  }

  // Custom InputTypes
  /**
   * Points_redemptionCountOutputType without action
   */
  export type Points_redemptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points_redemptionCountOutputType
     */
    select?: Points_redemptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Points_redemptionCountOutputType without action
   */
  export type Points_redemptionCountOutputTypeCountPoints_redemption_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: points_redemption_itemsWhereInput
  }


  /**
   * Count Type Coupon_tableCountOutputType
   */

  export type Coupon_tableCountOutputType = {
    user_coupon: number
  }

  export type Coupon_tableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_coupon?: boolean | Coupon_tableCountOutputTypeCountUser_couponArgs
  }

  // Custom InputTypes
  /**
   * Coupon_tableCountOutputType without action
   */
  export type Coupon_tableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coupon_tableCountOutputType
     */
    select?: Coupon_tableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Coupon_tableCountOutputType without action
   */
  export type Coupon_tableCountOutputTypeCountUser_couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_couponWhereInput
  }


  /**
   * Count Type Organizer_accountCountOutputType
   */

  export type Organizer_accountCountOutputType = {
    organizer_reviews: number
    event_table: number
    event_attendees: number
    voucher: number
  }

  export type Organizer_accountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer_reviews?: boolean | Organizer_accountCountOutputTypeCountOrganizer_reviewsArgs
    event_table?: boolean | Organizer_accountCountOutputTypeCountEvent_tableArgs
    event_attendees?: boolean | Organizer_accountCountOutputTypeCountEvent_attendeesArgs
    voucher?: boolean | Organizer_accountCountOutputTypeCountVoucherArgs
  }

  // Custom InputTypes
  /**
   * Organizer_accountCountOutputType without action
   */
  export type Organizer_accountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organizer_accountCountOutputType
     */
    select?: Organizer_accountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Organizer_accountCountOutputType without action
   */
  export type Organizer_accountCountOutputTypeCountOrganizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_reviewsWhereInput
  }

  /**
   * Organizer_accountCountOutputType without action
   */
  export type Organizer_accountCountOutputTypeCountEvent_tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_tableWhereInput
  }

  /**
   * Organizer_accountCountOutputType without action
   */
  export type Organizer_accountCountOutputTypeCountEvent_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_attendeesWhereInput
  }

  /**
   * Organizer_accountCountOutputType without action
   */
  export type Organizer_accountCountOutputTypeCountVoucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: voucher_tableWhereInput
  }


  /**
   * Count Type Event_tableCountOutputType
   */

  export type Event_tableCountOutputType = {
    organizer_reviews: number
    ticket_holds: number
    ticket_type: number
    event_attendees: number
    transactions: number
    voucher: number
  }

  export type Event_tableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer_reviews?: boolean | Event_tableCountOutputTypeCountOrganizer_reviewsArgs
    ticket_holds?: boolean | Event_tableCountOutputTypeCountTicket_holdsArgs
    ticket_type?: boolean | Event_tableCountOutputTypeCountTicket_typeArgs
    event_attendees?: boolean | Event_tableCountOutputTypeCountEvent_attendeesArgs
    transactions?: boolean | Event_tableCountOutputTypeCountTransactionsArgs
    voucher?: boolean | Event_tableCountOutputTypeCountVoucherArgs
  }

  // Custom InputTypes
  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event_tableCountOutputType
     */
    select?: Event_tableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountOrganizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_reviewsWhereInput
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountTicket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_holdsWhereInput
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountTicket_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_typeWhereInput
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountEvent_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_attendeesWhereInput
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactions_tableWhereInput
  }

  /**
   * Event_tableCountOutputType without action
   */
  export type Event_tableCountOutputTypeCountVoucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: voucher_tableWhereInput
  }


  /**
   * Count Type Ticket_typeCountOutputType
   */

  export type Ticket_typeCountOutputType = {
    ticket_holds: number
  }

  export type Ticket_typeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket_holds?: boolean | Ticket_typeCountOutputTypeCountTicket_holdsArgs
  }

  // Custom InputTypes
  /**
   * Ticket_typeCountOutputType without action
   */
  export type Ticket_typeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket_typeCountOutputType
     */
    select?: Ticket_typeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Ticket_typeCountOutputType without action
   */
  export type Ticket_typeCountOutputTypeCountTicket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_holdsWhereInput
  }


  /**
   * Count Type Transactions_tableCountOutputType
   */

  export type Transactions_tableCountOutputType = {
    ticket: number
  }

  export type Transactions_tableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | Transactions_tableCountOutputTypeCountTicketArgs
  }

  // Custom InputTypes
  /**
   * Transactions_tableCountOutputType without action
   */
  export type Transactions_tableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transactions_tableCountOutputType
     */
    select?: Transactions_tableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Transactions_tableCountOutputType without action
   */
  export type Transactions_tableCountOutputTypeCountTicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_holdsWhereInput
  }


  /**
   * Count Type Voucher_tableCountOutputType
   */

  export type Voucher_tableCountOutputType = {
    transactions_table: number
  }

  export type Voucher_tableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions_table?: boolean | Voucher_tableCountOutputTypeCountTransactions_tableArgs
  }

  // Custom InputTypes
  /**
   * Voucher_tableCountOutputType without action
   */
  export type Voucher_tableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Voucher_tableCountOutputType
     */
    select?: Voucher_tableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Voucher_tableCountOutputType without action
   */
  export type Voucher_tableCountOutputTypeCountTransactions_tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactions_tableWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user_account
   */

  export type AggregateUser_account = {
    _count: User_accountCountAggregateOutputType | null
    _avg: User_accountAvgAggregateOutputType | null
    _sum: User_accountSumAggregateOutputType | null
    _min: User_accountMinAggregateOutputType | null
    _max: User_accountMaxAggregateOutputType | null
  }

  export type User_accountAvgAggregateOutputType = {
    id: number | null
  }

  export type User_accountSumAggregateOutputType = {
    id: number | null
  }

  export type User_accountMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.account_role | null
    referral_code: string | null
    referred_by_code: string | null
    imgProfile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type User_accountMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.account_role | null
    referral_code: string | null
    referred_by_code: string | null
    imgProfile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type User_accountCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role: number
    referral_code: number
    referred_by_code: number
    imgProfile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type User_accountAvgAggregateInputType = {
    id?: true
  }

  export type User_accountSumAggregateInputType = {
    id?: true
  }

  export type User_accountMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    referral_code?: true
    referred_by_code?: true
    imgProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type User_accountMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    referral_code?: true
    referred_by_code?: true
    imgProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type User_accountCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    referral_code?: true
    referred_by_code?: true
    imgProfile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type User_accountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_account to aggregate.
     */
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     */
    orderBy?: user_accountOrderByWithRelationInput | user_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_accounts
    **/
    _count?: true | User_accountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_accountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_accountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_accountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_accountMaxAggregateInputType
  }

  export type GetUser_accountAggregateType<T extends User_accountAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_account]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_account[P]>
      : GetScalarType<T[P], AggregateUser_account[P]>
  }




  export type user_accountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_accountWhereInput
    orderBy?: user_accountOrderByWithAggregationInput | user_accountOrderByWithAggregationInput[]
    by: User_accountScalarFieldEnum[] | User_accountScalarFieldEnum
    having?: user_accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_accountCountAggregateInputType | true
    _avg?: User_accountAvgAggregateInputType
    _sum?: User_accountSumAggregateInputType
    _min?: User_accountMinAggregateInputType
    _max?: User_accountMaxAggregateInputType
  }

  export type User_accountGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code: string | null
    imgProfile: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: User_accountCountAggregateOutputType | null
    _avg: User_accountAvgAggregateOutputType | null
    _sum: User_accountSumAggregateOutputType | null
    _min: User_accountMinAggregateOutputType | null
    _max: User_accountMaxAggregateOutputType | null
  }

  type GetUser_accountGroupByPayload<T extends user_accountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_accountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_accountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_accountGroupByOutputType[P]>
            : GetScalarType<T[P], User_accountGroupByOutputType[P]>
        }
      >
    >


  export type user_accountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    referral_code?: boolean
    referred_by_code?: boolean
    imgProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user_profile?: boolean | user_account$user_profileArgs<ExtArgs>
    user_points?: boolean | user_account$user_pointsArgs<ExtArgs>
    points_redemption?: boolean | user_account$points_redemptionArgs<ExtArgs>
    organizer_reviews?: boolean | user_account$organizer_reviewsArgs<ExtArgs>
    ticket_holds?: boolean | user_account$ticket_holdsArgs<ExtArgs>
    event_attendees?: boolean | user_account$event_attendeesArgs<ExtArgs>
    transactions?: boolean | user_account$transactionsArgs<ExtArgs>
    user_coupon?: boolean | user_account$user_couponArgs<ExtArgs>
    _count?: boolean | User_accountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_account"]>

  export type user_accountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    referral_code?: boolean
    referred_by_code?: boolean
    imgProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user_account"]>

  export type user_accountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    referral_code?: boolean
    referred_by_code?: boolean
    imgProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user_account"]>

  export type user_accountSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    referral_code?: boolean
    referred_by_code?: boolean
    imgProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type user_accountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "role" | "referral_code" | "referred_by_code" | "imgProfile" | "createdAt" | "updatedAt", ExtArgs["result"]["user_account"]>
  export type user_accountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_profile?: boolean | user_account$user_profileArgs<ExtArgs>
    user_points?: boolean | user_account$user_pointsArgs<ExtArgs>
    points_redemption?: boolean | user_account$points_redemptionArgs<ExtArgs>
    organizer_reviews?: boolean | user_account$organizer_reviewsArgs<ExtArgs>
    ticket_holds?: boolean | user_account$ticket_holdsArgs<ExtArgs>
    event_attendees?: boolean | user_account$event_attendeesArgs<ExtArgs>
    transactions?: boolean | user_account$transactionsArgs<ExtArgs>
    user_coupon?: boolean | user_account$user_couponArgs<ExtArgs>
    _count?: boolean | User_accountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type user_accountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type user_accountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $user_accountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_account"
    objects: {
      user_profile: Prisma.$user_profilePayload<ExtArgs> | null
      user_points: Prisma.$user_pointsPayload<ExtArgs>[]
      points_redemption: Prisma.$points_redemptionPayload<ExtArgs>[]
      organizer_reviews: Prisma.$organizer_reviewsPayload<ExtArgs>[]
      ticket_holds: Prisma.$ticket_holdsPayload<ExtArgs>[]
      event_attendees: Prisma.$event_attendeesPayload<ExtArgs>[]
      transactions: Prisma.$transactions_tablePayload<ExtArgs>[]
      user_coupon: Prisma.$user_couponPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      role: $Enums.account_role
      referral_code: string
      referred_by_code: string | null
      imgProfile: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["user_account"]>
    composites: {}
  }

  type user_accountGetPayload<S extends boolean | null | undefined | user_accountDefaultArgs> = $Result.GetResult<Prisma.$user_accountPayload, S>

  type user_accountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_accountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_accountCountAggregateInputType | true
    }

  export interface user_accountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_account'], meta: { name: 'user_account' } }
    /**
     * Find zero or one User_account that matches the filter.
     * @param {user_accountFindUniqueArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_accountFindUniqueArgs>(args: SelectSubset<T, user_accountFindUniqueArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_accountFindUniqueOrThrowArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_accountFindUniqueOrThrowArgs>(args: SelectSubset<T, user_accountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountFindFirstArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_accountFindFirstArgs>(args?: SelectSubset<T, user_accountFindFirstArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountFindFirstOrThrowArgs} args - Arguments to find a User_account
     * @example
     * // Get one User_account
     * const user_account = await prisma.user_account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_accountFindFirstOrThrowArgs>(args?: SelectSubset<T, user_accountFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_accounts
     * const user_accounts = await prisma.user_account.findMany()
     * 
     * // Get first 10 User_accounts
     * const user_accounts = await prisma.user_account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_accountWithIdOnly = await prisma.user_account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_accountFindManyArgs>(args?: SelectSubset<T, user_accountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_account.
     * @param {user_accountCreateArgs} args - Arguments to create a User_account.
     * @example
     * // Create one User_account
     * const User_account = await prisma.user_account.create({
     *   data: {
     *     // ... data to create a User_account
     *   }
     * })
     * 
     */
    create<T extends user_accountCreateArgs>(args: SelectSubset<T, user_accountCreateArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_accounts.
     * @param {user_accountCreateManyArgs} args - Arguments to create many User_accounts.
     * @example
     * // Create many User_accounts
     * const user_account = await prisma.user_account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_accountCreateManyArgs>(args?: SelectSubset<T, user_accountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_accounts and returns the data saved in the database.
     * @param {user_accountCreateManyAndReturnArgs} args - Arguments to create many User_accounts.
     * @example
     * // Create many User_accounts
     * const user_account = await prisma.user_account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_accounts and only return the `id`
     * const user_accountWithIdOnly = await prisma.user_account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_accountCreateManyAndReturnArgs>(args?: SelectSubset<T, user_accountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_account.
     * @param {user_accountDeleteArgs} args - Arguments to delete one User_account.
     * @example
     * // Delete one User_account
     * const User_account = await prisma.user_account.delete({
     *   where: {
     *     // ... filter to delete one User_account
     *   }
     * })
     * 
     */
    delete<T extends user_accountDeleteArgs>(args: SelectSubset<T, user_accountDeleteArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_account.
     * @param {user_accountUpdateArgs} args - Arguments to update one User_account.
     * @example
     * // Update one User_account
     * const user_account = await prisma.user_account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_accountUpdateArgs>(args: SelectSubset<T, user_accountUpdateArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_accounts.
     * @param {user_accountDeleteManyArgs} args - Arguments to filter User_accounts to delete.
     * @example
     * // Delete a few User_accounts
     * const { count } = await prisma.user_account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_accountDeleteManyArgs>(args?: SelectSubset<T, user_accountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_accounts
     * const user_account = await prisma.user_account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_accountUpdateManyArgs>(args: SelectSubset<T, user_accountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_accounts and returns the data updated in the database.
     * @param {user_accountUpdateManyAndReturnArgs} args - Arguments to update many User_accounts.
     * @example
     * // Update many User_accounts
     * const user_account = await prisma.user_account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_accounts and only return the `id`
     * const user_accountWithIdOnly = await prisma.user_account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_accountUpdateManyAndReturnArgs>(args: SelectSubset<T, user_accountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_account.
     * @param {user_accountUpsertArgs} args - Arguments to update or create a User_account.
     * @example
     * // Update or create a User_account
     * const user_account = await prisma.user_account.upsert({
     *   create: {
     *     // ... data to create a User_account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_account we want to update
     *   }
     * })
     */
    upsert<T extends user_accountUpsertArgs>(args: SelectSubset<T, user_accountUpsertArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountCountArgs} args - Arguments to filter User_accounts to count.
     * @example
     * // Count the number of User_accounts
     * const count = await prisma.user_account.count({
     *   where: {
     *     // ... the filter for the User_accounts we want to count
     *   }
     * })
    **/
    count<T extends user_accountCountArgs>(
      args?: Subset<T, user_accountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_accountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_accountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_accountAggregateArgs>(args: Subset<T, User_accountAggregateArgs>): Prisma.PrismaPromise<GetUser_accountAggregateType<T>>

    /**
     * Group by User_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_accountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_accountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_accountGroupByArgs['orderBy'] }
        : { orderBy?: user_accountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_accountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_accountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_account model
   */
  readonly fields: user_accountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_accountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_profile<T extends user_account$user_profileArgs<ExtArgs> = {}>(args?: Subset<T, user_account$user_profileArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user_points<T extends user_account$user_pointsArgs<ExtArgs> = {}>(args?: Subset<T, user_account$user_pointsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    points_redemption<T extends user_account$points_redemptionArgs<ExtArgs> = {}>(args?: Subset<T, user_account$points_redemptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    organizer_reviews<T extends user_account$organizer_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, user_account$organizer_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_holds<T extends user_account$ticket_holdsArgs<ExtArgs> = {}>(args?: Subset<T, user_account$ticket_holdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_attendees<T extends user_account$event_attendeesArgs<ExtArgs> = {}>(args?: Subset<T, user_account$event_attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends user_account$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, user_account$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user_coupon<T extends user_account$user_couponArgs<ExtArgs> = {}>(args?: Subset<T, user_account$user_couponArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_account model
   */
  interface user_accountFieldRefs {
    readonly id: FieldRef<"user_account", 'Int'>
    readonly username: FieldRef<"user_account", 'String'>
    readonly email: FieldRef<"user_account", 'String'>
    readonly password: FieldRef<"user_account", 'String'>
    readonly role: FieldRef<"user_account", 'account_role'>
    readonly referral_code: FieldRef<"user_account", 'String'>
    readonly referred_by_code: FieldRef<"user_account", 'String'>
    readonly imgProfile: FieldRef<"user_account", 'String'>
    readonly createdAt: FieldRef<"user_account", 'DateTime'>
    readonly updatedAt: FieldRef<"user_account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user_account findUnique
   */
  export type user_accountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter, which user_account to fetch.
     */
    where: user_accountWhereUniqueInput
  }

  /**
   * user_account findUniqueOrThrow
   */
  export type user_accountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter, which user_account to fetch.
     */
    where: user_accountWhereUniqueInput
  }

  /**
   * user_account findFirst
   */
  export type user_accountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter, which user_account to fetch.
     */
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     */
    orderBy?: user_accountOrderByWithRelationInput | user_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_accounts.
     */
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_accounts.
     */
    distinct?: User_accountScalarFieldEnum | User_accountScalarFieldEnum[]
  }

  /**
   * user_account findFirstOrThrow
   */
  export type user_accountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter, which user_account to fetch.
     */
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     */
    orderBy?: user_accountOrderByWithRelationInput | user_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_accounts.
     */
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_accounts.
     */
    distinct?: User_accountScalarFieldEnum | User_accountScalarFieldEnum[]
  }

  /**
   * user_account findMany
   */
  export type user_accountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter, which user_accounts to fetch.
     */
    where?: user_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_accounts to fetch.
     */
    orderBy?: user_accountOrderByWithRelationInput | user_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_accounts.
     */
    cursor?: user_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_accounts.
     */
    skip?: number
    distinct?: User_accountScalarFieldEnum | User_accountScalarFieldEnum[]
  }

  /**
   * user_account create
   */
  export type user_accountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * The data needed to create a user_account.
     */
    data: XOR<user_accountCreateInput, user_accountUncheckedCreateInput>
  }

  /**
   * user_account createMany
   */
  export type user_accountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_accounts.
     */
    data: user_accountCreateManyInput | user_accountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_account createManyAndReturn
   */
  export type user_accountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * The data used to create many user_accounts.
     */
    data: user_accountCreateManyInput | user_accountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_account update
   */
  export type user_accountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * The data needed to update a user_account.
     */
    data: XOR<user_accountUpdateInput, user_accountUncheckedUpdateInput>
    /**
     * Choose, which user_account to update.
     */
    where: user_accountWhereUniqueInput
  }

  /**
   * user_account updateMany
   */
  export type user_accountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_accounts.
     */
    data: XOR<user_accountUpdateManyMutationInput, user_accountUncheckedUpdateManyInput>
    /**
     * Filter which user_accounts to update
     */
    where?: user_accountWhereInput
    /**
     * Limit how many user_accounts to update.
     */
    limit?: number
  }

  /**
   * user_account updateManyAndReturn
   */
  export type user_accountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * The data used to update user_accounts.
     */
    data: XOR<user_accountUpdateManyMutationInput, user_accountUncheckedUpdateManyInput>
    /**
     * Filter which user_accounts to update
     */
    where?: user_accountWhereInput
    /**
     * Limit how many user_accounts to update.
     */
    limit?: number
  }

  /**
   * user_account upsert
   */
  export type user_accountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * The filter to search for the user_account to update in case it exists.
     */
    where: user_accountWhereUniqueInput
    /**
     * In case the user_account found by the `where` argument doesn't exist, create a new user_account with this data.
     */
    create: XOR<user_accountCreateInput, user_accountUncheckedCreateInput>
    /**
     * In case the user_account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_accountUpdateInput, user_accountUncheckedUpdateInput>
  }

  /**
   * user_account delete
   */
  export type user_accountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
    /**
     * Filter which user_account to delete.
     */
    where: user_accountWhereUniqueInput
  }

  /**
   * user_account deleteMany
   */
  export type user_accountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_accounts to delete
     */
    where?: user_accountWhereInput
    /**
     * Limit how many user_accounts to delete.
     */
    limit?: number
  }

  /**
   * user_account.user_profile
   */
  export type user_account$user_profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    where?: user_profileWhereInput
  }

  /**
   * user_account.user_points
   */
  export type user_account$user_pointsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    where?: user_pointsWhereInput
    orderBy?: user_pointsOrderByWithRelationInput | user_pointsOrderByWithRelationInput[]
    cursor?: user_pointsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_pointsScalarFieldEnum | User_pointsScalarFieldEnum[]
  }

  /**
   * user_account.points_redemption
   */
  export type user_account$points_redemptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    where?: points_redemptionWhereInput
    orderBy?: points_redemptionOrderByWithRelationInput | points_redemptionOrderByWithRelationInput[]
    cursor?: points_redemptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Points_redemptionScalarFieldEnum | Points_redemptionScalarFieldEnum[]
  }

  /**
   * user_account.organizer_reviews
   */
  export type user_account$organizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    where?: organizer_reviewsWhereInput
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    cursor?: organizer_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * user_account.ticket_holds
   */
  export type user_account$ticket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    where?: ticket_holdsWhereInput
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    cursor?: ticket_holdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * user_account.event_attendees
   */
  export type user_account$event_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    where?: event_attendeesWhereInput
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    cursor?: event_attendeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * user_account.transactions
   */
  export type user_account$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    where?: transactions_tableWhereInput
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    cursor?: transactions_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * user_account.user_coupon
   */
  export type user_account$user_couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    where?: user_couponWhereInput
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    cursor?: user_couponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_couponScalarFieldEnum | User_couponScalarFieldEnum[]
  }

  /**
   * user_account without action
   */
  export type user_accountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_account
     */
    select?: user_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_account
     */
    omit?: user_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_accountInclude<ExtArgs> | null
  }


  /**
   * Model user_profile
   */

  export type AggregateUser_profile = {
    _count: User_profileCountAggregateOutputType | null
    _avg: User_profileAvgAggregateOutputType | null
    _sum: User_profileSumAggregateOutputType | null
    _min: User_profileMinAggregateOutputType | null
    _max: User_profileMaxAggregateOutputType | null
  }

  export type User_profileAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_phone: number | null
  }

  export type User_profileSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_phone: number | null
  }

  export type User_profileMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_fullname: string | null
    user_date_of_birth: Date | null
    user_phone: number | null
    user_profile_image: string | null
  }

  export type User_profileMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    user_fullname: string | null
    user_date_of_birth: Date | null
    user_phone: number | null
    user_profile_image: string | null
  }

  export type User_profileCountAggregateOutputType = {
    id: number
    user_id: number
    user_fullname: number
    user_date_of_birth: number
    user_phone: number
    user_profile_image: number
    _all: number
  }


  export type User_profileAvgAggregateInputType = {
    id?: true
    user_id?: true
    user_phone?: true
  }

  export type User_profileSumAggregateInputType = {
    id?: true
    user_id?: true
    user_phone?: true
  }

  export type User_profileMinAggregateInputType = {
    id?: true
    user_id?: true
    user_fullname?: true
    user_date_of_birth?: true
    user_phone?: true
    user_profile_image?: true
  }

  export type User_profileMaxAggregateInputType = {
    id?: true
    user_id?: true
    user_fullname?: true
    user_date_of_birth?: true
    user_phone?: true
    user_profile_image?: true
  }

  export type User_profileCountAggregateInputType = {
    id?: true
    user_id?: true
    user_fullname?: true
    user_date_of_birth?: true
    user_phone?: true
    user_profile_image?: true
    _all?: true
  }

  export type User_profileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_profile to aggregate.
     */
    where?: user_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_profiles to fetch.
     */
    orderBy?: user_profileOrderByWithRelationInput | user_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_profiles
    **/
    _count?: true | User_profileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_profileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_profileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_profileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_profileMaxAggregateInputType
  }

  export type GetUser_profileAggregateType<T extends User_profileAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_profile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_profile[P]>
      : GetScalarType<T[P], AggregateUser_profile[P]>
  }




  export type user_profileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_profileWhereInput
    orderBy?: user_profileOrderByWithAggregationInput | user_profileOrderByWithAggregationInput[]
    by: User_profileScalarFieldEnum[] | User_profileScalarFieldEnum
    having?: user_profileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_profileCountAggregateInputType | true
    _avg?: User_profileAvgAggregateInputType
    _sum?: User_profileSumAggregateInputType
    _min?: User_profileMinAggregateInputType
    _max?: User_profileMaxAggregateInputType
  }

  export type User_profileGroupByOutputType = {
    id: number
    user_id: number
    user_fullname: string
    user_date_of_birth: Date
    user_phone: number
    user_profile_image: string
    _count: User_profileCountAggregateOutputType | null
    _avg: User_profileAvgAggregateOutputType | null
    _sum: User_profileSumAggregateOutputType | null
    _min: User_profileMinAggregateOutputType | null
    _max: User_profileMaxAggregateOutputType | null
  }

  type GetUser_profileGroupByPayload<T extends user_profileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_profileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_profileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_profileGroupByOutputType[P]>
            : GetScalarType<T[P], User_profileGroupByOutputType[P]>
        }
      >
    >


  export type user_profileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user_fullname?: boolean
    user_date_of_birth?: boolean
    user_phone?: boolean
    user_profile_image?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_profile"]>

  export type user_profileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user_fullname?: boolean
    user_date_of_birth?: boolean
    user_phone?: boolean
    user_profile_image?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_profile"]>

  export type user_profileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user_fullname?: boolean
    user_date_of_birth?: boolean
    user_phone?: boolean
    user_profile_image?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_profile"]>

  export type user_profileSelectScalar = {
    id?: boolean
    user_id?: boolean
    user_fullname?: boolean
    user_date_of_birth?: boolean
    user_phone?: boolean
    user_profile_image?: boolean
  }

  export type user_profileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "user_fullname" | "user_date_of_birth" | "user_phone" | "user_profile_image", ExtArgs["result"]["user_profile"]>
  export type user_profileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type user_profileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type user_profileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }

  export type $user_profilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_profile"
    objects: {
      user: Prisma.$user_accountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      user_fullname: string
      user_date_of_birth: Date
      user_phone: number
      user_profile_image: string
    }, ExtArgs["result"]["user_profile"]>
    composites: {}
  }

  type user_profileGetPayload<S extends boolean | null | undefined | user_profileDefaultArgs> = $Result.GetResult<Prisma.$user_profilePayload, S>

  type user_profileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_profileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_profileCountAggregateInputType | true
    }

  export interface user_profileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_profile'], meta: { name: 'user_profile' } }
    /**
     * Find zero or one User_profile that matches the filter.
     * @param {user_profileFindUniqueArgs} args - Arguments to find a User_profile
     * @example
     * // Get one User_profile
     * const user_profile = await prisma.user_profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_profileFindUniqueArgs>(args: SelectSubset<T, user_profileFindUniqueArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_profileFindUniqueOrThrowArgs} args - Arguments to find a User_profile
     * @example
     * // Get one User_profile
     * const user_profile = await prisma.user_profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_profileFindUniqueOrThrowArgs>(args: SelectSubset<T, user_profileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileFindFirstArgs} args - Arguments to find a User_profile
     * @example
     * // Get one User_profile
     * const user_profile = await prisma.user_profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_profileFindFirstArgs>(args?: SelectSubset<T, user_profileFindFirstArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileFindFirstOrThrowArgs} args - Arguments to find a User_profile
     * @example
     * // Get one User_profile
     * const user_profile = await prisma.user_profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_profileFindFirstOrThrowArgs>(args?: SelectSubset<T, user_profileFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_profiles
     * const user_profiles = await prisma.user_profile.findMany()
     * 
     * // Get first 10 User_profiles
     * const user_profiles = await prisma.user_profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_profileWithIdOnly = await prisma.user_profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_profileFindManyArgs>(args?: SelectSubset<T, user_profileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_profile.
     * @param {user_profileCreateArgs} args - Arguments to create a User_profile.
     * @example
     * // Create one User_profile
     * const User_profile = await prisma.user_profile.create({
     *   data: {
     *     // ... data to create a User_profile
     *   }
     * })
     * 
     */
    create<T extends user_profileCreateArgs>(args: SelectSubset<T, user_profileCreateArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_profiles.
     * @param {user_profileCreateManyArgs} args - Arguments to create many User_profiles.
     * @example
     * // Create many User_profiles
     * const user_profile = await prisma.user_profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_profileCreateManyArgs>(args?: SelectSubset<T, user_profileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_profiles and returns the data saved in the database.
     * @param {user_profileCreateManyAndReturnArgs} args - Arguments to create many User_profiles.
     * @example
     * // Create many User_profiles
     * const user_profile = await prisma.user_profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_profiles and only return the `id`
     * const user_profileWithIdOnly = await prisma.user_profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_profileCreateManyAndReturnArgs>(args?: SelectSubset<T, user_profileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_profile.
     * @param {user_profileDeleteArgs} args - Arguments to delete one User_profile.
     * @example
     * // Delete one User_profile
     * const User_profile = await prisma.user_profile.delete({
     *   where: {
     *     // ... filter to delete one User_profile
     *   }
     * })
     * 
     */
    delete<T extends user_profileDeleteArgs>(args: SelectSubset<T, user_profileDeleteArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_profile.
     * @param {user_profileUpdateArgs} args - Arguments to update one User_profile.
     * @example
     * // Update one User_profile
     * const user_profile = await prisma.user_profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_profileUpdateArgs>(args: SelectSubset<T, user_profileUpdateArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_profiles.
     * @param {user_profileDeleteManyArgs} args - Arguments to filter User_profiles to delete.
     * @example
     * // Delete a few User_profiles
     * const { count } = await prisma.user_profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_profileDeleteManyArgs>(args?: SelectSubset<T, user_profileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_profiles
     * const user_profile = await prisma.user_profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_profileUpdateManyArgs>(args: SelectSubset<T, user_profileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_profiles and returns the data updated in the database.
     * @param {user_profileUpdateManyAndReturnArgs} args - Arguments to update many User_profiles.
     * @example
     * // Update many User_profiles
     * const user_profile = await prisma.user_profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_profiles and only return the `id`
     * const user_profileWithIdOnly = await prisma.user_profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_profileUpdateManyAndReturnArgs>(args: SelectSubset<T, user_profileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_profile.
     * @param {user_profileUpsertArgs} args - Arguments to update or create a User_profile.
     * @example
     * // Update or create a User_profile
     * const user_profile = await prisma.user_profile.upsert({
     *   create: {
     *     // ... data to create a User_profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_profile we want to update
     *   }
     * })
     */
    upsert<T extends user_profileUpsertArgs>(args: SelectSubset<T, user_profileUpsertArgs<ExtArgs>>): Prisma__user_profileClient<$Result.GetResult<Prisma.$user_profilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileCountArgs} args - Arguments to filter User_profiles to count.
     * @example
     * // Count the number of User_profiles
     * const count = await prisma.user_profile.count({
     *   where: {
     *     // ... the filter for the User_profiles we want to count
     *   }
     * })
    **/
    count<T extends user_profileCountArgs>(
      args?: Subset<T, user_profileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_profileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_profileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_profileAggregateArgs>(args: Subset<T, User_profileAggregateArgs>): Prisma.PrismaPromise<GetUser_profileAggregateType<T>>

    /**
     * Group by User_profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_profileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_profileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_profileGroupByArgs['orderBy'] }
        : { orderBy?: user_profileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_profileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_profileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_profile model
   */
  readonly fields: user_profileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_profileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_profile model
   */
  interface user_profileFieldRefs {
    readonly id: FieldRef<"user_profile", 'Int'>
    readonly user_id: FieldRef<"user_profile", 'Int'>
    readonly user_fullname: FieldRef<"user_profile", 'String'>
    readonly user_date_of_birth: FieldRef<"user_profile", 'DateTime'>
    readonly user_phone: FieldRef<"user_profile", 'Int'>
    readonly user_profile_image: FieldRef<"user_profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_profile findUnique
   */
  export type user_profileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter, which user_profile to fetch.
     */
    where: user_profileWhereUniqueInput
  }

  /**
   * user_profile findUniqueOrThrow
   */
  export type user_profileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter, which user_profile to fetch.
     */
    where: user_profileWhereUniqueInput
  }

  /**
   * user_profile findFirst
   */
  export type user_profileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter, which user_profile to fetch.
     */
    where?: user_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_profiles to fetch.
     */
    orderBy?: user_profileOrderByWithRelationInput | user_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_profiles.
     */
    cursor?: user_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_profiles.
     */
    distinct?: User_profileScalarFieldEnum | User_profileScalarFieldEnum[]
  }

  /**
   * user_profile findFirstOrThrow
   */
  export type user_profileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter, which user_profile to fetch.
     */
    where?: user_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_profiles to fetch.
     */
    orderBy?: user_profileOrderByWithRelationInput | user_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_profiles.
     */
    cursor?: user_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_profiles.
     */
    distinct?: User_profileScalarFieldEnum | User_profileScalarFieldEnum[]
  }

  /**
   * user_profile findMany
   */
  export type user_profileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter, which user_profiles to fetch.
     */
    where?: user_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_profiles to fetch.
     */
    orderBy?: user_profileOrderByWithRelationInput | user_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_profiles.
     */
    cursor?: user_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_profiles.
     */
    skip?: number
    distinct?: User_profileScalarFieldEnum | User_profileScalarFieldEnum[]
  }

  /**
   * user_profile create
   */
  export type user_profileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * The data needed to create a user_profile.
     */
    data: XOR<user_profileCreateInput, user_profileUncheckedCreateInput>
  }

  /**
   * user_profile createMany
   */
  export type user_profileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_profiles.
     */
    data: user_profileCreateManyInput | user_profileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_profile createManyAndReturn
   */
  export type user_profileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * The data used to create many user_profiles.
     */
    data: user_profileCreateManyInput | user_profileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_profile update
   */
  export type user_profileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * The data needed to update a user_profile.
     */
    data: XOR<user_profileUpdateInput, user_profileUncheckedUpdateInput>
    /**
     * Choose, which user_profile to update.
     */
    where: user_profileWhereUniqueInput
  }

  /**
   * user_profile updateMany
   */
  export type user_profileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_profiles.
     */
    data: XOR<user_profileUpdateManyMutationInput, user_profileUncheckedUpdateManyInput>
    /**
     * Filter which user_profiles to update
     */
    where?: user_profileWhereInput
    /**
     * Limit how many user_profiles to update.
     */
    limit?: number
  }

  /**
   * user_profile updateManyAndReturn
   */
  export type user_profileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * The data used to update user_profiles.
     */
    data: XOR<user_profileUpdateManyMutationInput, user_profileUncheckedUpdateManyInput>
    /**
     * Filter which user_profiles to update
     */
    where?: user_profileWhereInput
    /**
     * Limit how many user_profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_profile upsert
   */
  export type user_profileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * The filter to search for the user_profile to update in case it exists.
     */
    where: user_profileWhereUniqueInput
    /**
     * In case the user_profile found by the `where` argument doesn't exist, create a new user_profile with this data.
     */
    create: XOR<user_profileCreateInput, user_profileUncheckedCreateInput>
    /**
     * In case the user_profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_profileUpdateInput, user_profileUncheckedUpdateInput>
  }

  /**
   * user_profile delete
   */
  export type user_profileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
    /**
     * Filter which user_profile to delete.
     */
    where: user_profileWhereUniqueInput
  }

  /**
   * user_profile deleteMany
   */
  export type user_profileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_profiles to delete
     */
    where?: user_profileWhereInput
    /**
     * Limit how many user_profiles to delete.
     */
    limit?: number
  }

  /**
   * user_profile without action
   */
  export type user_profileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_profile
     */
    select?: user_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_profile
     */
    omit?: user_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_profileInclude<ExtArgs> | null
  }


  /**
   * Model user_points
   */

  export type AggregateUser_points = {
    _count: User_pointsCountAggregateOutputType | null
    _avg: User_pointsAvgAggregateOutputType | null
    _sum: User_pointsSumAggregateOutputType | null
    _min: User_pointsMinAggregateOutputType | null
    _max: User_pointsMaxAggregateOutputType | null
  }

  export type User_pointsAvgAggregateOutputType = {
    id: number | null
    points: number | null
    points_source_id: number | null
    points_remaining: number | null
    user_id: number | null
  }

  export type User_pointsSumAggregateOutputType = {
    id: number | null
    points: number | null
    points_source_id: number | null
    points_remaining: number | null
    user_id: number | null
  }

  export type User_pointsMinAggregateOutputType = {
    id: number | null
    points: number | null
    points_source_type: string | null
    points_source_id: number | null
    earned_at: Date | null
    expires_at: Date | null
    points_remaining: number | null
    user_id: number | null
  }

  export type User_pointsMaxAggregateOutputType = {
    id: number | null
    points: number | null
    points_source_type: string | null
    points_source_id: number | null
    earned_at: Date | null
    expires_at: Date | null
    points_remaining: number | null
    user_id: number | null
  }

  export type User_pointsCountAggregateOutputType = {
    id: number
    points: number
    points_source_type: number
    points_source_id: number
    earned_at: number
    expires_at: number
    points_remaining: number
    user_id: number
    _all: number
  }


  export type User_pointsAvgAggregateInputType = {
    id?: true
    points?: true
    points_source_id?: true
    points_remaining?: true
    user_id?: true
  }

  export type User_pointsSumAggregateInputType = {
    id?: true
    points?: true
    points_source_id?: true
    points_remaining?: true
    user_id?: true
  }

  export type User_pointsMinAggregateInputType = {
    id?: true
    points?: true
    points_source_type?: true
    points_source_id?: true
    earned_at?: true
    expires_at?: true
    points_remaining?: true
    user_id?: true
  }

  export type User_pointsMaxAggregateInputType = {
    id?: true
    points?: true
    points_source_type?: true
    points_source_id?: true
    earned_at?: true
    expires_at?: true
    points_remaining?: true
    user_id?: true
  }

  export type User_pointsCountAggregateInputType = {
    id?: true
    points?: true
    points_source_type?: true
    points_source_id?: true
    earned_at?: true
    expires_at?: true
    points_remaining?: true
    user_id?: true
    _all?: true
  }

  export type User_pointsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_points to aggregate.
     */
    where?: user_pointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_points to fetch.
     */
    orderBy?: user_pointsOrderByWithRelationInput | user_pointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_pointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_points
    **/
    _count?: true | User_pointsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_pointsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_pointsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_pointsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_pointsMaxAggregateInputType
  }

  export type GetUser_pointsAggregateType<T extends User_pointsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_points]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_points[P]>
      : GetScalarType<T[P], AggregateUser_points[P]>
  }




  export type user_pointsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_pointsWhereInput
    orderBy?: user_pointsOrderByWithAggregationInput | user_pointsOrderByWithAggregationInput[]
    by: User_pointsScalarFieldEnum[] | User_pointsScalarFieldEnum
    having?: user_pointsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_pointsCountAggregateInputType | true
    _avg?: User_pointsAvgAggregateInputType
    _sum?: User_pointsSumAggregateInputType
    _min?: User_pointsMinAggregateInputType
    _max?: User_pointsMaxAggregateInputType
  }

  export type User_pointsGroupByOutputType = {
    id: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date
    expires_at: Date
    points_remaining: number
    user_id: number
    _count: User_pointsCountAggregateOutputType | null
    _avg: User_pointsAvgAggregateOutputType | null
    _sum: User_pointsSumAggregateOutputType | null
    _min: User_pointsMinAggregateOutputType | null
    _max: User_pointsMaxAggregateOutputType | null
  }

  type GetUser_pointsGroupByPayload<T extends user_pointsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_pointsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_pointsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_pointsGroupByOutputType[P]>
            : GetScalarType<T[P], User_pointsGroupByOutputType[P]>
        }
      >
    >


  export type user_pointsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    points_source_type?: boolean
    points_source_id?: boolean
    earned_at?: boolean
    expires_at?: boolean
    points_remaining?: boolean
    user_id?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    points_redemption_items?: boolean | user_points$points_redemption_itemsArgs<ExtArgs>
    _count?: boolean | User_pointsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_points"]>

  export type user_pointsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    points_source_type?: boolean
    points_source_id?: boolean
    earned_at?: boolean
    expires_at?: boolean
    points_remaining?: boolean
    user_id?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_points"]>

  export type user_pointsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    points?: boolean
    points_source_type?: boolean
    points_source_id?: boolean
    earned_at?: boolean
    expires_at?: boolean
    points_remaining?: boolean
    user_id?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_points"]>

  export type user_pointsSelectScalar = {
    id?: boolean
    points?: boolean
    points_source_type?: boolean
    points_source_id?: boolean
    earned_at?: boolean
    expires_at?: boolean
    points_remaining?: boolean
    user_id?: boolean
  }

  export type user_pointsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "points" | "points_source_type" | "points_source_id" | "earned_at" | "expires_at" | "points_remaining" | "user_id", ExtArgs["result"]["user_points"]>
  export type user_pointsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    points_redemption_items?: boolean | user_points$points_redemption_itemsArgs<ExtArgs>
    _count?: boolean | User_pointsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type user_pointsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type user_pointsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }

  export type $user_pointsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_points"
    objects: {
      user: Prisma.$user_accountPayload<ExtArgs>
      points_redemption_items: Prisma.$points_redemption_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      points: number
      points_source_type: string
      points_source_id: number
      earned_at: Date
      expires_at: Date
      points_remaining: number
      user_id: number
    }, ExtArgs["result"]["user_points"]>
    composites: {}
  }

  type user_pointsGetPayload<S extends boolean | null | undefined | user_pointsDefaultArgs> = $Result.GetResult<Prisma.$user_pointsPayload, S>

  type user_pointsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_pointsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_pointsCountAggregateInputType | true
    }

  export interface user_pointsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_points'], meta: { name: 'user_points' } }
    /**
     * Find zero or one User_points that matches the filter.
     * @param {user_pointsFindUniqueArgs} args - Arguments to find a User_points
     * @example
     * // Get one User_points
     * const user_points = await prisma.user_points.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_pointsFindUniqueArgs>(args: SelectSubset<T, user_pointsFindUniqueArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_points that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_pointsFindUniqueOrThrowArgs} args - Arguments to find a User_points
     * @example
     * // Get one User_points
     * const user_points = await prisma.user_points.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_pointsFindUniqueOrThrowArgs>(args: SelectSubset<T, user_pointsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_points that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsFindFirstArgs} args - Arguments to find a User_points
     * @example
     * // Get one User_points
     * const user_points = await prisma.user_points.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_pointsFindFirstArgs>(args?: SelectSubset<T, user_pointsFindFirstArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_points that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsFindFirstOrThrowArgs} args - Arguments to find a User_points
     * @example
     * // Get one User_points
     * const user_points = await prisma.user_points.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_pointsFindFirstOrThrowArgs>(args?: SelectSubset<T, user_pointsFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_points that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_points
     * const user_points = await prisma.user_points.findMany()
     * 
     * // Get first 10 User_points
     * const user_points = await prisma.user_points.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_pointsWithIdOnly = await prisma.user_points.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_pointsFindManyArgs>(args?: SelectSubset<T, user_pointsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_points.
     * @param {user_pointsCreateArgs} args - Arguments to create a User_points.
     * @example
     * // Create one User_points
     * const User_points = await prisma.user_points.create({
     *   data: {
     *     // ... data to create a User_points
     *   }
     * })
     * 
     */
    create<T extends user_pointsCreateArgs>(args: SelectSubset<T, user_pointsCreateArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_points.
     * @param {user_pointsCreateManyArgs} args - Arguments to create many User_points.
     * @example
     * // Create many User_points
     * const user_points = await prisma.user_points.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_pointsCreateManyArgs>(args?: SelectSubset<T, user_pointsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_points and returns the data saved in the database.
     * @param {user_pointsCreateManyAndReturnArgs} args - Arguments to create many User_points.
     * @example
     * // Create many User_points
     * const user_points = await prisma.user_points.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_points and only return the `id`
     * const user_pointsWithIdOnly = await prisma.user_points.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_pointsCreateManyAndReturnArgs>(args?: SelectSubset<T, user_pointsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_points.
     * @param {user_pointsDeleteArgs} args - Arguments to delete one User_points.
     * @example
     * // Delete one User_points
     * const User_points = await prisma.user_points.delete({
     *   where: {
     *     // ... filter to delete one User_points
     *   }
     * })
     * 
     */
    delete<T extends user_pointsDeleteArgs>(args: SelectSubset<T, user_pointsDeleteArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_points.
     * @param {user_pointsUpdateArgs} args - Arguments to update one User_points.
     * @example
     * // Update one User_points
     * const user_points = await prisma.user_points.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_pointsUpdateArgs>(args: SelectSubset<T, user_pointsUpdateArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_points.
     * @param {user_pointsDeleteManyArgs} args - Arguments to filter User_points to delete.
     * @example
     * // Delete a few User_points
     * const { count } = await prisma.user_points.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_pointsDeleteManyArgs>(args?: SelectSubset<T, user_pointsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_points
     * const user_points = await prisma.user_points.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_pointsUpdateManyArgs>(args: SelectSubset<T, user_pointsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_points and returns the data updated in the database.
     * @param {user_pointsUpdateManyAndReturnArgs} args - Arguments to update many User_points.
     * @example
     * // Update many User_points
     * const user_points = await prisma.user_points.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_points and only return the `id`
     * const user_pointsWithIdOnly = await prisma.user_points.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_pointsUpdateManyAndReturnArgs>(args: SelectSubset<T, user_pointsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_points.
     * @param {user_pointsUpsertArgs} args - Arguments to update or create a User_points.
     * @example
     * // Update or create a User_points
     * const user_points = await prisma.user_points.upsert({
     *   create: {
     *     // ... data to create a User_points
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_points we want to update
     *   }
     * })
     */
    upsert<T extends user_pointsUpsertArgs>(args: SelectSubset<T, user_pointsUpsertArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsCountArgs} args - Arguments to filter User_points to count.
     * @example
     * // Count the number of User_points
     * const count = await prisma.user_points.count({
     *   where: {
     *     // ... the filter for the User_points we want to count
     *   }
     * })
    **/
    count<T extends user_pointsCountArgs>(
      args?: Subset<T, user_pointsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_pointsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_pointsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_pointsAggregateArgs>(args: Subset<T, User_pointsAggregateArgs>): Prisma.PrismaPromise<GetUser_pointsAggregateType<T>>

    /**
     * Group by User_points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_pointsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_pointsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_pointsGroupByArgs['orderBy'] }
        : { orderBy?: user_pointsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_pointsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_pointsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_points model
   */
  readonly fields: user_pointsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_points.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_pointsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    points_redemption_items<T extends user_points$points_redemption_itemsArgs<ExtArgs> = {}>(args?: Subset<T, user_points$points_redemption_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_points model
   */
  interface user_pointsFieldRefs {
    readonly id: FieldRef<"user_points", 'Int'>
    readonly points: FieldRef<"user_points", 'Int'>
    readonly points_source_type: FieldRef<"user_points", 'String'>
    readonly points_source_id: FieldRef<"user_points", 'Int'>
    readonly earned_at: FieldRef<"user_points", 'DateTime'>
    readonly expires_at: FieldRef<"user_points", 'DateTime'>
    readonly points_remaining: FieldRef<"user_points", 'Int'>
    readonly user_id: FieldRef<"user_points", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_points findUnique
   */
  export type user_pointsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter, which user_points to fetch.
     */
    where: user_pointsWhereUniqueInput
  }

  /**
   * user_points findUniqueOrThrow
   */
  export type user_pointsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter, which user_points to fetch.
     */
    where: user_pointsWhereUniqueInput
  }

  /**
   * user_points findFirst
   */
  export type user_pointsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter, which user_points to fetch.
     */
    where?: user_pointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_points to fetch.
     */
    orderBy?: user_pointsOrderByWithRelationInput | user_pointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_points.
     */
    cursor?: user_pointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_points.
     */
    distinct?: User_pointsScalarFieldEnum | User_pointsScalarFieldEnum[]
  }

  /**
   * user_points findFirstOrThrow
   */
  export type user_pointsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter, which user_points to fetch.
     */
    where?: user_pointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_points to fetch.
     */
    orderBy?: user_pointsOrderByWithRelationInput | user_pointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_points.
     */
    cursor?: user_pointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_points.
     */
    distinct?: User_pointsScalarFieldEnum | User_pointsScalarFieldEnum[]
  }

  /**
   * user_points findMany
   */
  export type user_pointsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter, which user_points to fetch.
     */
    where?: user_pointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_points to fetch.
     */
    orderBy?: user_pointsOrderByWithRelationInput | user_pointsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_points.
     */
    cursor?: user_pointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_points.
     */
    skip?: number
    distinct?: User_pointsScalarFieldEnum | User_pointsScalarFieldEnum[]
  }

  /**
   * user_points create
   */
  export type user_pointsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * The data needed to create a user_points.
     */
    data: XOR<user_pointsCreateInput, user_pointsUncheckedCreateInput>
  }

  /**
   * user_points createMany
   */
  export type user_pointsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_points.
     */
    data: user_pointsCreateManyInput | user_pointsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_points createManyAndReturn
   */
  export type user_pointsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * The data used to create many user_points.
     */
    data: user_pointsCreateManyInput | user_pointsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_points update
   */
  export type user_pointsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * The data needed to update a user_points.
     */
    data: XOR<user_pointsUpdateInput, user_pointsUncheckedUpdateInput>
    /**
     * Choose, which user_points to update.
     */
    where: user_pointsWhereUniqueInput
  }

  /**
   * user_points updateMany
   */
  export type user_pointsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_points.
     */
    data: XOR<user_pointsUpdateManyMutationInput, user_pointsUncheckedUpdateManyInput>
    /**
     * Filter which user_points to update
     */
    where?: user_pointsWhereInput
    /**
     * Limit how many user_points to update.
     */
    limit?: number
  }

  /**
   * user_points updateManyAndReturn
   */
  export type user_pointsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * The data used to update user_points.
     */
    data: XOR<user_pointsUpdateManyMutationInput, user_pointsUncheckedUpdateManyInput>
    /**
     * Filter which user_points to update
     */
    where?: user_pointsWhereInput
    /**
     * Limit how many user_points to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_points upsert
   */
  export type user_pointsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * The filter to search for the user_points to update in case it exists.
     */
    where: user_pointsWhereUniqueInput
    /**
     * In case the user_points found by the `where` argument doesn't exist, create a new user_points with this data.
     */
    create: XOR<user_pointsCreateInput, user_pointsUncheckedCreateInput>
    /**
     * In case the user_points was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_pointsUpdateInput, user_pointsUncheckedUpdateInput>
  }

  /**
   * user_points delete
   */
  export type user_pointsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
    /**
     * Filter which user_points to delete.
     */
    where: user_pointsWhereUniqueInput
  }

  /**
   * user_points deleteMany
   */
  export type user_pointsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_points to delete
     */
    where?: user_pointsWhereInput
    /**
     * Limit how many user_points to delete.
     */
    limit?: number
  }

  /**
   * user_points.points_redemption_items
   */
  export type user_points$points_redemption_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    where?: points_redemption_itemsWhereInput
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    cursor?: points_redemption_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Points_redemption_itemsScalarFieldEnum | Points_redemption_itemsScalarFieldEnum[]
  }

  /**
   * user_points without action
   */
  export type user_pointsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_points
     */
    select?: user_pointsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_points
     */
    omit?: user_pointsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_pointsInclude<ExtArgs> | null
  }


  /**
   * Model points_redemption
   */

  export type AggregatePoints_redemption = {
    _count: Points_redemptionCountAggregateOutputType | null
    _avg: Points_redemptionAvgAggregateOutputType | null
    _sum: Points_redemptionSumAggregateOutputType | null
    _min: Points_redemptionMinAggregateOutputType | null
    _max: Points_redemptionMaxAggregateOutputType | null
  }

  export type Points_redemptionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_points: number | null
  }

  export type Points_redemptionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_points: number | null
  }

  export type Points_redemptionMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_points: number | null
    redeemed_at: Date | null
  }

  export type Points_redemptionMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_points: number | null
    redeemed_at: Date | null
  }

  export type Points_redemptionCountAggregateOutputType = {
    id: number
    user_id: number
    total_points: number
    redeemed_at: number
    _all: number
  }


  export type Points_redemptionAvgAggregateInputType = {
    id?: true
    user_id?: true
    total_points?: true
  }

  export type Points_redemptionSumAggregateInputType = {
    id?: true
    user_id?: true
    total_points?: true
  }

  export type Points_redemptionMinAggregateInputType = {
    id?: true
    user_id?: true
    total_points?: true
    redeemed_at?: true
  }

  export type Points_redemptionMaxAggregateInputType = {
    id?: true
    user_id?: true
    total_points?: true
    redeemed_at?: true
  }

  export type Points_redemptionCountAggregateInputType = {
    id?: true
    user_id?: true
    total_points?: true
    redeemed_at?: true
    _all?: true
  }

  export type Points_redemptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which points_redemption to aggregate.
     */
    where?: points_redemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemptions to fetch.
     */
    orderBy?: points_redemptionOrderByWithRelationInput | points_redemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: points_redemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned points_redemptions
    **/
    _count?: true | Points_redemptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Points_redemptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Points_redemptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Points_redemptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Points_redemptionMaxAggregateInputType
  }

  export type GetPoints_redemptionAggregateType<T extends Points_redemptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePoints_redemption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePoints_redemption[P]>
      : GetScalarType<T[P], AggregatePoints_redemption[P]>
  }




  export type points_redemptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: points_redemptionWhereInput
    orderBy?: points_redemptionOrderByWithAggregationInput | points_redemptionOrderByWithAggregationInput[]
    by: Points_redemptionScalarFieldEnum[] | Points_redemptionScalarFieldEnum
    having?: points_redemptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Points_redemptionCountAggregateInputType | true
    _avg?: Points_redemptionAvgAggregateInputType
    _sum?: Points_redemptionSumAggregateInputType
    _min?: Points_redemptionMinAggregateInputType
    _max?: Points_redemptionMaxAggregateInputType
  }

  export type Points_redemptionGroupByOutputType = {
    id: number
    user_id: number
    total_points: number
    redeemed_at: Date
    _count: Points_redemptionCountAggregateOutputType | null
    _avg: Points_redemptionAvgAggregateOutputType | null
    _sum: Points_redemptionSumAggregateOutputType | null
    _min: Points_redemptionMinAggregateOutputType | null
    _max: Points_redemptionMaxAggregateOutputType | null
  }

  type GetPoints_redemptionGroupByPayload<T extends points_redemptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Points_redemptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Points_redemptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Points_redemptionGroupByOutputType[P]>
            : GetScalarType<T[P], Points_redemptionGroupByOutputType[P]>
        }
      >
    >


  export type points_redemptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_points?: boolean
    redeemed_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    points_redemption_items?: boolean | points_redemption$points_redemption_itemsArgs<ExtArgs>
    _count?: boolean | Points_redemptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption"]>

  export type points_redemptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_points?: boolean
    redeemed_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption"]>

  export type points_redemptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    total_points?: boolean
    redeemed_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption"]>

  export type points_redemptionSelectScalar = {
    id?: boolean
    user_id?: boolean
    total_points?: boolean
    redeemed_at?: boolean
  }

  export type points_redemptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "total_points" | "redeemed_at", ExtArgs["result"]["points_redemption"]>
  export type points_redemptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    points_redemption_items?: boolean | points_redemption$points_redemption_itemsArgs<ExtArgs>
    _count?: boolean | Points_redemptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type points_redemptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type points_redemptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }

  export type $points_redemptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "points_redemption"
    objects: {
      user: Prisma.$user_accountPayload<ExtArgs>
      points_redemption_items: Prisma.$points_redemption_itemsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      total_points: number
      redeemed_at: Date
    }, ExtArgs["result"]["points_redemption"]>
    composites: {}
  }

  type points_redemptionGetPayload<S extends boolean | null | undefined | points_redemptionDefaultArgs> = $Result.GetResult<Prisma.$points_redemptionPayload, S>

  type points_redemptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<points_redemptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Points_redemptionCountAggregateInputType | true
    }

  export interface points_redemptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['points_redemption'], meta: { name: 'points_redemption' } }
    /**
     * Find zero or one Points_redemption that matches the filter.
     * @param {points_redemptionFindUniqueArgs} args - Arguments to find a Points_redemption
     * @example
     * // Get one Points_redemption
     * const points_redemption = await prisma.points_redemption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends points_redemptionFindUniqueArgs>(args: SelectSubset<T, points_redemptionFindUniqueArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Points_redemption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {points_redemptionFindUniqueOrThrowArgs} args - Arguments to find a Points_redemption
     * @example
     * // Get one Points_redemption
     * const points_redemption = await prisma.points_redemption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends points_redemptionFindUniqueOrThrowArgs>(args: SelectSubset<T, points_redemptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Points_redemption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionFindFirstArgs} args - Arguments to find a Points_redemption
     * @example
     * // Get one Points_redemption
     * const points_redemption = await prisma.points_redemption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends points_redemptionFindFirstArgs>(args?: SelectSubset<T, points_redemptionFindFirstArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Points_redemption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionFindFirstOrThrowArgs} args - Arguments to find a Points_redemption
     * @example
     * // Get one Points_redemption
     * const points_redemption = await prisma.points_redemption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends points_redemptionFindFirstOrThrowArgs>(args?: SelectSubset<T, points_redemptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Points_redemptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Points_redemptions
     * const points_redemptions = await prisma.points_redemption.findMany()
     * 
     * // Get first 10 Points_redemptions
     * const points_redemptions = await prisma.points_redemption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const points_redemptionWithIdOnly = await prisma.points_redemption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends points_redemptionFindManyArgs>(args?: SelectSubset<T, points_redemptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Points_redemption.
     * @param {points_redemptionCreateArgs} args - Arguments to create a Points_redemption.
     * @example
     * // Create one Points_redemption
     * const Points_redemption = await prisma.points_redemption.create({
     *   data: {
     *     // ... data to create a Points_redemption
     *   }
     * })
     * 
     */
    create<T extends points_redemptionCreateArgs>(args: SelectSubset<T, points_redemptionCreateArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Points_redemptions.
     * @param {points_redemptionCreateManyArgs} args - Arguments to create many Points_redemptions.
     * @example
     * // Create many Points_redemptions
     * const points_redemption = await prisma.points_redemption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends points_redemptionCreateManyArgs>(args?: SelectSubset<T, points_redemptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Points_redemptions and returns the data saved in the database.
     * @param {points_redemptionCreateManyAndReturnArgs} args - Arguments to create many Points_redemptions.
     * @example
     * // Create many Points_redemptions
     * const points_redemption = await prisma.points_redemption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Points_redemptions and only return the `id`
     * const points_redemptionWithIdOnly = await prisma.points_redemption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends points_redemptionCreateManyAndReturnArgs>(args?: SelectSubset<T, points_redemptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Points_redemption.
     * @param {points_redemptionDeleteArgs} args - Arguments to delete one Points_redemption.
     * @example
     * // Delete one Points_redemption
     * const Points_redemption = await prisma.points_redemption.delete({
     *   where: {
     *     // ... filter to delete one Points_redemption
     *   }
     * })
     * 
     */
    delete<T extends points_redemptionDeleteArgs>(args: SelectSubset<T, points_redemptionDeleteArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Points_redemption.
     * @param {points_redemptionUpdateArgs} args - Arguments to update one Points_redemption.
     * @example
     * // Update one Points_redemption
     * const points_redemption = await prisma.points_redemption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends points_redemptionUpdateArgs>(args: SelectSubset<T, points_redemptionUpdateArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Points_redemptions.
     * @param {points_redemptionDeleteManyArgs} args - Arguments to filter Points_redemptions to delete.
     * @example
     * // Delete a few Points_redemptions
     * const { count } = await prisma.points_redemption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends points_redemptionDeleteManyArgs>(args?: SelectSubset<T, points_redemptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Points_redemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Points_redemptions
     * const points_redemption = await prisma.points_redemption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends points_redemptionUpdateManyArgs>(args: SelectSubset<T, points_redemptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Points_redemptions and returns the data updated in the database.
     * @param {points_redemptionUpdateManyAndReturnArgs} args - Arguments to update many Points_redemptions.
     * @example
     * // Update many Points_redemptions
     * const points_redemption = await prisma.points_redemption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Points_redemptions and only return the `id`
     * const points_redemptionWithIdOnly = await prisma.points_redemption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends points_redemptionUpdateManyAndReturnArgs>(args: SelectSubset<T, points_redemptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Points_redemption.
     * @param {points_redemptionUpsertArgs} args - Arguments to update or create a Points_redemption.
     * @example
     * // Update or create a Points_redemption
     * const points_redemption = await prisma.points_redemption.upsert({
     *   create: {
     *     // ... data to create a Points_redemption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Points_redemption we want to update
     *   }
     * })
     */
    upsert<T extends points_redemptionUpsertArgs>(args: SelectSubset<T, points_redemptionUpsertArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Points_redemptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionCountArgs} args - Arguments to filter Points_redemptions to count.
     * @example
     * // Count the number of Points_redemptions
     * const count = await prisma.points_redemption.count({
     *   where: {
     *     // ... the filter for the Points_redemptions we want to count
     *   }
     * })
    **/
    count<T extends points_redemptionCountArgs>(
      args?: Subset<T, points_redemptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Points_redemptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Points_redemption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Points_redemptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Points_redemptionAggregateArgs>(args: Subset<T, Points_redemptionAggregateArgs>): Prisma.PrismaPromise<GetPoints_redemptionAggregateType<T>>

    /**
     * Group by Points_redemption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends points_redemptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: points_redemptionGroupByArgs['orderBy'] }
        : { orderBy?: points_redemptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, points_redemptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPoints_redemptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the points_redemption model
   */
  readonly fields: points_redemptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for points_redemption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__points_redemptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    points_redemption_items<T extends points_redemption$points_redemption_itemsArgs<ExtArgs> = {}>(args?: Subset<T, points_redemption$points_redemption_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the points_redemption model
   */
  interface points_redemptionFieldRefs {
    readonly id: FieldRef<"points_redemption", 'Int'>
    readonly user_id: FieldRef<"points_redemption", 'Int'>
    readonly total_points: FieldRef<"points_redemption", 'Int'>
    readonly redeemed_at: FieldRef<"points_redemption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * points_redemption findUnique
   */
  export type points_redemptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption to fetch.
     */
    where: points_redemptionWhereUniqueInput
  }

  /**
   * points_redemption findUniqueOrThrow
   */
  export type points_redemptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption to fetch.
     */
    where: points_redemptionWhereUniqueInput
  }

  /**
   * points_redemption findFirst
   */
  export type points_redemptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption to fetch.
     */
    where?: points_redemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemptions to fetch.
     */
    orderBy?: points_redemptionOrderByWithRelationInput | points_redemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for points_redemptions.
     */
    cursor?: points_redemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of points_redemptions.
     */
    distinct?: Points_redemptionScalarFieldEnum | Points_redemptionScalarFieldEnum[]
  }

  /**
   * points_redemption findFirstOrThrow
   */
  export type points_redemptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption to fetch.
     */
    where?: points_redemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemptions to fetch.
     */
    orderBy?: points_redemptionOrderByWithRelationInput | points_redemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for points_redemptions.
     */
    cursor?: points_redemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of points_redemptions.
     */
    distinct?: Points_redemptionScalarFieldEnum | Points_redemptionScalarFieldEnum[]
  }

  /**
   * points_redemption findMany
   */
  export type points_redemptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter, which points_redemptions to fetch.
     */
    where?: points_redemptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemptions to fetch.
     */
    orderBy?: points_redemptionOrderByWithRelationInput | points_redemptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing points_redemptions.
     */
    cursor?: points_redemptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemptions.
     */
    skip?: number
    distinct?: Points_redemptionScalarFieldEnum | Points_redemptionScalarFieldEnum[]
  }

  /**
   * points_redemption create
   */
  export type points_redemptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * The data needed to create a points_redemption.
     */
    data: XOR<points_redemptionCreateInput, points_redemptionUncheckedCreateInput>
  }

  /**
   * points_redemption createMany
   */
  export type points_redemptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many points_redemptions.
     */
    data: points_redemptionCreateManyInput | points_redemptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * points_redemption createManyAndReturn
   */
  export type points_redemptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * The data used to create many points_redemptions.
     */
    data: points_redemptionCreateManyInput | points_redemptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * points_redemption update
   */
  export type points_redemptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * The data needed to update a points_redemption.
     */
    data: XOR<points_redemptionUpdateInput, points_redemptionUncheckedUpdateInput>
    /**
     * Choose, which points_redemption to update.
     */
    where: points_redemptionWhereUniqueInput
  }

  /**
   * points_redemption updateMany
   */
  export type points_redemptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update points_redemptions.
     */
    data: XOR<points_redemptionUpdateManyMutationInput, points_redemptionUncheckedUpdateManyInput>
    /**
     * Filter which points_redemptions to update
     */
    where?: points_redemptionWhereInput
    /**
     * Limit how many points_redemptions to update.
     */
    limit?: number
  }

  /**
   * points_redemption updateManyAndReturn
   */
  export type points_redemptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * The data used to update points_redemptions.
     */
    data: XOR<points_redemptionUpdateManyMutationInput, points_redemptionUncheckedUpdateManyInput>
    /**
     * Filter which points_redemptions to update
     */
    where?: points_redemptionWhereInput
    /**
     * Limit how many points_redemptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * points_redemption upsert
   */
  export type points_redemptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * The filter to search for the points_redemption to update in case it exists.
     */
    where: points_redemptionWhereUniqueInput
    /**
     * In case the points_redemption found by the `where` argument doesn't exist, create a new points_redemption with this data.
     */
    create: XOR<points_redemptionCreateInput, points_redemptionUncheckedCreateInput>
    /**
     * In case the points_redemption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<points_redemptionUpdateInput, points_redemptionUncheckedUpdateInput>
  }

  /**
   * points_redemption delete
   */
  export type points_redemptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
    /**
     * Filter which points_redemption to delete.
     */
    where: points_redemptionWhereUniqueInput
  }

  /**
   * points_redemption deleteMany
   */
  export type points_redemptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which points_redemptions to delete
     */
    where?: points_redemptionWhereInput
    /**
     * Limit how many points_redemptions to delete.
     */
    limit?: number
  }

  /**
   * points_redemption.points_redemption_items
   */
  export type points_redemption$points_redemption_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    where?: points_redemption_itemsWhereInput
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    cursor?: points_redemption_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Points_redemption_itemsScalarFieldEnum | Points_redemption_itemsScalarFieldEnum[]
  }

  /**
   * points_redemption without action
   */
  export type points_redemptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption
     */
    select?: points_redemptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption
     */
    omit?: points_redemptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemptionInclude<ExtArgs> | null
  }


  /**
   * Model points_redemption_items
   */

  export type AggregatePoints_redemption_items = {
    _count: Points_redemption_itemsCountAggregateOutputType | null
    _avg: Points_redemption_itemsAvgAggregateOutputType | null
    _sum: Points_redemption_itemsSumAggregateOutputType | null
    _min: Points_redemption_itemsMinAggregateOutputType | null
    _max: Points_redemption_itemsMaxAggregateOutputType | null
  }

  export type Points_redemption_itemsAvgAggregateOutputType = {
    id: number | null
    user_point_id: number | null
    redemption_id: number | null
  }

  export type Points_redemption_itemsSumAggregateOutputType = {
    id: number | null
    user_point_id: number | null
    redemption_id: number | null
  }

  export type Points_redemption_itemsMinAggregateOutputType = {
    id: number | null
    user_point_id: number | null
    redemption_id: number | null
  }

  export type Points_redemption_itemsMaxAggregateOutputType = {
    id: number | null
    user_point_id: number | null
    redemption_id: number | null
  }

  export type Points_redemption_itemsCountAggregateOutputType = {
    id: number
    user_point_id: number
    redemption_id: number
    _all: number
  }


  export type Points_redemption_itemsAvgAggregateInputType = {
    id?: true
    user_point_id?: true
    redemption_id?: true
  }

  export type Points_redemption_itemsSumAggregateInputType = {
    id?: true
    user_point_id?: true
    redemption_id?: true
  }

  export type Points_redemption_itemsMinAggregateInputType = {
    id?: true
    user_point_id?: true
    redemption_id?: true
  }

  export type Points_redemption_itemsMaxAggregateInputType = {
    id?: true
    user_point_id?: true
    redemption_id?: true
  }

  export type Points_redemption_itemsCountAggregateInputType = {
    id?: true
    user_point_id?: true
    redemption_id?: true
    _all?: true
  }

  export type Points_redemption_itemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which points_redemption_items to aggregate.
     */
    where?: points_redemption_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemption_items to fetch.
     */
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: points_redemption_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemption_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemption_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned points_redemption_items
    **/
    _count?: true | Points_redemption_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Points_redemption_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Points_redemption_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Points_redemption_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Points_redemption_itemsMaxAggregateInputType
  }

  export type GetPoints_redemption_itemsAggregateType<T extends Points_redemption_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregatePoints_redemption_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePoints_redemption_items[P]>
      : GetScalarType<T[P], AggregatePoints_redemption_items[P]>
  }




  export type points_redemption_itemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: points_redemption_itemsWhereInput
    orderBy?: points_redemption_itemsOrderByWithAggregationInput | points_redemption_itemsOrderByWithAggregationInput[]
    by: Points_redemption_itemsScalarFieldEnum[] | Points_redemption_itemsScalarFieldEnum
    having?: points_redemption_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Points_redemption_itemsCountAggregateInputType | true
    _avg?: Points_redemption_itemsAvgAggregateInputType
    _sum?: Points_redemption_itemsSumAggregateInputType
    _min?: Points_redemption_itemsMinAggregateInputType
    _max?: Points_redemption_itemsMaxAggregateInputType
  }

  export type Points_redemption_itemsGroupByOutputType = {
    id: number
    user_point_id: number
    redemption_id: number
    _count: Points_redemption_itemsCountAggregateOutputType | null
    _avg: Points_redemption_itemsAvgAggregateOutputType | null
    _sum: Points_redemption_itemsSumAggregateOutputType | null
    _min: Points_redemption_itemsMinAggregateOutputType | null
    _max: Points_redemption_itemsMaxAggregateOutputType | null
  }

  type GetPoints_redemption_itemsGroupByPayload<T extends points_redemption_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Points_redemption_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Points_redemption_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Points_redemption_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Points_redemption_itemsGroupByOutputType[P]>
        }
      >
    >


  export type points_redemption_itemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_point_id?: boolean
    redemption_id?: boolean
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption_items"]>

  export type points_redemption_itemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_point_id?: boolean
    redemption_id?: boolean
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption_items"]>

  export type points_redemption_itemsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_point_id?: boolean
    redemption_id?: boolean
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["points_redemption_items"]>

  export type points_redemption_itemsSelectScalar = {
    id?: boolean
    user_point_id?: boolean
    redemption_id?: boolean
  }

  export type points_redemption_itemsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_point_id" | "redemption_id", ExtArgs["result"]["points_redemption_items"]>
  export type points_redemption_itemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }
  export type points_redemption_itemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }
  export type points_redemption_itemsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_points?: boolean | user_pointsDefaultArgs<ExtArgs>
    points_redemption?: boolean | points_redemptionDefaultArgs<ExtArgs>
  }

  export type $points_redemption_itemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "points_redemption_items"
    objects: {
      user_points: Prisma.$user_pointsPayload<ExtArgs>
      points_redemption: Prisma.$points_redemptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_point_id: number
      redemption_id: number
    }, ExtArgs["result"]["points_redemption_items"]>
    composites: {}
  }

  type points_redemption_itemsGetPayload<S extends boolean | null | undefined | points_redemption_itemsDefaultArgs> = $Result.GetResult<Prisma.$points_redemption_itemsPayload, S>

  type points_redemption_itemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<points_redemption_itemsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Points_redemption_itemsCountAggregateInputType | true
    }

  export interface points_redemption_itemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['points_redemption_items'], meta: { name: 'points_redemption_items' } }
    /**
     * Find zero or one Points_redemption_items that matches the filter.
     * @param {points_redemption_itemsFindUniqueArgs} args - Arguments to find a Points_redemption_items
     * @example
     * // Get one Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends points_redemption_itemsFindUniqueArgs>(args: SelectSubset<T, points_redemption_itemsFindUniqueArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Points_redemption_items that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {points_redemption_itemsFindUniqueOrThrowArgs} args - Arguments to find a Points_redemption_items
     * @example
     * // Get one Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends points_redemption_itemsFindUniqueOrThrowArgs>(args: SelectSubset<T, points_redemption_itemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Points_redemption_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsFindFirstArgs} args - Arguments to find a Points_redemption_items
     * @example
     * // Get one Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends points_redemption_itemsFindFirstArgs>(args?: SelectSubset<T, points_redemption_itemsFindFirstArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Points_redemption_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsFindFirstOrThrowArgs} args - Arguments to find a Points_redemption_items
     * @example
     * // Get one Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends points_redemption_itemsFindFirstOrThrowArgs>(args?: SelectSubset<T, points_redemption_itemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Points_redemption_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findMany()
     * 
     * // Get first 10 Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const points_redemption_itemsWithIdOnly = await prisma.points_redemption_items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends points_redemption_itemsFindManyArgs>(args?: SelectSubset<T, points_redemption_itemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Points_redemption_items.
     * @param {points_redemption_itemsCreateArgs} args - Arguments to create a Points_redemption_items.
     * @example
     * // Create one Points_redemption_items
     * const Points_redemption_items = await prisma.points_redemption_items.create({
     *   data: {
     *     // ... data to create a Points_redemption_items
     *   }
     * })
     * 
     */
    create<T extends points_redemption_itemsCreateArgs>(args: SelectSubset<T, points_redemption_itemsCreateArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Points_redemption_items.
     * @param {points_redemption_itemsCreateManyArgs} args - Arguments to create many Points_redemption_items.
     * @example
     * // Create many Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends points_redemption_itemsCreateManyArgs>(args?: SelectSubset<T, points_redemption_itemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Points_redemption_items and returns the data saved in the database.
     * @param {points_redemption_itemsCreateManyAndReturnArgs} args - Arguments to create many Points_redemption_items.
     * @example
     * // Create many Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Points_redemption_items and only return the `id`
     * const points_redemption_itemsWithIdOnly = await prisma.points_redemption_items.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends points_redemption_itemsCreateManyAndReturnArgs>(args?: SelectSubset<T, points_redemption_itemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Points_redemption_items.
     * @param {points_redemption_itemsDeleteArgs} args - Arguments to delete one Points_redemption_items.
     * @example
     * // Delete one Points_redemption_items
     * const Points_redemption_items = await prisma.points_redemption_items.delete({
     *   where: {
     *     // ... filter to delete one Points_redemption_items
     *   }
     * })
     * 
     */
    delete<T extends points_redemption_itemsDeleteArgs>(args: SelectSubset<T, points_redemption_itemsDeleteArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Points_redemption_items.
     * @param {points_redemption_itemsUpdateArgs} args - Arguments to update one Points_redemption_items.
     * @example
     * // Update one Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends points_redemption_itemsUpdateArgs>(args: SelectSubset<T, points_redemption_itemsUpdateArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Points_redemption_items.
     * @param {points_redemption_itemsDeleteManyArgs} args - Arguments to filter Points_redemption_items to delete.
     * @example
     * // Delete a few Points_redemption_items
     * const { count } = await prisma.points_redemption_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends points_redemption_itemsDeleteManyArgs>(args?: SelectSubset<T, points_redemption_itemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Points_redemption_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends points_redemption_itemsUpdateManyArgs>(args: SelectSubset<T, points_redemption_itemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Points_redemption_items and returns the data updated in the database.
     * @param {points_redemption_itemsUpdateManyAndReturnArgs} args - Arguments to update many Points_redemption_items.
     * @example
     * // Update many Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Points_redemption_items and only return the `id`
     * const points_redemption_itemsWithIdOnly = await prisma.points_redemption_items.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends points_redemption_itemsUpdateManyAndReturnArgs>(args: SelectSubset<T, points_redemption_itemsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Points_redemption_items.
     * @param {points_redemption_itemsUpsertArgs} args - Arguments to update or create a Points_redemption_items.
     * @example
     * // Update or create a Points_redemption_items
     * const points_redemption_items = await prisma.points_redemption_items.upsert({
     *   create: {
     *     // ... data to create a Points_redemption_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Points_redemption_items we want to update
     *   }
     * })
     */
    upsert<T extends points_redemption_itemsUpsertArgs>(args: SelectSubset<T, points_redemption_itemsUpsertArgs<ExtArgs>>): Prisma__points_redemption_itemsClient<$Result.GetResult<Prisma.$points_redemption_itemsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Points_redemption_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsCountArgs} args - Arguments to filter Points_redemption_items to count.
     * @example
     * // Count the number of Points_redemption_items
     * const count = await prisma.points_redemption_items.count({
     *   where: {
     *     // ... the filter for the Points_redemption_items we want to count
     *   }
     * })
    **/
    count<T extends points_redemption_itemsCountArgs>(
      args?: Subset<T, points_redemption_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Points_redemption_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Points_redemption_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Points_redemption_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Points_redemption_itemsAggregateArgs>(args: Subset<T, Points_redemption_itemsAggregateArgs>): Prisma.PrismaPromise<GetPoints_redemption_itemsAggregateType<T>>

    /**
     * Group by Points_redemption_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {points_redemption_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends points_redemption_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: points_redemption_itemsGroupByArgs['orderBy'] }
        : { orderBy?: points_redemption_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, points_redemption_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPoints_redemption_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the points_redemption_items model
   */
  readonly fields: points_redemption_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for points_redemption_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__points_redemption_itemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_points<T extends user_pointsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_pointsDefaultArgs<ExtArgs>>): Prisma__user_pointsClient<$Result.GetResult<Prisma.$user_pointsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    points_redemption<T extends points_redemptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, points_redemptionDefaultArgs<ExtArgs>>): Prisma__points_redemptionClient<$Result.GetResult<Prisma.$points_redemptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the points_redemption_items model
   */
  interface points_redemption_itemsFieldRefs {
    readonly id: FieldRef<"points_redemption_items", 'Int'>
    readonly user_point_id: FieldRef<"points_redemption_items", 'Int'>
    readonly redemption_id: FieldRef<"points_redemption_items", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * points_redemption_items findUnique
   */
  export type points_redemption_itemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption_items to fetch.
     */
    where: points_redemption_itemsWhereUniqueInput
  }

  /**
   * points_redemption_items findUniqueOrThrow
   */
  export type points_redemption_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption_items to fetch.
     */
    where: points_redemption_itemsWhereUniqueInput
  }

  /**
   * points_redemption_items findFirst
   */
  export type points_redemption_itemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption_items to fetch.
     */
    where?: points_redemption_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemption_items to fetch.
     */
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for points_redemption_items.
     */
    cursor?: points_redemption_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemption_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemption_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of points_redemption_items.
     */
    distinct?: Points_redemption_itemsScalarFieldEnum | Points_redemption_itemsScalarFieldEnum[]
  }

  /**
   * points_redemption_items findFirstOrThrow
   */
  export type points_redemption_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption_items to fetch.
     */
    where?: points_redemption_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemption_items to fetch.
     */
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for points_redemption_items.
     */
    cursor?: points_redemption_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemption_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemption_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of points_redemption_items.
     */
    distinct?: Points_redemption_itemsScalarFieldEnum | Points_redemption_itemsScalarFieldEnum[]
  }

  /**
   * points_redemption_items findMany
   */
  export type points_redemption_itemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter, which points_redemption_items to fetch.
     */
    where?: points_redemption_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of points_redemption_items to fetch.
     */
    orderBy?: points_redemption_itemsOrderByWithRelationInput | points_redemption_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing points_redemption_items.
     */
    cursor?: points_redemption_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` points_redemption_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` points_redemption_items.
     */
    skip?: number
    distinct?: Points_redemption_itemsScalarFieldEnum | Points_redemption_itemsScalarFieldEnum[]
  }

  /**
   * points_redemption_items create
   */
  export type points_redemption_itemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a points_redemption_items.
     */
    data: XOR<points_redemption_itemsCreateInput, points_redemption_itemsUncheckedCreateInput>
  }

  /**
   * points_redemption_items createMany
   */
  export type points_redemption_itemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many points_redemption_items.
     */
    data: points_redemption_itemsCreateManyInput | points_redemption_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * points_redemption_items createManyAndReturn
   */
  export type points_redemption_itemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * The data used to create many points_redemption_items.
     */
    data: points_redemption_itemsCreateManyInput | points_redemption_itemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * points_redemption_items update
   */
  export type points_redemption_itemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a points_redemption_items.
     */
    data: XOR<points_redemption_itemsUpdateInput, points_redemption_itemsUncheckedUpdateInput>
    /**
     * Choose, which points_redemption_items to update.
     */
    where: points_redemption_itemsWhereUniqueInput
  }

  /**
   * points_redemption_items updateMany
   */
  export type points_redemption_itemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update points_redemption_items.
     */
    data: XOR<points_redemption_itemsUpdateManyMutationInput, points_redemption_itemsUncheckedUpdateManyInput>
    /**
     * Filter which points_redemption_items to update
     */
    where?: points_redemption_itemsWhereInput
    /**
     * Limit how many points_redemption_items to update.
     */
    limit?: number
  }

  /**
   * points_redemption_items updateManyAndReturn
   */
  export type points_redemption_itemsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * The data used to update points_redemption_items.
     */
    data: XOR<points_redemption_itemsUpdateManyMutationInput, points_redemption_itemsUncheckedUpdateManyInput>
    /**
     * Filter which points_redemption_items to update
     */
    where?: points_redemption_itemsWhereInput
    /**
     * Limit how many points_redemption_items to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * points_redemption_items upsert
   */
  export type points_redemption_itemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the points_redemption_items to update in case it exists.
     */
    where: points_redemption_itemsWhereUniqueInput
    /**
     * In case the points_redemption_items found by the `where` argument doesn't exist, create a new points_redemption_items with this data.
     */
    create: XOR<points_redemption_itemsCreateInput, points_redemption_itemsUncheckedCreateInput>
    /**
     * In case the points_redemption_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<points_redemption_itemsUpdateInput, points_redemption_itemsUncheckedUpdateInput>
  }

  /**
   * points_redemption_items delete
   */
  export type points_redemption_itemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
    /**
     * Filter which points_redemption_items to delete.
     */
    where: points_redemption_itemsWhereUniqueInput
  }

  /**
   * points_redemption_items deleteMany
   */
  export type points_redemption_itemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which points_redemption_items to delete
     */
    where?: points_redemption_itemsWhereInput
    /**
     * Limit how many points_redemption_items to delete.
     */
    limit?: number
  }

  /**
   * points_redemption_items without action
   */
  export type points_redemption_itemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the points_redemption_items
     */
    select?: points_redemption_itemsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the points_redemption_items
     */
    omit?: points_redemption_itemsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: points_redemption_itemsInclude<ExtArgs> | null
  }


  /**
   * Model coupon_table
   */

  export type AggregateCoupon_table = {
    _count: Coupon_tableCountAggregateOutputType | null
    _avg: Coupon_tableAvgAggregateOutputType | null
    _sum: Coupon_tableSumAggregateOutputType | null
    _min: Coupon_tableMinAggregateOutputType | null
    _max: Coupon_tableMaxAggregateOutputType | null
  }

  export type Coupon_tableAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
    discount_value: number | null
    usage_limit: number | null
    used_count: number | null
  }

  export type Coupon_tableSumAggregateOutputType = {
    id: number | null
    event_id: number | null
    discount_value: number | null
    usage_limit: number | null
    used_count: number | null
  }

  export type Coupon_tableMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    code: string | null
    discount_type: $Enums.discount_type | null
    discount_value: number | null
    created_at: Date | null
    expires_at: Date | null
    used_at: Date | null
    usage_limit: number | null
    used_count: number | null
    status: $Enums.coupon_status | null
    issued_by: $Enums.issuer | null
  }

  export type Coupon_tableMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    code: string | null
    discount_type: $Enums.discount_type | null
    discount_value: number | null
    created_at: Date | null
    expires_at: Date | null
    used_at: Date | null
    usage_limit: number | null
    used_count: number | null
    status: $Enums.coupon_status | null
    issued_by: $Enums.issuer | null
  }

  export type Coupon_tableCountAggregateOutputType = {
    id: number
    event_id: number
    code: number
    discount_type: number
    discount_value: number
    created_at: number
    expires_at: number
    used_at: number
    usage_limit: number
    used_count: number
    status: number
    issued_by: number
    _all: number
  }


  export type Coupon_tableAvgAggregateInputType = {
    id?: true
    event_id?: true
    discount_value?: true
    usage_limit?: true
    used_count?: true
  }

  export type Coupon_tableSumAggregateInputType = {
    id?: true
    event_id?: true
    discount_value?: true
    usage_limit?: true
    used_count?: true
  }

  export type Coupon_tableMinAggregateInputType = {
    id?: true
    event_id?: true
    code?: true
    discount_type?: true
    discount_value?: true
    created_at?: true
    expires_at?: true
    used_at?: true
    usage_limit?: true
    used_count?: true
    status?: true
    issued_by?: true
  }

  export type Coupon_tableMaxAggregateInputType = {
    id?: true
    event_id?: true
    code?: true
    discount_type?: true
    discount_value?: true
    created_at?: true
    expires_at?: true
    used_at?: true
    usage_limit?: true
    used_count?: true
    status?: true
    issued_by?: true
  }

  export type Coupon_tableCountAggregateInputType = {
    id?: true
    event_id?: true
    code?: true
    discount_type?: true
    discount_value?: true
    created_at?: true
    expires_at?: true
    used_at?: true
    usage_limit?: true
    used_count?: true
    status?: true
    issued_by?: true
    _all?: true
  }

  export type Coupon_tableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coupon_table to aggregate.
     */
    where?: coupon_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupon_tables to fetch.
     */
    orderBy?: coupon_tableOrderByWithRelationInput | coupon_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coupon_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupon_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupon_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned coupon_tables
    **/
    _count?: true | Coupon_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Coupon_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Coupon_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Coupon_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Coupon_tableMaxAggregateInputType
  }

  export type GetCoupon_tableAggregateType<T extends Coupon_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateCoupon_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoupon_table[P]>
      : GetScalarType<T[P], AggregateCoupon_table[P]>
  }




  export type coupon_tableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coupon_tableWhereInput
    orderBy?: coupon_tableOrderByWithAggregationInput | coupon_tableOrderByWithAggregationInput[]
    by: Coupon_tableScalarFieldEnum[] | Coupon_tableScalarFieldEnum
    having?: coupon_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Coupon_tableCountAggregateInputType | true
    _avg?: Coupon_tableAvgAggregateInputType
    _sum?: Coupon_tableSumAggregateInputType
    _min?: Coupon_tableMinAggregateInputType
    _max?: Coupon_tableMaxAggregateInputType
  }

  export type Coupon_tableGroupByOutputType = {
    id: number
    event_id: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at: Date
    expires_at: Date
    used_at: Date | null
    usage_limit: number
    used_count: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
    _count: Coupon_tableCountAggregateOutputType | null
    _avg: Coupon_tableAvgAggregateOutputType | null
    _sum: Coupon_tableSumAggregateOutputType | null
    _min: Coupon_tableMinAggregateOutputType | null
    _max: Coupon_tableMaxAggregateOutputType | null
  }

  type GetCoupon_tableGroupByPayload<T extends coupon_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Coupon_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Coupon_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Coupon_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Coupon_tableGroupByOutputType[P]>
        }
      >
    >


  export type coupon_tableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    code?: boolean
    discount_type?: boolean
    discount_value?: boolean
    created_at?: boolean
    expires_at?: boolean
    used_at?: boolean
    usage_limit?: boolean
    used_count?: boolean
    status?: boolean
    issued_by?: boolean
    user_coupon?: boolean | coupon_table$user_couponArgs<ExtArgs>
    _count?: boolean | Coupon_tableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coupon_table"]>

  export type coupon_tableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    code?: boolean
    discount_type?: boolean
    discount_value?: boolean
    created_at?: boolean
    expires_at?: boolean
    used_at?: boolean
    usage_limit?: boolean
    used_count?: boolean
    status?: boolean
    issued_by?: boolean
  }, ExtArgs["result"]["coupon_table"]>

  export type coupon_tableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    code?: boolean
    discount_type?: boolean
    discount_value?: boolean
    created_at?: boolean
    expires_at?: boolean
    used_at?: boolean
    usage_limit?: boolean
    used_count?: boolean
    status?: boolean
    issued_by?: boolean
  }, ExtArgs["result"]["coupon_table"]>

  export type coupon_tableSelectScalar = {
    id?: boolean
    event_id?: boolean
    code?: boolean
    discount_type?: boolean
    discount_value?: boolean
    created_at?: boolean
    expires_at?: boolean
    used_at?: boolean
    usage_limit?: boolean
    used_count?: boolean
    status?: boolean
    issued_by?: boolean
  }

  export type coupon_tableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "code" | "discount_type" | "discount_value" | "created_at" | "expires_at" | "used_at" | "usage_limit" | "used_count" | "status" | "issued_by", ExtArgs["result"]["coupon_table"]>
  export type coupon_tableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_coupon?: boolean | coupon_table$user_couponArgs<ExtArgs>
    _count?: boolean | Coupon_tableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type coupon_tableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type coupon_tableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $coupon_tablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "coupon_table"
    objects: {
      user_coupon: Prisma.$user_couponPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number | null
      code: string
      discount_type: $Enums.discount_type
      discount_value: number
      created_at: Date
      expires_at: Date
      used_at: Date | null
      usage_limit: number
      used_count: number
      status: $Enums.coupon_status
      issued_by: $Enums.issuer
    }, ExtArgs["result"]["coupon_table"]>
    composites: {}
  }

  type coupon_tableGetPayload<S extends boolean | null | undefined | coupon_tableDefaultArgs> = $Result.GetResult<Prisma.$coupon_tablePayload, S>

  type coupon_tableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<coupon_tableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Coupon_tableCountAggregateInputType | true
    }

  export interface coupon_tableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coupon_table'], meta: { name: 'coupon_table' } }
    /**
     * Find zero or one Coupon_table that matches the filter.
     * @param {coupon_tableFindUniqueArgs} args - Arguments to find a Coupon_table
     * @example
     * // Get one Coupon_table
     * const coupon_table = await prisma.coupon_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coupon_tableFindUniqueArgs>(args: SelectSubset<T, coupon_tableFindUniqueArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Coupon_table that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {coupon_tableFindUniqueOrThrowArgs} args - Arguments to find a Coupon_table
     * @example
     * // Get one Coupon_table
     * const coupon_table = await prisma.coupon_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coupon_tableFindUniqueOrThrowArgs>(args: SelectSubset<T, coupon_tableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coupon_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableFindFirstArgs} args - Arguments to find a Coupon_table
     * @example
     * // Get one Coupon_table
     * const coupon_table = await prisma.coupon_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coupon_tableFindFirstArgs>(args?: SelectSubset<T, coupon_tableFindFirstArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coupon_table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableFindFirstOrThrowArgs} args - Arguments to find a Coupon_table
     * @example
     * // Get one Coupon_table
     * const coupon_table = await prisma.coupon_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coupon_tableFindFirstOrThrowArgs>(args?: SelectSubset<T, coupon_tableFindFirstOrThrowArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Coupon_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coupon_tables
     * const coupon_tables = await prisma.coupon_table.findMany()
     * 
     * // Get first 10 Coupon_tables
     * const coupon_tables = await prisma.coupon_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coupon_tableWithIdOnly = await prisma.coupon_table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends coupon_tableFindManyArgs>(args?: SelectSubset<T, coupon_tableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Coupon_table.
     * @param {coupon_tableCreateArgs} args - Arguments to create a Coupon_table.
     * @example
     * // Create one Coupon_table
     * const Coupon_table = await prisma.coupon_table.create({
     *   data: {
     *     // ... data to create a Coupon_table
     *   }
     * })
     * 
     */
    create<T extends coupon_tableCreateArgs>(args: SelectSubset<T, coupon_tableCreateArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Coupon_tables.
     * @param {coupon_tableCreateManyArgs} args - Arguments to create many Coupon_tables.
     * @example
     * // Create many Coupon_tables
     * const coupon_table = await prisma.coupon_table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coupon_tableCreateManyArgs>(args?: SelectSubset<T, coupon_tableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coupon_tables and returns the data saved in the database.
     * @param {coupon_tableCreateManyAndReturnArgs} args - Arguments to create many Coupon_tables.
     * @example
     * // Create many Coupon_tables
     * const coupon_table = await prisma.coupon_table.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coupon_tables and only return the `id`
     * const coupon_tableWithIdOnly = await prisma.coupon_table.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends coupon_tableCreateManyAndReturnArgs>(args?: SelectSubset<T, coupon_tableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Coupon_table.
     * @param {coupon_tableDeleteArgs} args - Arguments to delete one Coupon_table.
     * @example
     * // Delete one Coupon_table
     * const Coupon_table = await prisma.coupon_table.delete({
     *   where: {
     *     // ... filter to delete one Coupon_table
     *   }
     * })
     * 
     */
    delete<T extends coupon_tableDeleteArgs>(args: SelectSubset<T, coupon_tableDeleteArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Coupon_table.
     * @param {coupon_tableUpdateArgs} args - Arguments to update one Coupon_table.
     * @example
     * // Update one Coupon_table
     * const coupon_table = await prisma.coupon_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coupon_tableUpdateArgs>(args: SelectSubset<T, coupon_tableUpdateArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Coupon_tables.
     * @param {coupon_tableDeleteManyArgs} args - Arguments to filter Coupon_tables to delete.
     * @example
     * // Delete a few Coupon_tables
     * const { count } = await prisma.coupon_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coupon_tableDeleteManyArgs>(args?: SelectSubset<T, coupon_tableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupon_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coupon_tables
     * const coupon_table = await prisma.coupon_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coupon_tableUpdateManyArgs>(args: SelectSubset<T, coupon_tableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coupon_tables and returns the data updated in the database.
     * @param {coupon_tableUpdateManyAndReturnArgs} args - Arguments to update many Coupon_tables.
     * @example
     * // Update many Coupon_tables
     * const coupon_table = await prisma.coupon_table.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Coupon_tables and only return the `id`
     * const coupon_tableWithIdOnly = await prisma.coupon_table.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends coupon_tableUpdateManyAndReturnArgs>(args: SelectSubset<T, coupon_tableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Coupon_table.
     * @param {coupon_tableUpsertArgs} args - Arguments to update or create a Coupon_table.
     * @example
     * // Update or create a Coupon_table
     * const coupon_table = await prisma.coupon_table.upsert({
     *   create: {
     *     // ... data to create a Coupon_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coupon_table we want to update
     *   }
     * })
     */
    upsert<T extends coupon_tableUpsertArgs>(args: SelectSubset<T, coupon_tableUpsertArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Coupon_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableCountArgs} args - Arguments to filter Coupon_tables to count.
     * @example
     * // Count the number of Coupon_tables
     * const count = await prisma.coupon_table.count({
     *   where: {
     *     // ... the filter for the Coupon_tables we want to count
     *   }
     * })
    **/
    count<T extends coupon_tableCountArgs>(
      args?: Subset<T, coupon_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Coupon_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coupon_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Coupon_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Coupon_tableAggregateArgs>(args: Subset<T, Coupon_tableAggregateArgs>): Prisma.PrismaPromise<GetCoupon_tableAggregateType<T>>

    /**
     * Group by Coupon_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coupon_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coupon_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coupon_tableGroupByArgs['orderBy'] }
        : { orderBy?: coupon_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coupon_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoupon_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the coupon_table model
   */
  readonly fields: coupon_tableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for coupon_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coupon_tableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_coupon<T extends coupon_table$user_couponArgs<ExtArgs> = {}>(args?: Subset<T, coupon_table$user_couponArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the coupon_table model
   */
  interface coupon_tableFieldRefs {
    readonly id: FieldRef<"coupon_table", 'Int'>
    readonly event_id: FieldRef<"coupon_table", 'Int'>
    readonly code: FieldRef<"coupon_table", 'String'>
    readonly discount_type: FieldRef<"coupon_table", 'discount_type'>
    readonly discount_value: FieldRef<"coupon_table", 'Int'>
    readonly created_at: FieldRef<"coupon_table", 'DateTime'>
    readonly expires_at: FieldRef<"coupon_table", 'DateTime'>
    readonly used_at: FieldRef<"coupon_table", 'DateTime'>
    readonly usage_limit: FieldRef<"coupon_table", 'Int'>
    readonly used_count: FieldRef<"coupon_table", 'Int'>
    readonly status: FieldRef<"coupon_table", 'coupon_status'>
    readonly issued_by: FieldRef<"coupon_table", 'issuer'>
  }
    

  // Custom InputTypes
  /**
   * coupon_table findUnique
   */
  export type coupon_tableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter, which coupon_table to fetch.
     */
    where: coupon_tableWhereUniqueInput
  }

  /**
   * coupon_table findUniqueOrThrow
   */
  export type coupon_tableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter, which coupon_table to fetch.
     */
    where: coupon_tableWhereUniqueInput
  }

  /**
   * coupon_table findFirst
   */
  export type coupon_tableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter, which coupon_table to fetch.
     */
    where?: coupon_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupon_tables to fetch.
     */
    orderBy?: coupon_tableOrderByWithRelationInput | coupon_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coupon_tables.
     */
    cursor?: coupon_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupon_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupon_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coupon_tables.
     */
    distinct?: Coupon_tableScalarFieldEnum | Coupon_tableScalarFieldEnum[]
  }

  /**
   * coupon_table findFirstOrThrow
   */
  export type coupon_tableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter, which coupon_table to fetch.
     */
    where?: coupon_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupon_tables to fetch.
     */
    orderBy?: coupon_tableOrderByWithRelationInput | coupon_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coupon_tables.
     */
    cursor?: coupon_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupon_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupon_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coupon_tables.
     */
    distinct?: Coupon_tableScalarFieldEnum | Coupon_tableScalarFieldEnum[]
  }

  /**
   * coupon_table findMany
   */
  export type coupon_tableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter, which coupon_tables to fetch.
     */
    where?: coupon_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coupon_tables to fetch.
     */
    orderBy?: coupon_tableOrderByWithRelationInput | coupon_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing coupon_tables.
     */
    cursor?: coupon_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coupon_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coupon_tables.
     */
    skip?: number
    distinct?: Coupon_tableScalarFieldEnum | Coupon_tableScalarFieldEnum[]
  }

  /**
   * coupon_table create
   */
  export type coupon_tableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * The data needed to create a coupon_table.
     */
    data: XOR<coupon_tableCreateInput, coupon_tableUncheckedCreateInput>
  }

  /**
   * coupon_table createMany
   */
  export type coupon_tableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many coupon_tables.
     */
    data: coupon_tableCreateManyInput | coupon_tableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * coupon_table createManyAndReturn
   */
  export type coupon_tableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * The data used to create many coupon_tables.
     */
    data: coupon_tableCreateManyInput | coupon_tableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * coupon_table update
   */
  export type coupon_tableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * The data needed to update a coupon_table.
     */
    data: XOR<coupon_tableUpdateInput, coupon_tableUncheckedUpdateInput>
    /**
     * Choose, which coupon_table to update.
     */
    where: coupon_tableWhereUniqueInput
  }

  /**
   * coupon_table updateMany
   */
  export type coupon_tableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update coupon_tables.
     */
    data: XOR<coupon_tableUpdateManyMutationInput, coupon_tableUncheckedUpdateManyInput>
    /**
     * Filter which coupon_tables to update
     */
    where?: coupon_tableWhereInput
    /**
     * Limit how many coupon_tables to update.
     */
    limit?: number
  }

  /**
   * coupon_table updateManyAndReturn
   */
  export type coupon_tableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * The data used to update coupon_tables.
     */
    data: XOR<coupon_tableUpdateManyMutationInput, coupon_tableUncheckedUpdateManyInput>
    /**
     * Filter which coupon_tables to update
     */
    where?: coupon_tableWhereInput
    /**
     * Limit how many coupon_tables to update.
     */
    limit?: number
  }

  /**
   * coupon_table upsert
   */
  export type coupon_tableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * The filter to search for the coupon_table to update in case it exists.
     */
    where: coupon_tableWhereUniqueInput
    /**
     * In case the coupon_table found by the `where` argument doesn't exist, create a new coupon_table with this data.
     */
    create: XOR<coupon_tableCreateInput, coupon_tableUncheckedCreateInput>
    /**
     * In case the coupon_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coupon_tableUpdateInput, coupon_tableUncheckedUpdateInput>
  }

  /**
   * coupon_table delete
   */
  export type coupon_tableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
    /**
     * Filter which coupon_table to delete.
     */
    where: coupon_tableWhereUniqueInput
  }

  /**
   * coupon_table deleteMany
   */
  export type coupon_tableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coupon_tables to delete
     */
    where?: coupon_tableWhereInput
    /**
     * Limit how many coupon_tables to delete.
     */
    limit?: number
  }

  /**
   * coupon_table.user_coupon
   */
  export type coupon_table$user_couponArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    where?: user_couponWhereInput
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    cursor?: user_couponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_couponScalarFieldEnum | User_couponScalarFieldEnum[]
  }

  /**
   * coupon_table without action
   */
  export type coupon_tableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coupon_table
     */
    select?: coupon_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coupon_table
     */
    omit?: coupon_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coupon_tableInclude<ExtArgs> | null
  }


  /**
   * Model user_coupon
   */

  export type AggregateUser_coupon = {
    _count: User_couponCountAggregateOutputType | null
    _avg: User_couponAvgAggregateOutputType | null
    _sum: User_couponSumAggregateOutputType | null
    _min: User_couponMinAggregateOutputType | null
    _max: User_couponMaxAggregateOutputType | null
  }

  export type User_couponAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    coupon_id: number | null
  }

  export type User_couponSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    coupon_id: number | null
  }

  export type User_couponMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    coupon_id: number | null
    used_at: Date | null
  }

  export type User_couponMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    coupon_id: number | null
    used_at: Date | null
  }

  export type User_couponCountAggregateOutputType = {
    id: number
    user_id: number
    coupon_id: number
    used_at: number
    _all: number
  }


  export type User_couponAvgAggregateInputType = {
    id?: true
    user_id?: true
    coupon_id?: true
  }

  export type User_couponSumAggregateInputType = {
    id?: true
    user_id?: true
    coupon_id?: true
  }

  export type User_couponMinAggregateInputType = {
    id?: true
    user_id?: true
    coupon_id?: true
    used_at?: true
  }

  export type User_couponMaxAggregateInputType = {
    id?: true
    user_id?: true
    coupon_id?: true
    used_at?: true
  }

  export type User_couponCountAggregateInputType = {
    id?: true
    user_id?: true
    coupon_id?: true
    used_at?: true
    _all?: true
  }

  export type User_couponAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_coupon to aggregate.
     */
    where?: user_couponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_coupons to fetch.
     */
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_couponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_coupons
    **/
    _count?: true | User_couponCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_couponAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_couponSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_couponMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_couponMaxAggregateInputType
  }

  export type GetUser_couponAggregateType<T extends User_couponAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_coupon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_coupon[P]>
      : GetScalarType<T[P], AggregateUser_coupon[P]>
  }




  export type user_couponGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_couponWhereInput
    orderBy?: user_couponOrderByWithAggregationInput | user_couponOrderByWithAggregationInput[]
    by: User_couponScalarFieldEnum[] | User_couponScalarFieldEnum
    having?: user_couponScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_couponCountAggregateInputType | true
    _avg?: User_couponAvgAggregateInputType
    _sum?: User_couponSumAggregateInputType
    _min?: User_couponMinAggregateInputType
    _max?: User_couponMaxAggregateInputType
  }

  export type User_couponGroupByOutputType = {
    id: number
    user_id: number
    coupon_id: number
    used_at: Date | null
    _count: User_couponCountAggregateOutputType | null
    _avg: User_couponAvgAggregateOutputType | null
    _sum: User_couponSumAggregateOutputType | null
    _min: User_couponMinAggregateOutputType | null
    _max: User_couponMaxAggregateOutputType | null
  }

  type GetUser_couponGroupByPayload<T extends user_couponGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_couponGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_couponGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_couponGroupByOutputType[P]>
            : GetScalarType<T[P], User_couponGroupByOutputType[P]>
        }
      >
    >


  export type user_couponSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    coupon_id?: boolean
    used_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_coupon"]>

  export type user_couponSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    coupon_id?: boolean
    used_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_coupon"]>

  export type user_couponSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    coupon_id?: boolean
    used_at?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_coupon"]>

  export type user_couponSelectScalar = {
    id?: boolean
    user_id?: boolean
    coupon_id?: boolean
    used_at?: boolean
  }

  export type user_couponOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "coupon_id" | "used_at", ExtArgs["result"]["user_coupon"]>
  export type user_couponInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }
  export type user_couponIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }
  export type user_couponIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    coupon?: boolean | coupon_tableDefaultArgs<ExtArgs>
  }

  export type $user_couponPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_coupon"
    objects: {
      user: Prisma.$user_accountPayload<ExtArgs>
      coupon: Prisma.$coupon_tablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      coupon_id: number
      used_at: Date | null
    }, ExtArgs["result"]["user_coupon"]>
    composites: {}
  }

  type user_couponGetPayload<S extends boolean | null | undefined | user_couponDefaultArgs> = $Result.GetResult<Prisma.$user_couponPayload, S>

  type user_couponCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_couponFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_couponCountAggregateInputType | true
    }

  export interface user_couponDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_coupon'], meta: { name: 'user_coupon' } }
    /**
     * Find zero or one User_coupon that matches the filter.
     * @param {user_couponFindUniqueArgs} args - Arguments to find a User_coupon
     * @example
     * // Get one User_coupon
     * const user_coupon = await prisma.user_coupon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_couponFindUniqueArgs>(args: SelectSubset<T, user_couponFindUniqueArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User_coupon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_couponFindUniqueOrThrowArgs} args - Arguments to find a User_coupon
     * @example
     * // Get one User_coupon
     * const user_coupon = await prisma.user_coupon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_couponFindUniqueOrThrowArgs>(args: SelectSubset<T, user_couponFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_coupon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponFindFirstArgs} args - Arguments to find a User_coupon
     * @example
     * // Get one User_coupon
     * const user_coupon = await prisma.user_coupon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_couponFindFirstArgs>(args?: SelectSubset<T, user_couponFindFirstArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User_coupon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponFindFirstOrThrowArgs} args - Arguments to find a User_coupon
     * @example
     * // Get one User_coupon
     * const user_coupon = await prisma.user_coupon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_couponFindFirstOrThrowArgs>(args?: SelectSubset<T, user_couponFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more User_coupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_coupons
     * const user_coupons = await prisma.user_coupon.findMany()
     * 
     * // Get first 10 User_coupons
     * const user_coupons = await prisma.user_coupon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_couponWithIdOnly = await prisma.user_coupon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_couponFindManyArgs>(args?: SelectSubset<T, user_couponFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User_coupon.
     * @param {user_couponCreateArgs} args - Arguments to create a User_coupon.
     * @example
     * // Create one User_coupon
     * const User_coupon = await prisma.user_coupon.create({
     *   data: {
     *     // ... data to create a User_coupon
     *   }
     * })
     * 
     */
    create<T extends user_couponCreateArgs>(args: SelectSubset<T, user_couponCreateArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many User_coupons.
     * @param {user_couponCreateManyArgs} args - Arguments to create many User_coupons.
     * @example
     * // Create many User_coupons
     * const user_coupon = await prisma.user_coupon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_couponCreateManyArgs>(args?: SelectSubset<T, user_couponCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_coupons and returns the data saved in the database.
     * @param {user_couponCreateManyAndReturnArgs} args - Arguments to create many User_coupons.
     * @example
     * // Create many User_coupons
     * const user_coupon = await prisma.user_coupon.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_coupons and only return the `id`
     * const user_couponWithIdOnly = await prisma.user_coupon.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_couponCreateManyAndReturnArgs>(args?: SelectSubset<T, user_couponCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User_coupon.
     * @param {user_couponDeleteArgs} args - Arguments to delete one User_coupon.
     * @example
     * // Delete one User_coupon
     * const User_coupon = await prisma.user_coupon.delete({
     *   where: {
     *     // ... filter to delete one User_coupon
     *   }
     * })
     * 
     */
    delete<T extends user_couponDeleteArgs>(args: SelectSubset<T, user_couponDeleteArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User_coupon.
     * @param {user_couponUpdateArgs} args - Arguments to update one User_coupon.
     * @example
     * // Update one User_coupon
     * const user_coupon = await prisma.user_coupon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_couponUpdateArgs>(args: SelectSubset<T, user_couponUpdateArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more User_coupons.
     * @param {user_couponDeleteManyArgs} args - Arguments to filter User_coupons to delete.
     * @example
     * // Delete a few User_coupons
     * const { count } = await prisma.user_coupon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_couponDeleteManyArgs>(args?: SelectSubset<T, user_couponDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_coupons
     * const user_coupon = await prisma.user_coupon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_couponUpdateManyArgs>(args: SelectSubset<T, user_couponUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_coupons and returns the data updated in the database.
     * @param {user_couponUpdateManyAndReturnArgs} args - Arguments to update many User_coupons.
     * @example
     * // Update many User_coupons
     * const user_coupon = await prisma.user_coupon.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_coupons and only return the `id`
     * const user_couponWithIdOnly = await prisma.user_coupon.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_couponUpdateManyAndReturnArgs>(args: SelectSubset<T, user_couponUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User_coupon.
     * @param {user_couponUpsertArgs} args - Arguments to update or create a User_coupon.
     * @example
     * // Update or create a User_coupon
     * const user_coupon = await prisma.user_coupon.upsert({
     *   create: {
     *     // ... data to create a User_coupon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_coupon we want to update
     *   }
     * })
     */
    upsert<T extends user_couponUpsertArgs>(args: SelectSubset<T, user_couponUpsertArgs<ExtArgs>>): Prisma__user_couponClient<$Result.GetResult<Prisma.$user_couponPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of User_coupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponCountArgs} args - Arguments to filter User_coupons to count.
     * @example
     * // Count the number of User_coupons
     * const count = await prisma.user_coupon.count({
     *   where: {
     *     // ... the filter for the User_coupons we want to count
     *   }
     * })
    **/
    count<T extends user_couponCountArgs>(
      args?: Subset<T, user_couponCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_couponCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_coupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_couponAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_couponAggregateArgs>(args: Subset<T, User_couponAggregateArgs>): Prisma.PrismaPromise<GetUser_couponAggregateType<T>>

    /**
     * Group by User_coupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_couponGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_couponGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_couponGroupByArgs['orderBy'] }
        : { orderBy?: user_couponGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_couponGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_couponGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_coupon model
   */
  readonly fields: user_couponFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_coupon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_couponClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coupon<T extends coupon_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coupon_tableDefaultArgs<ExtArgs>>): Prisma__coupon_tableClient<$Result.GetResult<Prisma.$coupon_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_coupon model
   */
  interface user_couponFieldRefs {
    readonly id: FieldRef<"user_coupon", 'Int'>
    readonly user_id: FieldRef<"user_coupon", 'Int'>
    readonly coupon_id: FieldRef<"user_coupon", 'Int'>
    readonly used_at: FieldRef<"user_coupon", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user_coupon findUnique
   */
  export type user_couponFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter, which user_coupon to fetch.
     */
    where: user_couponWhereUniqueInput
  }

  /**
   * user_coupon findUniqueOrThrow
   */
  export type user_couponFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter, which user_coupon to fetch.
     */
    where: user_couponWhereUniqueInput
  }

  /**
   * user_coupon findFirst
   */
  export type user_couponFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter, which user_coupon to fetch.
     */
    where?: user_couponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_coupons to fetch.
     */
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_coupons.
     */
    cursor?: user_couponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_coupons.
     */
    distinct?: User_couponScalarFieldEnum | User_couponScalarFieldEnum[]
  }

  /**
   * user_coupon findFirstOrThrow
   */
  export type user_couponFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter, which user_coupon to fetch.
     */
    where?: user_couponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_coupons to fetch.
     */
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_coupons.
     */
    cursor?: user_couponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_coupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_coupons.
     */
    distinct?: User_couponScalarFieldEnum | User_couponScalarFieldEnum[]
  }

  /**
   * user_coupon findMany
   */
  export type user_couponFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter, which user_coupons to fetch.
     */
    where?: user_couponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_coupons to fetch.
     */
    orderBy?: user_couponOrderByWithRelationInput | user_couponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_coupons.
     */
    cursor?: user_couponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_coupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_coupons.
     */
    skip?: number
    distinct?: User_couponScalarFieldEnum | User_couponScalarFieldEnum[]
  }

  /**
   * user_coupon create
   */
  export type user_couponCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * The data needed to create a user_coupon.
     */
    data: XOR<user_couponCreateInput, user_couponUncheckedCreateInput>
  }

  /**
   * user_coupon createMany
   */
  export type user_couponCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_coupons.
     */
    data: user_couponCreateManyInput | user_couponCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_coupon createManyAndReturn
   */
  export type user_couponCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * The data used to create many user_coupons.
     */
    data: user_couponCreateManyInput | user_couponCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_coupon update
   */
  export type user_couponUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * The data needed to update a user_coupon.
     */
    data: XOR<user_couponUpdateInput, user_couponUncheckedUpdateInput>
    /**
     * Choose, which user_coupon to update.
     */
    where: user_couponWhereUniqueInput
  }

  /**
   * user_coupon updateMany
   */
  export type user_couponUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_coupons.
     */
    data: XOR<user_couponUpdateManyMutationInput, user_couponUncheckedUpdateManyInput>
    /**
     * Filter which user_coupons to update
     */
    where?: user_couponWhereInput
    /**
     * Limit how many user_coupons to update.
     */
    limit?: number
  }

  /**
   * user_coupon updateManyAndReturn
   */
  export type user_couponUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * The data used to update user_coupons.
     */
    data: XOR<user_couponUpdateManyMutationInput, user_couponUncheckedUpdateManyInput>
    /**
     * Filter which user_coupons to update
     */
    where?: user_couponWhereInput
    /**
     * Limit how many user_coupons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_coupon upsert
   */
  export type user_couponUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * The filter to search for the user_coupon to update in case it exists.
     */
    where: user_couponWhereUniqueInput
    /**
     * In case the user_coupon found by the `where` argument doesn't exist, create a new user_coupon with this data.
     */
    create: XOR<user_couponCreateInput, user_couponUncheckedCreateInput>
    /**
     * In case the user_coupon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_couponUpdateInput, user_couponUncheckedUpdateInput>
  }

  /**
   * user_coupon delete
   */
  export type user_couponDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
    /**
     * Filter which user_coupon to delete.
     */
    where: user_couponWhereUniqueInput
  }

  /**
   * user_coupon deleteMany
   */
  export type user_couponDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_coupons to delete
     */
    where?: user_couponWhereInput
    /**
     * Limit how many user_coupons to delete.
     */
    limit?: number
  }

  /**
   * user_coupon without action
   */
  export type user_couponDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_coupon
     */
    select?: user_couponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_coupon
     */
    omit?: user_couponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_couponInclude<ExtArgs> | null
  }


  /**
   * Model organizer_account
   */

  export type AggregateOrganizer_account = {
    _count: Organizer_accountCountAggregateOutputType | null
    _avg: Organizer_accountAvgAggregateOutputType | null
    _sum: Organizer_accountSumAggregateOutputType | null
    _min: Organizer_accountMinAggregateOutputType | null
    _max: Organizer_accountMaxAggregateOutputType | null
  }

  export type Organizer_accountAvgAggregateOutputType = {
    id: number | null
  }

  export type Organizer_accountSumAggregateOutputType = {
    id: number | null
  }

  export type Organizer_accountMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.account_role | null
  }

  export type Organizer_accountMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.account_role | null
  }

  export type Organizer_accountCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type Organizer_accountAvgAggregateInputType = {
    id?: true
  }

  export type Organizer_accountSumAggregateInputType = {
    id?: true
  }

  export type Organizer_accountMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
  }

  export type Organizer_accountMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
  }

  export type Organizer_accountCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type Organizer_accountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_account to aggregate.
     */
    where?: organizer_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_accounts to fetch.
     */
    orderBy?: organizer_accountOrderByWithRelationInput | organizer_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: organizer_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned organizer_accounts
    **/
    _count?: true | Organizer_accountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Organizer_accountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Organizer_accountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Organizer_accountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Organizer_accountMaxAggregateInputType
  }

  export type GetOrganizer_accountAggregateType<T extends Organizer_accountAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizer_account]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizer_account[P]>
      : GetScalarType<T[P], AggregateOrganizer_account[P]>
  }




  export type organizer_accountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_accountWhereInput
    orderBy?: organizer_accountOrderByWithAggregationInput | organizer_accountOrderByWithAggregationInput[]
    by: Organizer_accountScalarFieldEnum[] | Organizer_accountScalarFieldEnum
    having?: organizer_accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Organizer_accountCountAggregateInputType | true
    _avg?: Organizer_accountAvgAggregateInputType
    _sum?: Organizer_accountSumAggregateInputType
    _min?: Organizer_accountMinAggregateInputType
    _max?: Organizer_accountMaxAggregateInputType
  }

  export type Organizer_accountGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    _count: Organizer_accountCountAggregateOutputType | null
    _avg: Organizer_accountAvgAggregateOutputType | null
    _sum: Organizer_accountSumAggregateOutputType | null
    _min: Organizer_accountMinAggregateOutputType | null
    _max: Organizer_accountMaxAggregateOutputType | null
  }

  type GetOrganizer_accountGroupByPayload<T extends organizer_accountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Organizer_accountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Organizer_accountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Organizer_accountGroupByOutputType[P]>
            : GetScalarType<T[P], Organizer_accountGroupByOutputType[P]>
        }
      >
    >


  export type organizer_accountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    organizer_profile?: boolean | organizer_account$organizer_profileArgs<ExtArgs>
    organizer_reviews?: boolean | organizer_account$organizer_reviewsArgs<ExtArgs>
    event_table?: boolean | organizer_account$event_tableArgs<ExtArgs>
    event_attendees?: boolean | organizer_account$event_attendeesArgs<ExtArgs>
    voucher?: boolean | organizer_account$voucherArgs<ExtArgs>
    _count?: boolean | Organizer_accountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_account"]>

  export type organizer_accountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["organizer_account"]>

  export type organizer_accountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["organizer_account"]>

  export type organizer_accountSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }

  export type organizer_accountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "role", ExtArgs["result"]["organizer_account"]>
  export type organizer_accountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer_profile?: boolean | organizer_account$organizer_profileArgs<ExtArgs>
    organizer_reviews?: boolean | organizer_account$organizer_reviewsArgs<ExtArgs>
    event_table?: boolean | organizer_account$event_tableArgs<ExtArgs>
    event_attendees?: boolean | organizer_account$event_attendeesArgs<ExtArgs>
    voucher?: boolean | organizer_account$voucherArgs<ExtArgs>
    _count?: boolean | Organizer_accountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type organizer_accountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type organizer_accountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $organizer_accountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "organizer_account"
    objects: {
      organizer_profile: Prisma.$organizer_profilePayload<ExtArgs> | null
      organizer_reviews: Prisma.$organizer_reviewsPayload<ExtArgs>[]
      event_table: Prisma.$event_tablePayload<ExtArgs>[]
      event_attendees: Prisma.$event_attendeesPayload<ExtArgs>[]
      voucher: Prisma.$voucher_tablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      role: $Enums.account_role
    }, ExtArgs["result"]["organizer_account"]>
    composites: {}
  }

  type organizer_accountGetPayload<S extends boolean | null | undefined | organizer_accountDefaultArgs> = $Result.GetResult<Prisma.$organizer_accountPayload, S>

  type organizer_accountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<organizer_accountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Organizer_accountCountAggregateInputType | true
    }

  export interface organizer_accountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['organizer_account'], meta: { name: 'organizer_account' } }
    /**
     * Find zero or one Organizer_account that matches the filter.
     * @param {organizer_accountFindUniqueArgs} args - Arguments to find a Organizer_account
     * @example
     * // Get one Organizer_account
     * const organizer_account = await prisma.organizer_account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends organizer_accountFindUniqueArgs>(args: SelectSubset<T, organizer_accountFindUniqueArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organizer_account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {organizer_accountFindUniqueOrThrowArgs} args - Arguments to find a Organizer_account
     * @example
     * // Get one Organizer_account
     * const organizer_account = await prisma.organizer_account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends organizer_accountFindUniqueOrThrowArgs>(args: SelectSubset<T, organizer_accountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountFindFirstArgs} args - Arguments to find a Organizer_account
     * @example
     * // Get one Organizer_account
     * const organizer_account = await prisma.organizer_account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends organizer_accountFindFirstArgs>(args?: SelectSubset<T, organizer_accountFindFirstArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountFindFirstOrThrowArgs} args - Arguments to find a Organizer_account
     * @example
     * // Get one Organizer_account
     * const organizer_account = await prisma.organizer_account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends organizer_accountFindFirstOrThrowArgs>(args?: SelectSubset<T, organizer_accountFindFirstOrThrowArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizer_accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizer_accounts
     * const organizer_accounts = await prisma.organizer_account.findMany()
     * 
     * // Get first 10 Organizer_accounts
     * const organizer_accounts = await prisma.organizer_account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizer_accountWithIdOnly = await prisma.organizer_account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends organizer_accountFindManyArgs>(args?: SelectSubset<T, organizer_accountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organizer_account.
     * @param {organizer_accountCreateArgs} args - Arguments to create a Organizer_account.
     * @example
     * // Create one Organizer_account
     * const Organizer_account = await prisma.organizer_account.create({
     *   data: {
     *     // ... data to create a Organizer_account
     *   }
     * })
     * 
     */
    create<T extends organizer_accountCreateArgs>(args: SelectSubset<T, organizer_accountCreateArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizer_accounts.
     * @param {organizer_accountCreateManyArgs} args - Arguments to create many Organizer_accounts.
     * @example
     * // Create many Organizer_accounts
     * const organizer_account = await prisma.organizer_account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends organizer_accountCreateManyArgs>(args?: SelectSubset<T, organizer_accountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizer_accounts and returns the data saved in the database.
     * @param {organizer_accountCreateManyAndReturnArgs} args - Arguments to create many Organizer_accounts.
     * @example
     * // Create many Organizer_accounts
     * const organizer_account = await prisma.organizer_account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizer_accounts and only return the `id`
     * const organizer_accountWithIdOnly = await prisma.organizer_account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends organizer_accountCreateManyAndReturnArgs>(args?: SelectSubset<T, organizer_accountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organizer_account.
     * @param {organizer_accountDeleteArgs} args - Arguments to delete one Organizer_account.
     * @example
     * // Delete one Organizer_account
     * const Organizer_account = await prisma.organizer_account.delete({
     *   where: {
     *     // ... filter to delete one Organizer_account
     *   }
     * })
     * 
     */
    delete<T extends organizer_accountDeleteArgs>(args: SelectSubset<T, organizer_accountDeleteArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organizer_account.
     * @param {organizer_accountUpdateArgs} args - Arguments to update one Organizer_account.
     * @example
     * // Update one Organizer_account
     * const organizer_account = await prisma.organizer_account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends organizer_accountUpdateArgs>(args: SelectSubset<T, organizer_accountUpdateArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizer_accounts.
     * @param {organizer_accountDeleteManyArgs} args - Arguments to filter Organizer_accounts to delete.
     * @example
     * // Delete a few Organizer_accounts
     * const { count } = await prisma.organizer_account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends organizer_accountDeleteManyArgs>(args?: SelectSubset<T, organizer_accountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizer_accounts
     * const organizer_account = await prisma.organizer_account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends organizer_accountUpdateManyArgs>(args: SelectSubset<T, organizer_accountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_accounts and returns the data updated in the database.
     * @param {organizer_accountUpdateManyAndReturnArgs} args - Arguments to update many Organizer_accounts.
     * @example
     * // Update many Organizer_accounts
     * const organizer_account = await prisma.organizer_account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizer_accounts and only return the `id`
     * const organizer_accountWithIdOnly = await prisma.organizer_account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends organizer_accountUpdateManyAndReturnArgs>(args: SelectSubset<T, organizer_accountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organizer_account.
     * @param {organizer_accountUpsertArgs} args - Arguments to update or create a Organizer_account.
     * @example
     * // Update or create a Organizer_account
     * const organizer_account = await prisma.organizer_account.upsert({
     *   create: {
     *     // ... data to create a Organizer_account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organizer_account we want to update
     *   }
     * })
     */
    upsert<T extends organizer_accountUpsertArgs>(args: SelectSubset<T, organizer_accountUpsertArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizer_accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountCountArgs} args - Arguments to filter Organizer_accounts to count.
     * @example
     * // Count the number of Organizer_accounts
     * const count = await prisma.organizer_account.count({
     *   where: {
     *     // ... the filter for the Organizer_accounts we want to count
     *   }
     * })
    **/
    count<T extends organizer_accountCountArgs>(
      args?: Subset<T, organizer_accountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Organizer_accountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organizer_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Organizer_accountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Organizer_accountAggregateArgs>(args: Subset<T, Organizer_accountAggregateArgs>): Prisma.PrismaPromise<GetOrganizer_accountAggregateType<T>>

    /**
     * Group by Organizer_account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_accountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends organizer_accountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: organizer_accountGroupByArgs['orderBy'] }
        : { orderBy?: organizer_accountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, organizer_accountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizer_accountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the organizer_account model
   */
  readonly fields: organizer_accountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for organizer_account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__organizer_accountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer_profile<T extends organizer_account$organizer_profileArgs<ExtArgs> = {}>(args?: Subset<T, organizer_account$organizer_profileArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organizer_reviews<T extends organizer_account$organizer_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, organizer_account$organizer_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_table<T extends organizer_account$event_tableArgs<ExtArgs> = {}>(args?: Subset<T, organizer_account$event_tableArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_attendees<T extends organizer_account$event_attendeesArgs<ExtArgs> = {}>(args?: Subset<T, organizer_account$event_attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    voucher<T extends organizer_account$voucherArgs<ExtArgs> = {}>(args?: Subset<T, organizer_account$voucherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the organizer_account model
   */
  interface organizer_accountFieldRefs {
    readonly id: FieldRef<"organizer_account", 'Int'>
    readonly username: FieldRef<"organizer_account", 'String'>
    readonly email: FieldRef<"organizer_account", 'String'>
    readonly password: FieldRef<"organizer_account", 'String'>
    readonly role: FieldRef<"organizer_account", 'account_role'>
  }
    

  // Custom InputTypes
  /**
   * organizer_account findUnique
   */
  export type organizer_accountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter, which organizer_account to fetch.
     */
    where: organizer_accountWhereUniqueInput
  }

  /**
   * organizer_account findUniqueOrThrow
   */
  export type organizer_accountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter, which organizer_account to fetch.
     */
    where: organizer_accountWhereUniqueInput
  }

  /**
   * organizer_account findFirst
   */
  export type organizer_accountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter, which organizer_account to fetch.
     */
    where?: organizer_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_accounts to fetch.
     */
    orderBy?: organizer_accountOrderByWithRelationInput | organizer_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_accounts.
     */
    cursor?: organizer_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_accounts.
     */
    distinct?: Organizer_accountScalarFieldEnum | Organizer_accountScalarFieldEnum[]
  }

  /**
   * organizer_account findFirstOrThrow
   */
  export type organizer_accountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter, which organizer_account to fetch.
     */
    where?: organizer_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_accounts to fetch.
     */
    orderBy?: organizer_accountOrderByWithRelationInput | organizer_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_accounts.
     */
    cursor?: organizer_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_accounts.
     */
    distinct?: Organizer_accountScalarFieldEnum | Organizer_accountScalarFieldEnum[]
  }

  /**
   * organizer_account findMany
   */
  export type organizer_accountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter, which organizer_accounts to fetch.
     */
    where?: organizer_accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_accounts to fetch.
     */
    orderBy?: organizer_accountOrderByWithRelationInput | organizer_accountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing organizer_accounts.
     */
    cursor?: organizer_accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_accounts.
     */
    skip?: number
    distinct?: Organizer_accountScalarFieldEnum | Organizer_accountScalarFieldEnum[]
  }

  /**
   * organizer_account create
   */
  export type organizer_accountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * The data needed to create a organizer_account.
     */
    data: XOR<organizer_accountCreateInput, organizer_accountUncheckedCreateInput>
  }

  /**
   * organizer_account createMany
   */
  export type organizer_accountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many organizer_accounts.
     */
    data: organizer_accountCreateManyInput | organizer_accountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * organizer_account createManyAndReturn
   */
  export type organizer_accountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * The data used to create many organizer_accounts.
     */
    data: organizer_accountCreateManyInput | organizer_accountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * organizer_account update
   */
  export type organizer_accountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * The data needed to update a organizer_account.
     */
    data: XOR<organizer_accountUpdateInput, organizer_accountUncheckedUpdateInput>
    /**
     * Choose, which organizer_account to update.
     */
    where: organizer_accountWhereUniqueInput
  }

  /**
   * organizer_account updateMany
   */
  export type organizer_accountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update organizer_accounts.
     */
    data: XOR<organizer_accountUpdateManyMutationInput, organizer_accountUncheckedUpdateManyInput>
    /**
     * Filter which organizer_accounts to update
     */
    where?: organizer_accountWhereInput
    /**
     * Limit how many organizer_accounts to update.
     */
    limit?: number
  }

  /**
   * organizer_account updateManyAndReturn
   */
  export type organizer_accountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * The data used to update organizer_accounts.
     */
    data: XOR<organizer_accountUpdateManyMutationInput, organizer_accountUncheckedUpdateManyInput>
    /**
     * Filter which organizer_accounts to update
     */
    where?: organizer_accountWhereInput
    /**
     * Limit how many organizer_accounts to update.
     */
    limit?: number
  }

  /**
   * organizer_account upsert
   */
  export type organizer_accountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * The filter to search for the organizer_account to update in case it exists.
     */
    where: organizer_accountWhereUniqueInput
    /**
     * In case the organizer_account found by the `where` argument doesn't exist, create a new organizer_account with this data.
     */
    create: XOR<organizer_accountCreateInput, organizer_accountUncheckedCreateInput>
    /**
     * In case the organizer_account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<organizer_accountUpdateInput, organizer_accountUncheckedUpdateInput>
  }

  /**
   * organizer_account delete
   */
  export type organizer_accountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
    /**
     * Filter which organizer_account to delete.
     */
    where: organizer_accountWhereUniqueInput
  }

  /**
   * organizer_account deleteMany
   */
  export type organizer_accountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_accounts to delete
     */
    where?: organizer_accountWhereInput
    /**
     * Limit how many organizer_accounts to delete.
     */
    limit?: number
  }

  /**
   * organizer_account.organizer_profile
   */
  export type organizer_account$organizer_profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    where?: organizer_profileWhereInput
  }

  /**
   * organizer_account.organizer_reviews
   */
  export type organizer_account$organizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    where?: organizer_reviewsWhereInput
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    cursor?: organizer_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * organizer_account.event_table
   */
  export type organizer_account$event_tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    where?: event_tableWhereInput
    orderBy?: event_tableOrderByWithRelationInput | event_tableOrderByWithRelationInput[]
    cursor?: event_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Event_tableScalarFieldEnum | Event_tableScalarFieldEnum[]
  }

  /**
   * organizer_account.event_attendees
   */
  export type organizer_account$event_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    where?: event_attendeesWhereInput
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    cursor?: event_attendeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * organizer_account.voucher
   */
  export type organizer_account$voucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    where?: voucher_tableWhereInput
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    cursor?: voucher_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Voucher_tableScalarFieldEnum | Voucher_tableScalarFieldEnum[]
  }

  /**
   * organizer_account without action
   */
  export type organizer_accountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_account
     */
    select?: organizer_accountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_account
     */
    omit?: organizer_accountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_accountInclude<ExtArgs> | null
  }


  /**
   * Model organizer_profile
   */

  export type AggregateOrganizer_profile = {
    _count: Organizer_profileCountAggregateOutputType | null
    _avg: Organizer_profileAvgAggregateOutputType | null
    _sum: Organizer_profileSumAggregateOutputType | null
    _min: Organizer_profileMinAggregateOutputType | null
    _max: Organizer_profileMaxAggregateOutputType | null
  }

  export type Organizer_profileAvgAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    organizer_phone: number | null
  }

  export type Organizer_profileSumAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    organizer_phone: number | null
  }

  export type Organizer_profileMinAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    organizer_name: string | null
    organizer_address: string | null
    organizer_phone: number | null
    organizer_profile_image: string | null
  }

  export type Organizer_profileMaxAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    organizer_name: string | null
    organizer_address: string | null
    organizer_phone: number | null
    organizer_profile_image: string | null
  }

  export type Organizer_profileCountAggregateOutputType = {
    id: number
    organizer_id: number
    organizer_name: number
    organizer_address: number
    organizer_phone: number
    organizer_profile_image: number
    _all: number
  }


  export type Organizer_profileAvgAggregateInputType = {
    id?: true
    organizer_id?: true
    organizer_phone?: true
  }

  export type Organizer_profileSumAggregateInputType = {
    id?: true
    organizer_id?: true
    organizer_phone?: true
  }

  export type Organizer_profileMinAggregateInputType = {
    id?: true
    organizer_id?: true
    organizer_name?: true
    organizer_address?: true
    organizer_phone?: true
    organizer_profile_image?: true
  }

  export type Organizer_profileMaxAggregateInputType = {
    id?: true
    organizer_id?: true
    organizer_name?: true
    organizer_address?: true
    organizer_phone?: true
    organizer_profile_image?: true
  }

  export type Organizer_profileCountAggregateInputType = {
    id?: true
    organizer_id?: true
    organizer_name?: true
    organizer_address?: true
    organizer_phone?: true
    organizer_profile_image?: true
    _all?: true
  }

  export type Organizer_profileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_profile to aggregate.
     */
    where?: organizer_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_profiles to fetch.
     */
    orderBy?: organizer_profileOrderByWithRelationInput | organizer_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: organizer_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned organizer_profiles
    **/
    _count?: true | Organizer_profileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Organizer_profileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Organizer_profileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Organizer_profileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Organizer_profileMaxAggregateInputType
  }

  export type GetOrganizer_profileAggregateType<T extends Organizer_profileAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizer_profile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizer_profile[P]>
      : GetScalarType<T[P], AggregateOrganizer_profile[P]>
  }




  export type organizer_profileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_profileWhereInput
    orderBy?: organizer_profileOrderByWithAggregationInput | organizer_profileOrderByWithAggregationInput[]
    by: Organizer_profileScalarFieldEnum[] | Organizer_profileScalarFieldEnum
    having?: organizer_profileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Organizer_profileCountAggregateInputType | true
    _avg?: Organizer_profileAvgAggregateInputType
    _sum?: Organizer_profileSumAggregateInputType
    _min?: Organizer_profileMinAggregateInputType
    _max?: Organizer_profileMaxAggregateInputType
  }

  export type Organizer_profileGroupByOutputType = {
    id: number
    organizer_id: number
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
    _count: Organizer_profileCountAggregateOutputType | null
    _avg: Organizer_profileAvgAggregateOutputType | null
    _sum: Organizer_profileSumAggregateOutputType | null
    _min: Organizer_profileMinAggregateOutputType | null
    _max: Organizer_profileMaxAggregateOutputType | null
  }

  type GetOrganizer_profileGroupByPayload<T extends organizer_profileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Organizer_profileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Organizer_profileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Organizer_profileGroupByOutputType[P]>
            : GetScalarType<T[P], Organizer_profileGroupByOutputType[P]>
        }
      >
    >


  export type organizer_profileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_address?: boolean
    organizer_phone?: boolean
    organizer_profile_image?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_profile"]>

  export type organizer_profileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_address?: boolean
    organizer_phone?: boolean
    organizer_profile_image?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_profile"]>

  export type organizer_profileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_address?: boolean
    organizer_phone?: boolean
    organizer_profile_image?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_profile"]>

  export type organizer_profileSelectScalar = {
    id?: boolean
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_address?: boolean
    organizer_phone?: boolean
    organizer_profile_image?: boolean
  }

  export type organizer_profileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizer_id" | "organizer_name" | "organizer_address" | "organizer_phone" | "organizer_profile_image", ExtArgs["result"]["organizer_profile"]>
  export type organizer_profileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }
  export type organizer_profileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }
  export type organizer_profileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }

  export type $organizer_profilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "organizer_profile"
    objects: {
      organizer: Prisma.$organizer_accountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizer_id: number
      organizer_name: string
      organizer_address: string
      organizer_phone: number
      organizer_profile_image: string
    }, ExtArgs["result"]["organizer_profile"]>
    composites: {}
  }

  type organizer_profileGetPayload<S extends boolean | null | undefined | organizer_profileDefaultArgs> = $Result.GetResult<Prisma.$organizer_profilePayload, S>

  type organizer_profileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<organizer_profileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Organizer_profileCountAggregateInputType | true
    }

  export interface organizer_profileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['organizer_profile'], meta: { name: 'organizer_profile' } }
    /**
     * Find zero or one Organizer_profile that matches the filter.
     * @param {organizer_profileFindUniqueArgs} args - Arguments to find a Organizer_profile
     * @example
     * // Get one Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends organizer_profileFindUniqueArgs>(args: SelectSubset<T, organizer_profileFindUniqueArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organizer_profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {organizer_profileFindUniqueOrThrowArgs} args - Arguments to find a Organizer_profile
     * @example
     * // Get one Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends organizer_profileFindUniqueOrThrowArgs>(args: SelectSubset<T, organizer_profileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileFindFirstArgs} args - Arguments to find a Organizer_profile
     * @example
     * // Get one Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends organizer_profileFindFirstArgs>(args?: SelectSubset<T, organizer_profileFindFirstArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileFindFirstOrThrowArgs} args - Arguments to find a Organizer_profile
     * @example
     * // Get one Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends organizer_profileFindFirstOrThrowArgs>(args?: SelectSubset<T, organizer_profileFindFirstOrThrowArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizer_profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizer_profiles
     * const organizer_profiles = await prisma.organizer_profile.findMany()
     * 
     * // Get first 10 Organizer_profiles
     * const organizer_profiles = await prisma.organizer_profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizer_profileWithIdOnly = await prisma.organizer_profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends organizer_profileFindManyArgs>(args?: SelectSubset<T, organizer_profileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organizer_profile.
     * @param {organizer_profileCreateArgs} args - Arguments to create a Organizer_profile.
     * @example
     * // Create one Organizer_profile
     * const Organizer_profile = await prisma.organizer_profile.create({
     *   data: {
     *     // ... data to create a Organizer_profile
     *   }
     * })
     * 
     */
    create<T extends organizer_profileCreateArgs>(args: SelectSubset<T, organizer_profileCreateArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizer_profiles.
     * @param {organizer_profileCreateManyArgs} args - Arguments to create many Organizer_profiles.
     * @example
     * // Create many Organizer_profiles
     * const organizer_profile = await prisma.organizer_profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends organizer_profileCreateManyArgs>(args?: SelectSubset<T, organizer_profileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizer_profiles and returns the data saved in the database.
     * @param {organizer_profileCreateManyAndReturnArgs} args - Arguments to create many Organizer_profiles.
     * @example
     * // Create many Organizer_profiles
     * const organizer_profile = await prisma.organizer_profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizer_profiles and only return the `id`
     * const organizer_profileWithIdOnly = await prisma.organizer_profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends organizer_profileCreateManyAndReturnArgs>(args?: SelectSubset<T, organizer_profileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organizer_profile.
     * @param {organizer_profileDeleteArgs} args - Arguments to delete one Organizer_profile.
     * @example
     * // Delete one Organizer_profile
     * const Organizer_profile = await prisma.organizer_profile.delete({
     *   where: {
     *     // ... filter to delete one Organizer_profile
     *   }
     * })
     * 
     */
    delete<T extends organizer_profileDeleteArgs>(args: SelectSubset<T, organizer_profileDeleteArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organizer_profile.
     * @param {organizer_profileUpdateArgs} args - Arguments to update one Organizer_profile.
     * @example
     * // Update one Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends organizer_profileUpdateArgs>(args: SelectSubset<T, organizer_profileUpdateArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizer_profiles.
     * @param {organizer_profileDeleteManyArgs} args - Arguments to filter Organizer_profiles to delete.
     * @example
     * // Delete a few Organizer_profiles
     * const { count } = await prisma.organizer_profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends organizer_profileDeleteManyArgs>(args?: SelectSubset<T, organizer_profileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizer_profiles
     * const organizer_profile = await prisma.organizer_profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends organizer_profileUpdateManyArgs>(args: SelectSubset<T, organizer_profileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_profiles and returns the data updated in the database.
     * @param {organizer_profileUpdateManyAndReturnArgs} args - Arguments to update many Organizer_profiles.
     * @example
     * // Update many Organizer_profiles
     * const organizer_profile = await prisma.organizer_profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizer_profiles and only return the `id`
     * const organizer_profileWithIdOnly = await prisma.organizer_profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends organizer_profileUpdateManyAndReturnArgs>(args: SelectSubset<T, organizer_profileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organizer_profile.
     * @param {organizer_profileUpsertArgs} args - Arguments to update or create a Organizer_profile.
     * @example
     * // Update or create a Organizer_profile
     * const organizer_profile = await prisma.organizer_profile.upsert({
     *   create: {
     *     // ... data to create a Organizer_profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organizer_profile we want to update
     *   }
     * })
     */
    upsert<T extends organizer_profileUpsertArgs>(args: SelectSubset<T, organizer_profileUpsertArgs<ExtArgs>>): Prisma__organizer_profileClient<$Result.GetResult<Prisma.$organizer_profilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizer_profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileCountArgs} args - Arguments to filter Organizer_profiles to count.
     * @example
     * // Count the number of Organizer_profiles
     * const count = await prisma.organizer_profile.count({
     *   where: {
     *     // ... the filter for the Organizer_profiles we want to count
     *   }
     * })
    **/
    count<T extends organizer_profileCountArgs>(
      args?: Subset<T, organizer_profileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Organizer_profileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organizer_profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Organizer_profileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Organizer_profileAggregateArgs>(args: Subset<T, Organizer_profileAggregateArgs>): Prisma.PrismaPromise<GetOrganizer_profileAggregateType<T>>

    /**
     * Group by Organizer_profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_profileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends organizer_profileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: organizer_profileGroupByArgs['orderBy'] }
        : { orderBy?: organizer_profileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, organizer_profileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizer_profileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the organizer_profile model
   */
  readonly fields: organizer_profileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for organizer_profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__organizer_profileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends organizer_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, organizer_accountDefaultArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the organizer_profile model
   */
  interface organizer_profileFieldRefs {
    readonly id: FieldRef<"organizer_profile", 'Int'>
    readonly organizer_id: FieldRef<"organizer_profile", 'Int'>
    readonly organizer_name: FieldRef<"organizer_profile", 'String'>
    readonly organizer_address: FieldRef<"organizer_profile", 'String'>
    readonly organizer_phone: FieldRef<"organizer_profile", 'Int'>
    readonly organizer_profile_image: FieldRef<"organizer_profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * organizer_profile findUnique
   */
  export type organizer_profileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter, which organizer_profile to fetch.
     */
    where: organizer_profileWhereUniqueInput
  }

  /**
   * organizer_profile findUniqueOrThrow
   */
  export type organizer_profileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter, which organizer_profile to fetch.
     */
    where: organizer_profileWhereUniqueInput
  }

  /**
   * organizer_profile findFirst
   */
  export type organizer_profileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter, which organizer_profile to fetch.
     */
    where?: organizer_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_profiles to fetch.
     */
    orderBy?: organizer_profileOrderByWithRelationInput | organizer_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_profiles.
     */
    cursor?: organizer_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_profiles.
     */
    distinct?: Organizer_profileScalarFieldEnum | Organizer_profileScalarFieldEnum[]
  }

  /**
   * organizer_profile findFirstOrThrow
   */
  export type organizer_profileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter, which organizer_profile to fetch.
     */
    where?: organizer_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_profiles to fetch.
     */
    orderBy?: organizer_profileOrderByWithRelationInput | organizer_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_profiles.
     */
    cursor?: organizer_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_profiles.
     */
    distinct?: Organizer_profileScalarFieldEnum | Organizer_profileScalarFieldEnum[]
  }

  /**
   * organizer_profile findMany
   */
  export type organizer_profileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter, which organizer_profiles to fetch.
     */
    where?: organizer_profileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_profiles to fetch.
     */
    orderBy?: organizer_profileOrderByWithRelationInput | organizer_profileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing organizer_profiles.
     */
    cursor?: organizer_profileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_profiles.
     */
    skip?: number
    distinct?: Organizer_profileScalarFieldEnum | Organizer_profileScalarFieldEnum[]
  }

  /**
   * organizer_profile create
   */
  export type organizer_profileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * The data needed to create a organizer_profile.
     */
    data: XOR<organizer_profileCreateInput, organizer_profileUncheckedCreateInput>
  }

  /**
   * organizer_profile createMany
   */
  export type organizer_profileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many organizer_profiles.
     */
    data: organizer_profileCreateManyInput | organizer_profileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * organizer_profile createManyAndReturn
   */
  export type organizer_profileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * The data used to create many organizer_profiles.
     */
    data: organizer_profileCreateManyInput | organizer_profileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * organizer_profile update
   */
  export type organizer_profileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * The data needed to update a organizer_profile.
     */
    data: XOR<organizer_profileUpdateInput, organizer_profileUncheckedUpdateInput>
    /**
     * Choose, which organizer_profile to update.
     */
    where: organizer_profileWhereUniqueInput
  }

  /**
   * organizer_profile updateMany
   */
  export type organizer_profileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update organizer_profiles.
     */
    data: XOR<organizer_profileUpdateManyMutationInput, organizer_profileUncheckedUpdateManyInput>
    /**
     * Filter which organizer_profiles to update
     */
    where?: organizer_profileWhereInput
    /**
     * Limit how many organizer_profiles to update.
     */
    limit?: number
  }

  /**
   * organizer_profile updateManyAndReturn
   */
  export type organizer_profileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * The data used to update organizer_profiles.
     */
    data: XOR<organizer_profileUpdateManyMutationInput, organizer_profileUncheckedUpdateManyInput>
    /**
     * Filter which organizer_profiles to update
     */
    where?: organizer_profileWhereInput
    /**
     * Limit how many organizer_profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * organizer_profile upsert
   */
  export type organizer_profileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * The filter to search for the organizer_profile to update in case it exists.
     */
    where: organizer_profileWhereUniqueInput
    /**
     * In case the organizer_profile found by the `where` argument doesn't exist, create a new organizer_profile with this data.
     */
    create: XOR<organizer_profileCreateInput, organizer_profileUncheckedCreateInput>
    /**
     * In case the organizer_profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<organizer_profileUpdateInput, organizer_profileUncheckedUpdateInput>
  }

  /**
   * organizer_profile delete
   */
  export type organizer_profileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
    /**
     * Filter which organizer_profile to delete.
     */
    where: organizer_profileWhereUniqueInput
  }

  /**
   * organizer_profile deleteMany
   */
  export type organizer_profileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_profiles to delete
     */
    where?: organizer_profileWhereInput
    /**
     * Limit how many organizer_profiles to delete.
     */
    limit?: number
  }

  /**
   * organizer_profile without action
   */
  export type organizer_profileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_profile
     */
    select?: organizer_profileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_profile
     */
    omit?: organizer_profileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_profileInclude<ExtArgs> | null
  }


  /**
   * Model organizer_reviews
   */

  export type AggregateOrganizer_reviews = {
    _count: Organizer_reviewsCountAggregateOutputType | null
    _avg: Organizer_reviewsAvgAggregateOutputType | null
    _sum: Organizer_reviewsSumAggregateOutputType | null
    _min: Organizer_reviewsMinAggregateOutputType | null
    _max: Organizer_reviewsMaxAggregateOutputType | null
  }

  export type Organizer_reviewsAvgAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type Organizer_reviewsSumAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type Organizer_reviewsMinAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    user_id: number | null
    rating: number | null
    review: string | null
    created_at: Date | null
  }

  export type Organizer_reviewsMaxAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    user_id: number | null
    rating: number | null
    review: string | null
    created_at: Date | null
  }

  export type Organizer_reviewsCountAggregateOutputType = {
    id: number
    organizer_id: number
    event_id: number
    user_id: number
    rating: number
    review: number
    created_at: number
    _all: number
  }


  export type Organizer_reviewsAvgAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    user_id?: true
    rating?: true
  }

  export type Organizer_reviewsSumAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    user_id?: true
    rating?: true
  }

  export type Organizer_reviewsMinAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    user_id?: true
    rating?: true
    review?: true
    created_at?: true
  }

  export type Organizer_reviewsMaxAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    user_id?: true
    rating?: true
    review?: true
    created_at?: true
  }

  export type Organizer_reviewsCountAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    user_id?: true
    rating?: true
    review?: true
    created_at?: true
    _all?: true
  }

  export type Organizer_reviewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_reviews to aggregate.
     */
    where?: organizer_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_reviews to fetch.
     */
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: organizer_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned organizer_reviews
    **/
    _count?: true | Organizer_reviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Organizer_reviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Organizer_reviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Organizer_reviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Organizer_reviewsMaxAggregateInputType
  }

  export type GetOrganizer_reviewsAggregateType<T extends Organizer_reviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizer_reviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizer_reviews[P]>
      : GetScalarType<T[P], AggregateOrganizer_reviews[P]>
  }




  export type organizer_reviewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: organizer_reviewsWhereInput
    orderBy?: organizer_reviewsOrderByWithAggregationInput | organizer_reviewsOrderByWithAggregationInput[]
    by: Organizer_reviewsScalarFieldEnum[] | Organizer_reviewsScalarFieldEnum
    having?: organizer_reviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Organizer_reviewsCountAggregateInputType | true
    _avg?: Organizer_reviewsAvgAggregateInputType
    _sum?: Organizer_reviewsSumAggregateInputType
    _min?: Organizer_reviewsMinAggregateInputType
    _max?: Organizer_reviewsMaxAggregateInputType
  }

  export type Organizer_reviewsGroupByOutputType = {
    id: number
    organizer_id: number
    event_id: number
    user_id: number
    rating: number
    review: string
    created_at: Date
    _count: Organizer_reviewsCountAggregateOutputType | null
    _avg: Organizer_reviewsAvgAggregateOutputType | null
    _sum: Organizer_reviewsSumAggregateOutputType | null
    _min: Organizer_reviewsMinAggregateOutputType | null
    _max: Organizer_reviewsMaxAggregateOutputType | null
  }

  type GetOrganizer_reviewsGroupByPayload<T extends organizer_reviewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Organizer_reviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Organizer_reviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Organizer_reviewsGroupByOutputType[P]>
            : GetScalarType<T[P], Organizer_reviewsGroupByOutputType[P]>
        }
      >
    >


  export type organizer_reviewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    user_id?: boolean
    rating?: boolean
    review?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_reviews"]>

  export type organizer_reviewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    user_id?: boolean
    rating?: boolean
    review?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_reviews"]>

  export type organizer_reviewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    user_id?: boolean
    rating?: boolean
    review?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organizer_reviews"]>

  export type organizer_reviewsSelectScalar = {
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    user_id?: boolean
    rating?: boolean
    review?: boolean
    created_at?: boolean
  }

  export type organizer_reviewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizer_id" | "event_id" | "user_id" | "rating" | "review" | "created_at", ExtArgs["result"]["organizer_reviews"]>
  export type organizer_reviewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type organizer_reviewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type organizer_reviewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }

  export type $organizer_reviewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "organizer_reviews"
    objects: {
      organizer: Prisma.$organizer_accountPayload<ExtArgs>
      event: Prisma.$event_tablePayload<ExtArgs>
      user: Prisma.$user_accountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizer_id: number
      event_id: number
      user_id: number
      rating: number
      review: string
      created_at: Date
    }, ExtArgs["result"]["organizer_reviews"]>
    composites: {}
  }

  type organizer_reviewsGetPayload<S extends boolean | null | undefined | organizer_reviewsDefaultArgs> = $Result.GetResult<Prisma.$organizer_reviewsPayload, S>

  type organizer_reviewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<organizer_reviewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Organizer_reviewsCountAggregateInputType | true
    }

  export interface organizer_reviewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['organizer_reviews'], meta: { name: 'organizer_reviews' } }
    /**
     * Find zero or one Organizer_reviews that matches the filter.
     * @param {organizer_reviewsFindUniqueArgs} args - Arguments to find a Organizer_reviews
     * @example
     * // Get one Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends organizer_reviewsFindUniqueArgs>(args: SelectSubset<T, organizer_reviewsFindUniqueArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organizer_reviews that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {organizer_reviewsFindUniqueOrThrowArgs} args - Arguments to find a Organizer_reviews
     * @example
     * // Get one Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends organizer_reviewsFindUniqueOrThrowArgs>(args: SelectSubset<T, organizer_reviewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsFindFirstArgs} args - Arguments to find a Organizer_reviews
     * @example
     * // Get one Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends organizer_reviewsFindFirstArgs>(args?: SelectSubset<T, organizer_reviewsFindFirstArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organizer_reviews that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsFindFirstOrThrowArgs} args - Arguments to find a Organizer_reviews
     * @example
     * // Get one Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends organizer_reviewsFindFirstOrThrowArgs>(args?: SelectSubset<T, organizer_reviewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizer_reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findMany()
     * 
     * // Get first 10 Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizer_reviewsWithIdOnly = await prisma.organizer_reviews.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends organizer_reviewsFindManyArgs>(args?: SelectSubset<T, organizer_reviewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organizer_reviews.
     * @param {organizer_reviewsCreateArgs} args - Arguments to create a Organizer_reviews.
     * @example
     * // Create one Organizer_reviews
     * const Organizer_reviews = await prisma.organizer_reviews.create({
     *   data: {
     *     // ... data to create a Organizer_reviews
     *   }
     * })
     * 
     */
    create<T extends organizer_reviewsCreateArgs>(args: SelectSubset<T, organizer_reviewsCreateArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizer_reviews.
     * @param {organizer_reviewsCreateManyArgs} args - Arguments to create many Organizer_reviews.
     * @example
     * // Create many Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends organizer_reviewsCreateManyArgs>(args?: SelectSubset<T, organizer_reviewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizer_reviews and returns the data saved in the database.
     * @param {organizer_reviewsCreateManyAndReturnArgs} args - Arguments to create many Organizer_reviews.
     * @example
     * // Create many Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizer_reviews and only return the `id`
     * const organizer_reviewsWithIdOnly = await prisma.organizer_reviews.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends organizer_reviewsCreateManyAndReturnArgs>(args?: SelectSubset<T, organizer_reviewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organizer_reviews.
     * @param {organizer_reviewsDeleteArgs} args - Arguments to delete one Organizer_reviews.
     * @example
     * // Delete one Organizer_reviews
     * const Organizer_reviews = await prisma.organizer_reviews.delete({
     *   where: {
     *     // ... filter to delete one Organizer_reviews
     *   }
     * })
     * 
     */
    delete<T extends organizer_reviewsDeleteArgs>(args: SelectSubset<T, organizer_reviewsDeleteArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organizer_reviews.
     * @param {organizer_reviewsUpdateArgs} args - Arguments to update one Organizer_reviews.
     * @example
     * // Update one Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends organizer_reviewsUpdateArgs>(args: SelectSubset<T, organizer_reviewsUpdateArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizer_reviews.
     * @param {organizer_reviewsDeleteManyArgs} args - Arguments to filter Organizer_reviews to delete.
     * @example
     * // Delete a few Organizer_reviews
     * const { count } = await prisma.organizer_reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends organizer_reviewsDeleteManyArgs>(args?: SelectSubset<T, organizer_reviewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends organizer_reviewsUpdateManyArgs>(args: SelectSubset<T, organizer_reviewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizer_reviews and returns the data updated in the database.
     * @param {organizer_reviewsUpdateManyAndReturnArgs} args - Arguments to update many Organizer_reviews.
     * @example
     * // Update many Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizer_reviews and only return the `id`
     * const organizer_reviewsWithIdOnly = await prisma.organizer_reviews.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends organizer_reviewsUpdateManyAndReturnArgs>(args: SelectSubset<T, organizer_reviewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organizer_reviews.
     * @param {organizer_reviewsUpsertArgs} args - Arguments to update or create a Organizer_reviews.
     * @example
     * // Update or create a Organizer_reviews
     * const organizer_reviews = await prisma.organizer_reviews.upsert({
     *   create: {
     *     // ... data to create a Organizer_reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organizer_reviews we want to update
     *   }
     * })
     */
    upsert<T extends organizer_reviewsUpsertArgs>(args: SelectSubset<T, organizer_reviewsUpsertArgs<ExtArgs>>): Prisma__organizer_reviewsClient<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizer_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsCountArgs} args - Arguments to filter Organizer_reviews to count.
     * @example
     * // Count the number of Organizer_reviews
     * const count = await prisma.organizer_reviews.count({
     *   where: {
     *     // ... the filter for the Organizer_reviews we want to count
     *   }
     * })
    **/
    count<T extends organizer_reviewsCountArgs>(
      args?: Subset<T, organizer_reviewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Organizer_reviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organizer_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Organizer_reviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Organizer_reviewsAggregateArgs>(args: Subset<T, Organizer_reviewsAggregateArgs>): Prisma.PrismaPromise<GetOrganizer_reviewsAggregateType<T>>

    /**
     * Group by Organizer_reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizer_reviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends organizer_reviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: organizer_reviewsGroupByArgs['orderBy'] }
        : { orderBy?: organizer_reviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, organizer_reviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizer_reviewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the organizer_reviews model
   */
  readonly fields: organizer_reviewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for organizer_reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__organizer_reviewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends organizer_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, organizer_accountDefaultArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the organizer_reviews model
   */
  interface organizer_reviewsFieldRefs {
    readonly id: FieldRef<"organizer_reviews", 'Int'>
    readonly organizer_id: FieldRef<"organizer_reviews", 'Int'>
    readonly event_id: FieldRef<"organizer_reviews", 'Int'>
    readonly user_id: FieldRef<"organizer_reviews", 'Int'>
    readonly rating: FieldRef<"organizer_reviews", 'Int'>
    readonly review: FieldRef<"organizer_reviews", 'String'>
    readonly created_at: FieldRef<"organizer_reviews", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * organizer_reviews findUnique
   */
  export type organizer_reviewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which organizer_reviews to fetch.
     */
    where: organizer_reviewsWhereUniqueInput
  }

  /**
   * organizer_reviews findUniqueOrThrow
   */
  export type organizer_reviewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which organizer_reviews to fetch.
     */
    where: organizer_reviewsWhereUniqueInput
  }

  /**
   * organizer_reviews findFirst
   */
  export type organizer_reviewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which organizer_reviews to fetch.
     */
    where?: organizer_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_reviews to fetch.
     */
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_reviews.
     */
    cursor?: organizer_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_reviews.
     */
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * organizer_reviews findFirstOrThrow
   */
  export type organizer_reviewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which organizer_reviews to fetch.
     */
    where?: organizer_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_reviews to fetch.
     */
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizer_reviews.
     */
    cursor?: organizer_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizer_reviews.
     */
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * organizer_reviews findMany
   */
  export type organizer_reviewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter, which organizer_reviews to fetch.
     */
    where?: organizer_reviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizer_reviews to fetch.
     */
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing organizer_reviews.
     */
    cursor?: organizer_reviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizer_reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizer_reviews.
     */
    skip?: number
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * organizer_reviews create
   */
  export type organizer_reviewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to create a organizer_reviews.
     */
    data: XOR<organizer_reviewsCreateInput, organizer_reviewsUncheckedCreateInput>
  }

  /**
   * organizer_reviews createMany
   */
  export type organizer_reviewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many organizer_reviews.
     */
    data: organizer_reviewsCreateManyInput | organizer_reviewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * organizer_reviews createManyAndReturn
   */
  export type organizer_reviewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * The data used to create many organizer_reviews.
     */
    data: organizer_reviewsCreateManyInput | organizer_reviewsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * organizer_reviews update
   */
  export type organizer_reviewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * The data needed to update a organizer_reviews.
     */
    data: XOR<organizer_reviewsUpdateInput, organizer_reviewsUncheckedUpdateInput>
    /**
     * Choose, which organizer_reviews to update.
     */
    where: organizer_reviewsWhereUniqueInput
  }

  /**
   * organizer_reviews updateMany
   */
  export type organizer_reviewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update organizer_reviews.
     */
    data: XOR<organizer_reviewsUpdateManyMutationInput, organizer_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which organizer_reviews to update
     */
    where?: organizer_reviewsWhereInput
    /**
     * Limit how many organizer_reviews to update.
     */
    limit?: number
  }

  /**
   * organizer_reviews updateManyAndReturn
   */
  export type organizer_reviewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * The data used to update organizer_reviews.
     */
    data: XOR<organizer_reviewsUpdateManyMutationInput, organizer_reviewsUncheckedUpdateManyInput>
    /**
     * Filter which organizer_reviews to update
     */
    where?: organizer_reviewsWhereInput
    /**
     * Limit how many organizer_reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * organizer_reviews upsert
   */
  export type organizer_reviewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * The filter to search for the organizer_reviews to update in case it exists.
     */
    where: organizer_reviewsWhereUniqueInput
    /**
     * In case the organizer_reviews found by the `where` argument doesn't exist, create a new organizer_reviews with this data.
     */
    create: XOR<organizer_reviewsCreateInput, organizer_reviewsUncheckedCreateInput>
    /**
     * In case the organizer_reviews was found with the provided `where` argument, update it with this data.
     */
    update: XOR<organizer_reviewsUpdateInput, organizer_reviewsUncheckedUpdateInput>
  }

  /**
   * organizer_reviews delete
   */
  export type organizer_reviewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    /**
     * Filter which organizer_reviews to delete.
     */
    where: organizer_reviewsWhereUniqueInput
  }

  /**
   * organizer_reviews deleteMany
   */
  export type organizer_reviewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which organizer_reviews to delete
     */
    where?: organizer_reviewsWhereInput
    /**
     * Limit how many organizer_reviews to delete.
     */
    limit?: number
  }

  /**
   * organizer_reviews without action
   */
  export type organizer_reviewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
  }


  /**
   * Model event_table
   */

  export type AggregateEvent_table = {
    _count: Event_tableCountAggregateOutputType | null
    _avg: Event_tableAvgAggregateOutputType | null
    _sum: Event_tableSumAggregateOutputType | null
    _min: Event_tableMinAggregateOutputType | null
    _max: Event_tableMaxAggregateOutputType | null
  }

  export type Event_tableAvgAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    price: number | null
    seat_capacity: number | null
  }

  export type Event_tableSumAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    price: number | null
    seat_capacity: number | null
  }

  export type Event_tableMinAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    name: string | null
    price: number | null
    start_date: Date | null
    end_date: Date | null
    seat_capacity: number | null
    event_type: string | null
    created_at: Date | null
  }

  export type Event_tableMaxAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    name: string | null
    price: number | null
    start_date: Date | null
    end_date: Date | null
    seat_capacity: number | null
    event_type: string | null
    created_at: Date | null
  }

  export type Event_tableCountAggregateOutputType = {
    id: number
    organizer_id: number
    name: number
    price: number
    start_date: number
    end_date: number
    seat_capacity: number
    event_type: number
    created_at: number
    _all: number
  }


  export type Event_tableAvgAggregateInputType = {
    id?: true
    organizer_id?: true
    price?: true
    seat_capacity?: true
  }

  export type Event_tableSumAggregateInputType = {
    id?: true
    organizer_id?: true
    price?: true
    seat_capacity?: true
  }

  export type Event_tableMinAggregateInputType = {
    id?: true
    organizer_id?: true
    name?: true
    price?: true
    start_date?: true
    end_date?: true
    seat_capacity?: true
    event_type?: true
    created_at?: true
  }

  export type Event_tableMaxAggregateInputType = {
    id?: true
    organizer_id?: true
    name?: true
    price?: true
    start_date?: true
    end_date?: true
    seat_capacity?: true
    event_type?: true
    created_at?: true
  }

  export type Event_tableCountAggregateInputType = {
    id?: true
    organizer_id?: true
    name?: true
    price?: true
    start_date?: true
    end_date?: true
    seat_capacity?: true
    event_type?: true
    created_at?: true
    _all?: true
  }

  export type Event_tableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_table to aggregate.
     */
    where?: event_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_tables to fetch.
     */
    orderBy?: event_tableOrderByWithRelationInput | event_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: event_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned event_tables
    **/
    _count?: true | Event_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Event_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Event_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Event_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Event_tableMaxAggregateInputType
  }

  export type GetEvent_tableAggregateType<T extends Event_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent_table[P]>
      : GetScalarType<T[P], AggregateEvent_table[P]>
  }




  export type event_tableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_tableWhereInput
    orderBy?: event_tableOrderByWithAggregationInput | event_tableOrderByWithAggregationInput[]
    by: Event_tableScalarFieldEnum[] | Event_tableScalarFieldEnum
    having?: event_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Event_tableCountAggregateInputType | true
    _avg?: Event_tableAvgAggregateInputType
    _sum?: Event_tableSumAggregateInputType
    _min?: Event_tableMinAggregateInputType
    _max?: Event_tableMaxAggregateInputType
  }

  export type Event_tableGroupByOutputType = {
    id: number
    organizer_id: number
    name: string
    price: number
    start_date: Date
    end_date: Date
    seat_capacity: number
    event_type: string
    created_at: Date
    _count: Event_tableCountAggregateOutputType | null
    _avg: Event_tableAvgAggregateOutputType | null
    _sum: Event_tableSumAggregateOutputType | null
    _min: Event_tableMinAggregateOutputType | null
    _max: Event_tableMaxAggregateOutputType | null
  }

  type GetEvent_tableGroupByPayload<T extends event_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Event_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Event_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Event_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Event_tableGroupByOutputType[P]>
        }
      >
    >


  export type event_tableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    name?: boolean
    price?: boolean
    start_date?: boolean
    end_date?: boolean
    seat_capacity?: boolean
    event_type?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    organizer_reviews?: boolean | event_table$organizer_reviewsArgs<ExtArgs>
    ticket_holds?: boolean | event_table$ticket_holdsArgs<ExtArgs>
    ticket_type?: boolean | event_table$ticket_typeArgs<ExtArgs>
    event_attendees?: boolean | event_table$event_attendeesArgs<ExtArgs>
    transactions?: boolean | event_table$transactionsArgs<ExtArgs>
    voucher?: boolean | event_table$voucherArgs<ExtArgs>
    _count?: boolean | Event_tableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_table"]>

  export type event_tableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    name?: boolean
    price?: boolean
    start_date?: boolean
    end_date?: boolean
    seat_capacity?: boolean
    event_type?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_table"]>

  export type event_tableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    name?: boolean
    price?: boolean
    start_date?: boolean
    end_date?: boolean
    seat_capacity?: boolean
    event_type?: boolean
    created_at?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_table"]>

  export type event_tableSelectScalar = {
    id?: boolean
    organizer_id?: boolean
    name?: boolean
    price?: boolean
    start_date?: boolean
    end_date?: boolean
    seat_capacity?: boolean
    event_type?: boolean
    created_at?: boolean
  }

  export type event_tableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizer_id" | "name" | "price" | "start_date" | "end_date" | "seat_capacity" | "event_type" | "created_at", ExtArgs["result"]["event_table"]>
  export type event_tableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    organizer_reviews?: boolean | event_table$organizer_reviewsArgs<ExtArgs>
    ticket_holds?: boolean | event_table$ticket_holdsArgs<ExtArgs>
    ticket_type?: boolean | event_table$ticket_typeArgs<ExtArgs>
    event_attendees?: boolean | event_table$event_attendeesArgs<ExtArgs>
    transactions?: boolean | event_table$transactionsArgs<ExtArgs>
    voucher?: boolean | event_table$voucherArgs<ExtArgs>
    _count?: boolean | Event_tableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type event_tableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }
  export type event_tableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
  }

  export type $event_tablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "event_table"
    objects: {
      organizer: Prisma.$organizer_accountPayload<ExtArgs>
      organizer_reviews: Prisma.$organizer_reviewsPayload<ExtArgs>[]
      ticket_holds: Prisma.$ticket_holdsPayload<ExtArgs>[]
      ticket_type: Prisma.$ticket_typePayload<ExtArgs>[]
      event_attendees: Prisma.$event_attendeesPayload<ExtArgs>[]
      transactions: Prisma.$transactions_tablePayload<ExtArgs>[]
      voucher: Prisma.$voucher_tablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizer_id: number
      name: string
      price: number
      start_date: Date
      end_date: Date
      seat_capacity: number
      event_type: string
      created_at: Date
    }, ExtArgs["result"]["event_table"]>
    composites: {}
  }

  type event_tableGetPayload<S extends boolean | null | undefined | event_tableDefaultArgs> = $Result.GetResult<Prisma.$event_tablePayload, S>

  type event_tableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<event_tableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Event_tableCountAggregateInputType | true
    }

  export interface event_tableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['event_table'], meta: { name: 'event_table' } }
    /**
     * Find zero or one Event_table that matches the filter.
     * @param {event_tableFindUniqueArgs} args - Arguments to find a Event_table
     * @example
     * // Get one Event_table
     * const event_table = await prisma.event_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends event_tableFindUniqueArgs>(args: SelectSubset<T, event_tableFindUniqueArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event_table that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {event_tableFindUniqueOrThrowArgs} args - Arguments to find a Event_table
     * @example
     * // Get one Event_table
     * const event_table = await prisma.event_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends event_tableFindUniqueOrThrowArgs>(args: SelectSubset<T, event_tableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableFindFirstArgs} args - Arguments to find a Event_table
     * @example
     * // Get one Event_table
     * const event_table = await prisma.event_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends event_tableFindFirstArgs>(args?: SelectSubset<T, event_tableFindFirstArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableFindFirstOrThrowArgs} args - Arguments to find a Event_table
     * @example
     * // Get one Event_table
     * const event_table = await prisma.event_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends event_tableFindFirstOrThrowArgs>(args?: SelectSubset<T, event_tableFindFirstOrThrowArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Event_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Event_tables
     * const event_tables = await prisma.event_table.findMany()
     * 
     * // Get first 10 Event_tables
     * const event_tables = await prisma.event_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const event_tableWithIdOnly = await prisma.event_table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends event_tableFindManyArgs>(args?: SelectSubset<T, event_tableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event_table.
     * @param {event_tableCreateArgs} args - Arguments to create a Event_table.
     * @example
     * // Create one Event_table
     * const Event_table = await prisma.event_table.create({
     *   data: {
     *     // ... data to create a Event_table
     *   }
     * })
     * 
     */
    create<T extends event_tableCreateArgs>(args: SelectSubset<T, event_tableCreateArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Event_tables.
     * @param {event_tableCreateManyArgs} args - Arguments to create many Event_tables.
     * @example
     * // Create many Event_tables
     * const event_table = await prisma.event_table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends event_tableCreateManyArgs>(args?: SelectSubset<T, event_tableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Event_tables and returns the data saved in the database.
     * @param {event_tableCreateManyAndReturnArgs} args - Arguments to create many Event_tables.
     * @example
     * // Create many Event_tables
     * const event_table = await prisma.event_table.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Event_tables and only return the `id`
     * const event_tableWithIdOnly = await prisma.event_table.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends event_tableCreateManyAndReturnArgs>(args?: SelectSubset<T, event_tableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event_table.
     * @param {event_tableDeleteArgs} args - Arguments to delete one Event_table.
     * @example
     * // Delete one Event_table
     * const Event_table = await prisma.event_table.delete({
     *   where: {
     *     // ... filter to delete one Event_table
     *   }
     * })
     * 
     */
    delete<T extends event_tableDeleteArgs>(args: SelectSubset<T, event_tableDeleteArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event_table.
     * @param {event_tableUpdateArgs} args - Arguments to update one Event_table.
     * @example
     * // Update one Event_table
     * const event_table = await prisma.event_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends event_tableUpdateArgs>(args: SelectSubset<T, event_tableUpdateArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Event_tables.
     * @param {event_tableDeleteManyArgs} args - Arguments to filter Event_tables to delete.
     * @example
     * // Delete a few Event_tables
     * const { count } = await prisma.event_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends event_tableDeleteManyArgs>(args?: SelectSubset<T, event_tableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Event_tables
     * const event_table = await prisma.event_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends event_tableUpdateManyArgs>(args: SelectSubset<T, event_tableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_tables and returns the data updated in the database.
     * @param {event_tableUpdateManyAndReturnArgs} args - Arguments to update many Event_tables.
     * @example
     * // Update many Event_tables
     * const event_table = await prisma.event_table.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Event_tables and only return the `id`
     * const event_tableWithIdOnly = await prisma.event_table.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends event_tableUpdateManyAndReturnArgs>(args: SelectSubset<T, event_tableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event_table.
     * @param {event_tableUpsertArgs} args - Arguments to update or create a Event_table.
     * @example
     * // Update or create a Event_table
     * const event_table = await prisma.event_table.upsert({
     *   create: {
     *     // ... data to create a Event_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event_table we want to update
     *   }
     * })
     */
    upsert<T extends event_tableUpsertArgs>(args: SelectSubset<T, event_tableUpsertArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Event_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableCountArgs} args - Arguments to filter Event_tables to count.
     * @example
     * // Count the number of Event_tables
     * const count = await prisma.event_table.count({
     *   where: {
     *     // ... the filter for the Event_tables we want to count
     *   }
     * })
    **/
    count<T extends event_tableCountArgs>(
      args?: Subset<T, event_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Event_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Event_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Event_tableAggregateArgs>(args: Subset<T, Event_tableAggregateArgs>): Prisma.PrismaPromise<GetEvent_tableAggregateType<T>>

    /**
     * Group by Event_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends event_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: event_tableGroupByArgs['orderBy'] }
        : { orderBy?: event_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, event_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvent_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the event_table model
   */
  readonly fields: event_tableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for event_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__event_tableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends organizer_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, organizer_accountDefaultArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organizer_reviews<T extends event_table$organizer_reviewsArgs<ExtArgs> = {}>(args?: Subset<T, event_table$organizer_reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$organizer_reviewsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_holds<T extends event_table$ticket_holdsArgs<ExtArgs> = {}>(args?: Subset<T, event_table$ticket_holdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ticket_type<T extends event_table$ticket_typeArgs<ExtArgs> = {}>(args?: Subset<T, event_table$ticket_typeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    event_attendees<T extends event_table$event_attendeesArgs<ExtArgs> = {}>(args?: Subset<T, event_table$event_attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends event_table$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, event_table$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    voucher<T extends event_table$voucherArgs<ExtArgs> = {}>(args?: Subset<T, event_table$voucherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the event_table model
   */
  interface event_tableFieldRefs {
    readonly id: FieldRef<"event_table", 'Int'>
    readonly organizer_id: FieldRef<"event_table", 'Int'>
    readonly name: FieldRef<"event_table", 'String'>
    readonly price: FieldRef<"event_table", 'Int'>
    readonly start_date: FieldRef<"event_table", 'DateTime'>
    readonly end_date: FieldRef<"event_table", 'DateTime'>
    readonly seat_capacity: FieldRef<"event_table", 'Int'>
    readonly event_type: FieldRef<"event_table", 'String'>
    readonly created_at: FieldRef<"event_table", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * event_table findUnique
   */
  export type event_tableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter, which event_table to fetch.
     */
    where: event_tableWhereUniqueInput
  }

  /**
   * event_table findUniqueOrThrow
   */
  export type event_tableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter, which event_table to fetch.
     */
    where: event_tableWhereUniqueInput
  }

  /**
   * event_table findFirst
   */
  export type event_tableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter, which event_table to fetch.
     */
    where?: event_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_tables to fetch.
     */
    orderBy?: event_tableOrderByWithRelationInput | event_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_tables.
     */
    cursor?: event_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_tables.
     */
    distinct?: Event_tableScalarFieldEnum | Event_tableScalarFieldEnum[]
  }

  /**
   * event_table findFirstOrThrow
   */
  export type event_tableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter, which event_table to fetch.
     */
    where?: event_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_tables to fetch.
     */
    orderBy?: event_tableOrderByWithRelationInput | event_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_tables.
     */
    cursor?: event_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_tables.
     */
    distinct?: Event_tableScalarFieldEnum | Event_tableScalarFieldEnum[]
  }

  /**
   * event_table findMany
   */
  export type event_tableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter, which event_tables to fetch.
     */
    where?: event_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_tables to fetch.
     */
    orderBy?: event_tableOrderByWithRelationInput | event_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing event_tables.
     */
    cursor?: event_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_tables.
     */
    skip?: number
    distinct?: Event_tableScalarFieldEnum | Event_tableScalarFieldEnum[]
  }

  /**
   * event_table create
   */
  export type event_tableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * The data needed to create a event_table.
     */
    data: XOR<event_tableCreateInput, event_tableUncheckedCreateInput>
  }

  /**
   * event_table createMany
   */
  export type event_tableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many event_tables.
     */
    data: event_tableCreateManyInput | event_tableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * event_table createManyAndReturn
   */
  export type event_tableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * The data used to create many event_tables.
     */
    data: event_tableCreateManyInput | event_tableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_table update
   */
  export type event_tableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * The data needed to update a event_table.
     */
    data: XOR<event_tableUpdateInput, event_tableUncheckedUpdateInput>
    /**
     * Choose, which event_table to update.
     */
    where: event_tableWhereUniqueInput
  }

  /**
   * event_table updateMany
   */
  export type event_tableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update event_tables.
     */
    data: XOR<event_tableUpdateManyMutationInput, event_tableUncheckedUpdateManyInput>
    /**
     * Filter which event_tables to update
     */
    where?: event_tableWhereInput
    /**
     * Limit how many event_tables to update.
     */
    limit?: number
  }

  /**
   * event_table updateManyAndReturn
   */
  export type event_tableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * The data used to update event_tables.
     */
    data: XOR<event_tableUpdateManyMutationInput, event_tableUncheckedUpdateManyInput>
    /**
     * Filter which event_tables to update
     */
    where?: event_tableWhereInput
    /**
     * Limit how many event_tables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_table upsert
   */
  export type event_tableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * The filter to search for the event_table to update in case it exists.
     */
    where: event_tableWhereUniqueInput
    /**
     * In case the event_table found by the `where` argument doesn't exist, create a new event_table with this data.
     */
    create: XOR<event_tableCreateInput, event_tableUncheckedCreateInput>
    /**
     * In case the event_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<event_tableUpdateInput, event_tableUncheckedUpdateInput>
  }

  /**
   * event_table delete
   */
  export type event_tableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
    /**
     * Filter which event_table to delete.
     */
    where: event_tableWhereUniqueInput
  }

  /**
   * event_table deleteMany
   */
  export type event_tableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_tables to delete
     */
    where?: event_tableWhereInput
    /**
     * Limit how many event_tables to delete.
     */
    limit?: number
  }

  /**
   * event_table.organizer_reviews
   */
  export type event_table$organizer_reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the organizer_reviews
     */
    select?: organizer_reviewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the organizer_reviews
     */
    omit?: organizer_reviewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: organizer_reviewsInclude<ExtArgs> | null
    where?: organizer_reviewsWhereInput
    orderBy?: organizer_reviewsOrderByWithRelationInput | organizer_reviewsOrderByWithRelationInput[]
    cursor?: organizer_reviewsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Organizer_reviewsScalarFieldEnum | Organizer_reviewsScalarFieldEnum[]
  }

  /**
   * event_table.ticket_holds
   */
  export type event_table$ticket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    where?: ticket_holdsWhereInput
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    cursor?: ticket_holdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * event_table.ticket_type
   */
  export type event_table$ticket_typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    where?: ticket_typeWhereInput
    orderBy?: ticket_typeOrderByWithRelationInput | ticket_typeOrderByWithRelationInput[]
    cursor?: ticket_typeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * event_table.event_attendees
   */
  export type event_table$event_attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    where?: event_attendeesWhereInput
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    cursor?: event_attendeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * event_table.transactions
   */
  export type event_table$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    where?: transactions_tableWhereInput
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    cursor?: transactions_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * event_table.voucher
   */
  export type event_table$voucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    where?: voucher_tableWhereInput
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    cursor?: voucher_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Voucher_tableScalarFieldEnum | Voucher_tableScalarFieldEnum[]
  }

  /**
   * event_table without action
   */
  export type event_tableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_table
     */
    select?: event_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_table
     */
    omit?: event_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_tableInclude<ExtArgs> | null
  }


  /**
   * Model ticket_holds
   */

  export type AggregateTicket_holds = {
    _count: Ticket_holdsCountAggregateOutputType | null
    _avg: Ticket_holdsAvgAggregateOutputType | null
    _sum: Ticket_holdsSumAggregateOutputType | null
    _min: Ticket_holdsMinAggregateOutputType | null
    _max: Ticket_holdsMaxAggregateOutputType | null
  }

  export type Ticket_holdsAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
    user_id: number | null
    ticket_type_id: number | null
    ticket_quantity: number | null
    transactions_id: number | null
  }

  export type Ticket_holdsSumAggregateOutputType = {
    id: number | null
    event_id: number | null
    user_id: number | null
    ticket_type_id: number | null
    ticket_quantity: number | null
    transactions_id: number | null
  }

  export type Ticket_holdsMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    user_id: number | null
    ticket_type_id: number | null
    ticket_quantity: number | null
    held_at: Date | null
    expires_at: Date | null
    transactions_id: number | null
    status: $Enums.coupon_status | null
  }

  export type Ticket_holdsMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    user_id: number | null
    ticket_type_id: number | null
    ticket_quantity: number | null
    held_at: Date | null
    expires_at: Date | null
    transactions_id: number | null
    status: $Enums.coupon_status | null
  }

  export type Ticket_holdsCountAggregateOutputType = {
    id: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: number
    expires_at: number
    transactions_id: number
    status: number
    _all: number
  }


  export type Ticket_holdsAvgAggregateInputType = {
    id?: true
    event_id?: true
    user_id?: true
    ticket_type_id?: true
    ticket_quantity?: true
    transactions_id?: true
  }

  export type Ticket_holdsSumAggregateInputType = {
    id?: true
    event_id?: true
    user_id?: true
    ticket_type_id?: true
    ticket_quantity?: true
    transactions_id?: true
  }

  export type Ticket_holdsMinAggregateInputType = {
    id?: true
    event_id?: true
    user_id?: true
    ticket_type_id?: true
    ticket_quantity?: true
    held_at?: true
    expires_at?: true
    transactions_id?: true
    status?: true
  }

  export type Ticket_holdsMaxAggregateInputType = {
    id?: true
    event_id?: true
    user_id?: true
    ticket_type_id?: true
    ticket_quantity?: true
    held_at?: true
    expires_at?: true
    transactions_id?: true
    status?: true
  }

  export type Ticket_holdsCountAggregateInputType = {
    id?: true
    event_id?: true
    user_id?: true
    ticket_type_id?: true
    ticket_quantity?: true
    held_at?: true
    expires_at?: true
    transactions_id?: true
    status?: true
    _all?: true
  }

  export type Ticket_holdsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_holds to aggregate.
     */
    where?: ticket_holdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_holds to fetch.
     */
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_holdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_holds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_holds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_holds
    **/
    _count?: true | Ticket_holdsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_holdsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_holdsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_holdsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_holdsMaxAggregateInputType
  }

  export type GetTicket_holdsAggregateType<T extends Ticket_holdsAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_holds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_holds[P]>
      : GetScalarType<T[P], AggregateTicket_holds[P]>
  }




  export type ticket_holdsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_holdsWhereInput
    orderBy?: ticket_holdsOrderByWithAggregationInput | ticket_holdsOrderByWithAggregationInput[]
    by: Ticket_holdsScalarFieldEnum[] | Ticket_holdsScalarFieldEnum
    having?: ticket_holdsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_holdsCountAggregateInputType | true
    _avg?: Ticket_holdsAvgAggregateInputType
    _sum?: Ticket_holdsSumAggregateInputType
    _min?: Ticket_holdsMinAggregateInputType
    _max?: Ticket_holdsMaxAggregateInputType
  }

  export type Ticket_holdsGroupByOutputType = {
    id: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date
    expires_at: Date
    transactions_id: number
    status: $Enums.coupon_status
    _count: Ticket_holdsCountAggregateOutputType | null
    _avg: Ticket_holdsAvgAggregateOutputType | null
    _sum: Ticket_holdsSumAggregateOutputType | null
    _min: Ticket_holdsMinAggregateOutputType | null
    _max: Ticket_holdsMaxAggregateOutputType | null
  }

  type GetTicket_holdsGroupByPayload<T extends ticket_holdsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_holdsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_holdsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_holdsGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_holdsGroupByOutputType[P]>
        }
      >
    >


  export type ticket_holdsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    user_id?: boolean
    ticket_type_id?: boolean
    ticket_quantity?: boolean
    held_at?: boolean
    expires_at?: boolean
    transactions_id?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_holds"]>

  export type ticket_holdsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    user_id?: boolean
    ticket_type_id?: boolean
    ticket_quantity?: boolean
    held_at?: boolean
    expires_at?: boolean
    transactions_id?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_holds"]>

  export type ticket_holdsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    user_id?: boolean
    ticket_type_id?: boolean
    ticket_quantity?: boolean
    held_at?: boolean
    expires_at?: boolean
    transactions_id?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_holds"]>

  export type ticket_holdsSelectScalar = {
    id?: boolean
    event_id?: boolean
    user_id?: boolean
    ticket_type_id?: boolean
    ticket_quantity?: boolean
    held_at?: boolean
    expires_at?: boolean
    transactions_id?: boolean
    status?: boolean
  }

  export type ticket_holdsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "user_id" | "ticket_type_id" | "ticket_quantity" | "held_at" | "expires_at" | "transactions_id" | "status", ExtArgs["result"]["ticket_holds"]>
  export type ticket_holdsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }
  export type ticket_holdsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }
  export type ticket_holdsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    ticket_type?: boolean | ticket_typeDefaultArgs<ExtArgs>
    transactions?: boolean | transactions_tableDefaultArgs<ExtArgs>
  }

  export type $ticket_holdsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_holds"
    objects: {
      event: Prisma.$event_tablePayload<ExtArgs>
      user: Prisma.$user_accountPayload<ExtArgs>
      ticket_type: Prisma.$ticket_typePayload<ExtArgs>
      transactions: Prisma.$transactions_tablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number
      user_id: number
      ticket_type_id: number
      ticket_quantity: number
      held_at: Date
      expires_at: Date
      transactions_id: number
      status: $Enums.coupon_status
    }, ExtArgs["result"]["ticket_holds"]>
    composites: {}
  }

  type ticket_holdsGetPayload<S extends boolean | null | undefined | ticket_holdsDefaultArgs> = $Result.GetResult<Prisma.$ticket_holdsPayload, S>

  type ticket_holdsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_holdsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_holdsCountAggregateInputType | true
    }

  export interface ticket_holdsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_holds'], meta: { name: 'ticket_holds' } }
    /**
     * Find zero or one Ticket_holds that matches the filter.
     * @param {ticket_holdsFindUniqueArgs} args - Arguments to find a Ticket_holds
     * @example
     * // Get one Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_holdsFindUniqueArgs>(args: SelectSubset<T, ticket_holdsFindUniqueArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_holds that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_holdsFindUniqueOrThrowArgs} args - Arguments to find a Ticket_holds
     * @example
     * // Get one Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_holdsFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_holdsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_holds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsFindFirstArgs} args - Arguments to find a Ticket_holds
     * @example
     * // Get one Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_holdsFindFirstArgs>(args?: SelectSubset<T, ticket_holdsFindFirstArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_holds that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsFindFirstOrThrowArgs} args - Arguments to find a Ticket_holds
     * @example
     * // Get one Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_holdsFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_holdsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_holds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findMany()
     * 
     * // Get first 10 Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_holdsWithIdOnly = await prisma.ticket_holds.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_holdsFindManyArgs>(args?: SelectSubset<T, ticket_holdsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_holds.
     * @param {ticket_holdsCreateArgs} args - Arguments to create a Ticket_holds.
     * @example
     * // Create one Ticket_holds
     * const Ticket_holds = await prisma.ticket_holds.create({
     *   data: {
     *     // ... data to create a Ticket_holds
     *   }
     * })
     * 
     */
    create<T extends ticket_holdsCreateArgs>(args: SelectSubset<T, ticket_holdsCreateArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_holds.
     * @param {ticket_holdsCreateManyArgs} args - Arguments to create many Ticket_holds.
     * @example
     * // Create many Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_holdsCreateManyArgs>(args?: SelectSubset<T, ticket_holdsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ticket_holds and returns the data saved in the database.
     * @param {ticket_holdsCreateManyAndReturnArgs} args - Arguments to create many Ticket_holds.
     * @example
     * // Create many Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ticket_holds and only return the `id`
     * const ticket_holdsWithIdOnly = await prisma.ticket_holds.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticket_holdsCreateManyAndReturnArgs>(args?: SelectSubset<T, ticket_holdsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket_holds.
     * @param {ticket_holdsDeleteArgs} args - Arguments to delete one Ticket_holds.
     * @example
     * // Delete one Ticket_holds
     * const Ticket_holds = await prisma.ticket_holds.delete({
     *   where: {
     *     // ... filter to delete one Ticket_holds
     *   }
     * })
     * 
     */
    delete<T extends ticket_holdsDeleteArgs>(args: SelectSubset<T, ticket_holdsDeleteArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_holds.
     * @param {ticket_holdsUpdateArgs} args - Arguments to update one Ticket_holds.
     * @example
     * // Update one Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_holdsUpdateArgs>(args: SelectSubset<T, ticket_holdsUpdateArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_holds.
     * @param {ticket_holdsDeleteManyArgs} args - Arguments to filter Ticket_holds to delete.
     * @example
     * // Delete a few Ticket_holds
     * const { count } = await prisma.ticket_holds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_holdsDeleteManyArgs>(args?: SelectSubset<T, ticket_holdsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_holds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_holdsUpdateManyArgs>(args: SelectSubset<T, ticket_holdsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_holds and returns the data updated in the database.
     * @param {ticket_holdsUpdateManyAndReturnArgs} args - Arguments to update many Ticket_holds.
     * @example
     * // Update many Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ticket_holds and only return the `id`
     * const ticket_holdsWithIdOnly = await prisma.ticket_holds.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticket_holdsUpdateManyAndReturnArgs>(args: SelectSubset<T, ticket_holdsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket_holds.
     * @param {ticket_holdsUpsertArgs} args - Arguments to update or create a Ticket_holds.
     * @example
     * // Update or create a Ticket_holds
     * const ticket_holds = await prisma.ticket_holds.upsert({
     *   create: {
     *     // ... data to create a Ticket_holds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_holds we want to update
     *   }
     * })
     */
    upsert<T extends ticket_holdsUpsertArgs>(args: SelectSubset<T, ticket_holdsUpsertArgs<ExtArgs>>): Prisma__ticket_holdsClient<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_holds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsCountArgs} args - Arguments to filter Ticket_holds to count.
     * @example
     * // Count the number of Ticket_holds
     * const count = await prisma.ticket_holds.count({
     *   where: {
     *     // ... the filter for the Ticket_holds we want to count
     *   }
     * })
    **/
    count<T extends ticket_holdsCountArgs>(
      args?: Subset<T, ticket_holdsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_holdsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_holds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_holdsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_holdsAggregateArgs>(args: Subset<T, Ticket_holdsAggregateArgs>): Prisma.PrismaPromise<GetTicket_holdsAggregateType<T>>

    /**
     * Group by Ticket_holds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_holdsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_holdsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_holdsGroupByArgs['orderBy'] }
        : { orderBy?: ticket_holdsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_holdsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_holdsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_holds model
   */
  readonly fields: ticket_holdsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_holds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_holdsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket_type<T extends ticket_typeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticket_typeDefaultArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends transactions_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, transactions_tableDefaultArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_holds model
   */
  interface ticket_holdsFieldRefs {
    readonly id: FieldRef<"ticket_holds", 'Int'>
    readonly event_id: FieldRef<"ticket_holds", 'Int'>
    readonly user_id: FieldRef<"ticket_holds", 'Int'>
    readonly ticket_type_id: FieldRef<"ticket_holds", 'Int'>
    readonly ticket_quantity: FieldRef<"ticket_holds", 'Int'>
    readonly held_at: FieldRef<"ticket_holds", 'DateTime'>
    readonly expires_at: FieldRef<"ticket_holds", 'DateTime'>
    readonly transactions_id: FieldRef<"ticket_holds", 'Int'>
    readonly status: FieldRef<"ticket_holds", 'coupon_status'>
  }
    

  // Custom InputTypes
  /**
   * ticket_holds findUnique
   */
  export type ticket_holdsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_holds to fetch.
     */
    where: ticket_holdsWhereUniqueInput
  }

  /**
   * ticket_holds findUniqueOrThrow
   */
  export type ticket_holdsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_holds to fetch.
     */
    where: ticket_holdsWhereUniqueInput
  }

  /**
   * ticket_holds findFirst
   */
  export type ticket_holdsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_holds to fetch.
     */
    where?: ticket_holdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_holds to fetch.
     */
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_holds.
     */
    cursor?: ticket_holdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_holds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_holds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_holds.
     */
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * ticket_holds findFirstOrThrow
   */
  export type ticket_holdsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_holds to fetch.
     */
    where?: ticket_holdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_holds to fetch.
     */
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_holds.
     */
    cursor?: ticket_holdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_holds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_holds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_holds.
     */
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * ticket_holds findMany
   */
  export type ticket_holdsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter, which ticket_holds to fetch.
     */
    where?: ticket_holdsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_holds to fetch.
     */
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_holds.
     */
    cursor?: ticket_holdsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_holds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_holds.
     */
    skip?: number
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * ticket_holds create
   */
  export type ticket_holdsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_holds.
     */
    data: XOR<ticket_holdsCreateInput, ticket_holdsUncheckedCreateInput>
  }

  /**
   * ticket_holds createMany
   */
  export type ticket_holdsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_holds.
     */
    data: ticket_holdsCreateManyInput | ticket_holdsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_holds createManyAndReturn
   */
  export type ticket_holdsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * The data used to create many ticket_holds.
     */
    data: ticket_holdsCreateManyInput | ticket_holdsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket_holds update
   */
  export type ticket_holdsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_holds.
     */
    data: XOR<ticket_holdsUpdateInput, ticket_holdsUncheckedUpdateInput>
    /**
     * Choose, which ticket_holds to update.
     */
    where: ticket_holdsWhereUniqueInput
  }

  /**
   * ticket_holds updateMany
   */
  export type ticket_holdsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_holds.
     */
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyInput>
    /**
     * Filter which ticket_holds to update
     */
    where?: ticket_holdsWhereInput
    /**
     * Limit how many ticket_holds to update.
     */
    limit?: number
  }

  /**
   * ticket_holds updateManyAndReturn
   */
  export type ticket_holdsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * The data used to update ticket_holds.
     */
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyInput>
    /**
     * Filter which ticket_holds to update
     */
    where?: ticket_holdsWhereInput
    /**
     * Limit how many ticket_holds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket_holds upsert
   */
  export type ticket_holdsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_holds to update in case it exists.
     */
    where: ticket_holdsWhereUniqueInput
    /**
     * In case the ticket_holds found by the `where` argument doesn't exist, create a new ticket_holds with this data.
     */
    create: XOR<ticket_holdsCreateInput, ticket_holdsUncheckedCreateInput>
    /**
     * In case the ticket_holds was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_holdsUpdateInput, ticket_holdsUncheckedUpdateInput>
  }

  /**
   * ticket_holds delete
   */
  export type ticket_holdsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    /**
     * Filter which ticket_holds to delete.
     */
    where: ticket_holdsWhereUniqueInput
  }

  /**
   * ticket_holds deleteMany
   */
  export type ticket_holdsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_holds to delete
     */
    where?: ticket_holdsWhereInput
    /**
     * Limit how many ticket_holds to delete.
     */
    limit?: number
  }

  /**
   * ticket_holds without action
   */
  export type ticket_holdsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
  }


  /**
   * Model ticket_type
   */

  export type AggregateTicket_type = {
    _count: Ticket_typeCountAggregateOutputType | null
    _avg: Ticket_typeAvgAggregateOutputType | null
    _sum: Ticket_typeSumAggregateOutputType | null
    _min: Ticket_typeMinAggregateOutputType | null
    _max: Ticket_typeMaxAggregateOutputType | null
  }

  export type Ticket_typeAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
    price: number | null
    quota: number | null
  }

  export type Ticket_typeSumAggregateOutputType = {
    id: number | null
    event_id: number | null
    price: number | null
    quota: number | null
  }

  export type Ticket_typeMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    type_name: string | null
    price: number | null
    quota: number | null
  }

  export type Ticket_typeMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    type_name: string | null
    price: number | null
    quota: number | null
  }

  export type Ticket_typeCountAggregateOutputType = {
    id: number
    event_id: number
    type_name: number
    price: number
    quota: number
    _all: number
  }


  export type Ticket_typeAvgAggregateInputType = {
    id?: true
    event_id?: true
    price?: true
    quota?: true
  }

  export type Ticket_typeSumAggregateInputType = {
    id?: true
    event_id?: true
    price?: true
    quota?: true
  }

  export type Ticket_typeMinAggregateInputType = {
    id?: true
    event_id?: true
    type_name?: true
    price?: true
    quota?: true
  }

  export type Ticket_typeMaxAggregateInputType = {
    id?: true
    event_id?: true
    type_name?: true
    price?: true
    quota?: true
  }

  export type Ticket_typeCountAggregateInputType = {
    id?: true
    event_id?: true
    type_name?: true
    price?: true
    quota?: true
    _all?: true
  }

  export type Ticket_typeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_type to aggregate.
     */
    where?: ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_types to fetch.
     */
    orderBy?: ticket_typeOrderByWithRelationInput | ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ticket_types
    **/
    _count?: true | Ticket_typeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ticket_typeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ticket_typeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ticket_typeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ticket_typeMaxAggregateInputType
  }

  export type GetTicket_typeAggregateType<T extends Ticket_typeAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket_type]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket_type[P]>
      : GetScalarType<T[P], AggregateTicket_type[P]>
  }




  export type ticket_typeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticket_typeWhereInput
    orderBy?: ticket_typeOrderByWithAggregationInput | ticket_typeOrderByWithAggregationInput[]
    by: Ticket_typeScalarFieldEnum[] | Ticket_typeScalarFieldEnum
    having?: ticket_typeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ticket_typeCountAggregateInputType | true
    _avg?: Ticket_typeAvgAggregateInputType
    _sum?: Ticket_typeSumAggregateInputType
    _min?: Ticket_typeMinAggregateInputType
    _max?: Ticket_typeMaxAggregateInputType
  }

  export type Ticket_typeGroupByOutputType = {
    id: number
    event_id: number
    type_name: string
    price: number
    quota: number
    _count: Ticket_typeCountAggregateOutputType | null
    _avg: Ticket_typeAvgAggregateOutputType | null
    _sum: Ticket_typeSumAggregateOutputType | null
    _min: Ticket_typeMinAggregateOutputType | null
    _max: Ticket_typeMaxAggregateOutputType | null
  }

  type GetTicket_typeGroupByPayload<T extends ticket_typeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ticket_typeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ticket_typeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ticket_typeGroupByOutputType[P]>
            : GetScalarType<T[P], Ticket_typeGroupByOutputType[P]>
        }
      >
    >


  export type ticket_typeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    type_name?: boolean
    price?: boolean
    quota?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    ticket_holds?: boolean | ticket_type$ticket_holdsArgs<ExtArgs>
    _count?: boolean | Ticket_typeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_type"]>

  export type ticket_typeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    type_name?: boolean
    price?: boolean
    quota?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_type"]>

  export type ticket_typeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    type_name?: boolean
    price?: boolean
    quota?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ticket_type"]>

  export type ticket_typeSelectScalar = {
    id?: boolean
    event_id?: boolean
    type_name?: boolean
    price?: boolean
    quota?: boolean
  }

  export type ticket_typeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "type_name" | "price" | "quota", ExtArgs["result"]["ticket_type"]>
  export type ticket_typeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    ticket_holds?: boolean | ticket_type$ticket_holdsArgs<ExtArgs>
    _count?: boolean | Ticket_typeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ticket_typeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }
  export type ticket_typeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }

  export type $ticket_typePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ticket_type"
    objects: {
      event: Prisma.$event_tablePayload<ExtArgs>
      ticket_holds: Prisma.$ticket_holdsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number
      type_name: string
      price: number
      quota: number
    }, ExtArgs["result"]["ticket_type"]>
    composites: {}
  }

  type ticket_typeGetPayload<S extends boolean | null | undefined | ticket_typeDefaultArgs> = $Result.GetResult<Prisma.$ticket_typePayload, S>

  type ticket_typeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ticket_typeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ticket_typeCountAggregateInputType | true
    }

  export interface ticket_typeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ticket_type'], meta: { name: 'ticket_type' } }
    /**
     * Find zero or one Ticket_type that matches the filter.
     * @param {ticket_typeFindUniqueArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticket_typeFindUniqueArgs>(args: SelectSubset<T, ticket_typeFindUniqueArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ticket_type that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ticket_typeFindUniqueOrThrowArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticket_typeFindUniqueOrThrowArgs>(args: SelectSubset<T, ticket_typeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeFindFirstArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticket_typeFindFirstArgs>(args?: SelectSubset<T, ticket_typeFindFirstArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ticket_type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeFindFirstOrThrowArgs} args - Arguments to find a Ticket_type
     * @example
     * // Get one Ticket_type
     * const ticket_type = await prisma.ticket_type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticket_typeFindFirstOrThrowArgs>(args?: SelectSubset<T, ticket_typeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ticket_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ticket_types
     * const ticket_types = await prisma.ticket_type.findMany()
     * 
     * // Get first 10 Ticket_types
     * const ticket_types = await prisma.ticket_type.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticket_typeWithIdOnly = await prisma.ticket_type.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticket_typeFindManyArgs>(args?: SelectSubset<T, ticket_typeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ticket_type.
     * @param {ticket_typeCreateArgs} args - Arguments to create a Ticket_type.
     * @example
     * // Create one Ticket_type
     * const Ticket_type = await prisma.ticket_type.create({
     *   data: {
     *     // ... data to create a Ticket_type
     *   }
     * })
     * 
     */
    create<T extends ticket_typeCreateArgs>(args: SelectSubset<T, ticket_typeCreateArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ticket_types.
     * @param {ticket_typeCreateManyArgs} args - Arguments to create many Ticket_types.
     * @example
     * // Create many Ticket_types
     * const ticket_type = await prisma.ticket_type.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticket_typeCreateManyArgs>(args?: SelectSubset<T, ticket_typeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ticket_types and returns the data saved in the database.
     * @param {ticket_typeCreateManyAndReturnArgs} args - Arguments to create many Ticket_types.
     * @example
     * // Create many Ticket_types
     * const ticket_type = await prisma.ticket_type.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ticket_types and only return the `id`
     * const ticket_typeWithIdOnly = await prisma.ticket_type.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticket_typeCreateManyAndReturnArgs>(args?: SelectSubset<T, ticket_typeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ticket_type.
     * @param {ticket_typeDeleteArgs} args - Arguments to delete one Ticket_type.
     * @example
     * // Delete one Ticket_type
     * const Ticket_type = await prisma.ticket_type.delete({
     *   where: {
     *     // ... filter to delete one Ticket_type
     *   }
     * })
     * 
     */
    delete<T extends ticket_typeDeleteArgs>(args: SelectSubset<T, ticket_typeDeleteArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ticket_type.
     * @param {ticket_typeUpdateArgs} args - Arguments to update one Ticket_type.
     * @example
     * // Update one Ticket_type
     * const ticket_type = await prisma.ticket_type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticket_typeUpdateArgs>(args: SelectSubset<T, ticket_typeUpdateArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ticket_types.
     * @param {ticket_typeDeleteManyArgs} args - Arguments to filter Ticket_types to delete.
     * @example
     * // Delete a few Ticket_types
     * const { count } = await prisma.ticket_type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticket_typeDeleteManyArgs>(args?: SelectSubset<T, ticket_typeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ticket_types
     * const ticket_type = await prisma.ticket_type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticket_typeUpdateManyArgs>(args: SelectSubset<T, ticket_typeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ticket_types and returns the data updated in the database.
     * @param {ticket_typeUpdateManyAndReturnArgs} args - Arguments to update many Ticket_types.
     * @example
     * // Update many Ticket_types
     * const ticket_type = await prisma.ticket_type.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ticket_types and only return the `id`
     * const ticket_typeWithIdOnly = await prisma.ticket_type.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ticket_typeUpdateManyAndReturnArgs>(args: SelectSubset<T, ticket_typeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ticket_type.
     * @param {ticket_typeUpsertArgs} args - Arguments to update or create a Ticket_type.
     * @example
     * // Update or create a Ticket_type
     * const ticket_type = await prisma.ticket_type.upsert({
     *   create: {
     *     // ... data to create a Ticket_type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket_type we want to update
     *   }
     * })
     */
    upsert<T extends ticket_typeUpsertArgs>(args: SelectSubset<T, ticket_typeUpsertArgs<ExtArgs>>): Prisma__ticket_typeClient<$Result.GetResult<Prisma.$ticket_typePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ticket_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeCountArgs} args - Arguments to filter Ticket_types to count.
     * @example
     * // Count the number of Ticket_types
     * const count = await prisma.ticket_type.count({
     *   where: {
     *     // ... the filter for the Ticket_types we want to count
     *   }
     * })
    **/
    count<T extends ticket_typeCountArgs>(
      args?: Subset<T, ticket_typeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ticket_typeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ticket_typeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ticket_typeAggregateArgs>(args: Subset<T, Ticket_typeAggregateArgs>): Prisma.PrismaPromise<GetTicket_typeAggregateType<T>>

    /**
     * Group by Ticket_type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticket_typeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticket_typeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticket_typeGroupByArgs['orderBy'] }
        : { orderBy?: ticket_typeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticket_typeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicket_typeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ticket_type model
   */
  readonly fields: ticket_typeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ticket_type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticket_typeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket_holds<T extends ticket_type$ticket_holdsArgs<ExtArgs> = {}>(args?: Subset<T, ticket_type$ticket_holdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ticket_type model
   */
  interface ticket_typeFieldRefs {
    readonly id: FieldRef<"ticket_type", 'Int'>
    readonly event_id: FieldRef<"ticket_type", 'Int'>
    readonly type_name: FieldRef<"ticket_type", 'String'>
    readonly price: FieldRef<"ticket_type", 'Int'>
    readonly quota: FieldRef<"ticket_type", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ticket_type findUnique
   */
  export type ticket_typeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which ticket_type to fetch.
     */
    where: ticket_typeWhereUniqueInput
  }

  /**
   * ticket_type findUniqueOrThrow
   */
  export type ticket_typeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which ticket_type to fetch.
     */
    where: ticket_typeWhereUniqueInput
  }

  /**
   * ticket_type findFirst
   */
  export type ticket_typeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which ticket_type to fetch.
     */
    where?: ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_types to fetch.
     */
    orderBy?: ticket_typeOrderByWithRelationInput | ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_types.
     */
    cursor?: ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_types.
     */
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * ticket_type findFirstOrThrow
   */
  export type ticket_typeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which ticket_type to fetch.
     */
    where?: ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_types to fetch.
     */
    orderBy?: ticket_typeOrderByWithRelationInput | ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ticket_types.
     */
    cursor?: ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ticket_types.
     */
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * ticket_type findMany
   */
  export type ticket_typeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter, which ticket_types to fetch.
     */
    where?: ticket_typeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ticket_types to fetch.
     */
    orderBy?: ticket_typeOrderByWithRelationInput | ticket_typeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ticket_types.
     */
    cursor?: ticket_typeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ticket_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ticket_types.
     */
    skip?: number
    distinct?: Ticket_typeScalarFieldEnum | Ticket_typeScalarFieldEnum[]
  }

  /**
   * ticket_type create
   */
  export type ticket_typeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * The data needed to create a ticket_type.
     */
    data: XOR<ticket_typeCreateInput, ticket_typeUncheckedCreateInput>
  }

  /**
   * ticket_type createMany
   */
  export type ticket_typeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ticket_types.
     */
    data: ticket_typeCreateManyInput | ticket_typeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ticket_type createManyAndReturn
   */
  export type ticket_typeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * The data used to create many ticket_types.
     */
    data: ticket_typeCreateManyInput | ticket_typeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket_type update
   */
  export type ticket_typeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * The data needed to update a ticket_type.
     */
    data: XOR<ticket_typeUpdateInput, ticket_typeUncheckedUpdateInput>
    /**
     * Choose, which ticket_type to update.
     */
    where: ticket_typeWhereUniqueInput
  }

  /**
   * ticket_type updateMany
   */
  export type ticket_typeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ticket_types.
     */
    data: XOR<ticket_typeUpdateManyMutationInput, ticket_typeUncheckedUpdateManyInput>
    /**
     * Filter which ticket_types to update
     */
    where?: ticket_typeWhereInput
    /**
     * Limit how many ticket_types to update.
     */
    limit?: number
  }

  /**
   * ticket_type updateManyAndReturn
   */
  export type ticket_typeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * The data used to update ticket_types.
     */
    data: XOR<ticket_typeUpdateManyMutationInput, ticket_typeUncheckedUpdateManyInput>
    /**
     * Filter which ticket_types to update
     */
    where?: ticket_typeWhereInput
    /**
     * Limit how many ticket_types to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ticket_type upsert
   */
  export type ticket_typeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * The filter to search for the ticket_type to update in case it exists.
     */
    where: ticket_typeWhereUniqueInput
    /**
     * In case the ticket_type found by the `where` argument doesn't exist, create a new ticket_type with this data.
     */
    create: XOR<ticket_typeCreateInput, ticket_typeUncheckedCreateInput>
    /**
     * In case the ticket_type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticket_typeUpdateInput, ticket_typeUncheckedUpdateInput>
  }

  /**
   * ticket_type delete
   */
  export type ticket_typeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
    /**
     * Filter which ticket_type to delete.
     */
    where: ticket_typeWhereUniqueInput
  }

  /**
   * ticket_type deleteMany
   */
  export type ticket_typeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ticket_types to delete
     */
    where?: ticket_typeWhereInput
    /**
     * Limit how many ticket_types to delete.
     */
    limit?: number
  }

  /**
   * ticket_type.ticket_holds
   */
  export type ticket_type$ticket_holdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    where?: ticket_holdsWhereInput
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    cursor?: ticket_holdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * ticket_type without action
   */
  export type ticket_typeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_type
     */
    select?: ticket_typeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_type
     */
    omit?: ticket_typeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_typeInclude<ExtArgs> | null
  }


  /**
   * Model event_attendees
   */

  export type AggregateEvent_attendees = {
    _count: Event_attendeesCountAggregateOutputType | null
    _avg: Event_attendeesAvgAggregateOutputType | null
    _sum: Event_attendeesSumAggregateOutputType | null
    _min: Event_attendeesMinAggregateOutputType | null
    _max: Event_attendeesMaxAggregateOutputType | null
  }

  export type Event_attendeesAvgAggregateOutputType = {
    id: number | null
    event_id: number | null
    organizer_id: number | null
    user_id: number | null
    ticket_quantity: number | null
    total_price_paid: number | null
  }

  export type Event_attendeesSumAggregateOutputType = {
    id: number | null
    event_id: number | null
    organizer_id: number | null
    user_id: number | null
    ticket_quantity: number | null
    total_price_paid: number | null
  }

  export type Event_attendeesMinAggregateOutputType = {
    id: number | null
    event_id: number | null
    organizer_id: number | null
    user_id: number | null
    ticket_quantity: number | null
    total_price_paid: number | null
    status: $Enums.event_status | null
  }

  export type Event_attendeesMaxAggregateOutputType = {
    id: number | null
    event_id: number | null
    organizer_id: number | null
    user_id: number | null
    ticket_quantity: number | null
    total_price_paid: number | null
    status: $Enums.event_status | null
  }

  export type Event_attendeesCountAggregateOutputType = {
    id: number
    event_id: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: number
    _all: number
  }


  export type Event_attendeesAvgAggregateInputType = {
    id?: true
    event_id?: true
    organizer_id?: true
    user_id?: true
    ticket_quantity?: true
    total_price_paid?: true
  }

  export type Event_attendeesSumAggregateInputType = {
    id?: true
    event_id?: true
    organizer_id?: true
    user_id?: true
    ticket_quantity?: true
    total_price_paid?: true
  }

  export type Event_attendeesMinAggregateInputType = {
    id?: true
    event_id?: true
    organizer_id?: true
    user_id?: true
    ticket_quantity?: true
    total_price_paid?: true
    status?: true
  }

  export type Event_attendeesMaxAggregateInputType = {
    id?: true
    event_id?: true
    organizer_id?: true
    user_id?: true
    ticket_quantity?: true
    total_price_paid?: true
    status?: true
  }

  export type Event_attendeesCountAggregateInputType = {
    id?: true
    event_id?: true
    organizer_id?: true
    user_id?: true
    ticket_quantity?: true
    total_price_paid?: true
    status?: true
    _all?: true
  }

  export type Event_attendeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_attendees to aggregate.
     */
    where?: event_attendeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_attendees to fetch.
     */
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: event_attendeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned event_attendees
    **/
    _count?: true | Event_attendeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Event_attendeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Event_attendeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Event_attendeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Event_attendeesMaxAggregateInputType
  }

  export type GetEvent_attendeesAggregateType<T extends Event_attendeesAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent_attendees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent_attendees[P]>
      : GetScalarType<T[P], AggregateEvent_attendees[P]>
  }




  export type event_attendeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: event_attendeesWhereInput
    orderBy?: event_attendeesOrderByWithAggregationInput | event_attendeesOrderByWithAggregationInput[]
    by: Event_attendeesScalarFieldEnum[] | Event_attendeesScalarFieldEnum
    having?: event_attendeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Event_attendeesCountAggregateInputType | true
    _avg?: Event_attendeesAvgAggregateInputType
    _sum?: Event_attendeesSumAggregateInputType
    _min?: Event_attendeesMinAggregateInputType
    _max?: Event_attendeesMaxAggregateInputType
  }

  export type Event_attendeesGroupByOutputType = {
    id: number
    event_id: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
    _count: Event_attendeesCountAggregateOutputType | null
    _avg: Event_attendeesAvgAggregateOutputType | null
    _sum: Event_attendeesSumAggregateOutputType | null
    _min: Event_attendeesMinAggregateOutputType | null
    _max: Event_attendeesMaxAggregateOutputType | null
  }

  type GetEvent_attendeesGroupByPayload<T extends event_attendeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Event_attendeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Event_attendeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Event_attendeesGroupByOutputType[P]>
            : GetScalarType<T[P], Event_attendeesGroupByOutputType[P]>
        }
      >
    >


  export type event_attendeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    organizer_id?: boolean
    user_id?: boolean
    ticket_quantity?: boolean
    total_price_paid?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_attendees"]>

  export type event_attendeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    organizer_id?: boolean
    user_id?: boolean
    ticket_quantity?: boolean
    total_price_paid?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_attendees"]>

  export type event_attendeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    event_id?: boolean
    organizer_id?: boolean
    user_id?: boolean
    ticket_quantity?: boolean
    total_price_paid?: boolean
    status?: boolean
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event_attendees"]>

  export type event_attendeesSelectScalar = {
    id?: boolean
    event_id?: boolean
    organizer_id?: boolean
    user_id?: boolean
    ticket_quantity?: boolean
    total_price_paid?: boolean
    status?: boolean
  }

  export type event_attendeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "event_id" | "organizer_id" | "user_id" | "ticket_quantity" | "total_price_paid" | "status", ExtArgs["result"]["event_attendees"]>
  export type event_attendeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type event_attendeesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }
  export type event_attendeesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    user?: boolean | user_accountDefaultArgs<ExtArgs>
  }

  export type $event_attendeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "event_attendees"
    objects: {
      event: Prisma.$event_tablePayload<ExtArgs>
      organizer: Prisma.$organizer_accountPayload<ExtArgs>
      user: Prisma.$user_accountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      event_id: number
      organizer_id: number
      user_id: number
      ticket_quantity: number
      total_price_paid: number
      status: $Enums.event_status
    }, ExtArgs["result"]["event_attendees"]>
    composites: {}
  }

  type event_attendeesGetPayload<S extends boolean | null | undefined | event_attendeesDefaultArgs> = $Result.GetResult<Prisma.$event_attendeesPayload, S>

  type event_attendeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<event_attendeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Event_attendeesCountAggregateInputType | true
    }

  export interface event_attendeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['event_attendees'], meta: { name: 'event_attendees' } }
    /**
     * Find zero or one Event_attendees that matches the filter.
     * @param {event_attendeesFindUniqueArgs} args - Arguments to find a Event_attendees
     * @example
     * // Get one Event_attendees
     * const event_attendees = await prisma.event_attendees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends event_attendeesFindUniqueArgs>(args: SelectSubset<T, event_attendeesFindUniqueArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event_attendees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {event_attendeesFindUniqueOrThrowArgs} args - Arguments to find a Event_attendees
     * @example
     * // Get one Event_attendees
     * const event_attendees = await prisma.event_attendees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends event_attendeesFindUniqueOrThrowArgs>(args: SelectSubset<T, event_attendeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_attendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesFindFirstArgs} args - Arguments to find a Event_attendees
     * @example
     * // Get one Event_attendees
     * const event_attendees = await prisma.event_attendees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends event_attendeesFindFirstArgs>(args?: SelectSubset<T, event_attendeesFindFirstArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event_attendees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesFindFirstOrThrowArgs} args - Arguments to find a Event_attendees
     * @example
     * // Get one Event_attendees
     * const event_attendees = await prisma.event_attendees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends event_attendeesFindFirstOrThrowArgs>(args?: SelectSubset<T, event_attendeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Event_attendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Event_attendees
     * const event_attendees = await prisma.event_attendees.findMany()
     * 
     * // Get first 10 Event_attendees
     * const event_attendees = await prisma.event_attendees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const event_attendeesWithIdOnly = await prisma.event_attendees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends event_attendeesFindManyArgs>(args?: SelectSubset<T, event_attendeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event_attendees.
     * @param {event_attendeesCreateArgs} args - Arguments to create a Event_attendees.
     * @example
     * // Create one Event_attendees
     * const Event_attendees = await prisma.event_attendees.create({
     *   data: {
     *     // ... data to create a Event_attendees
     *   }
     * })
     * 
     */
    create<T extends event_attendeesCreateArgs>(args: SelectSubset<T, event_attendeesCreateArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Event_attendees.
     * @param {event_attendeesCreateManyArgs} args - Arguments to create many Event_attendees.
     * @example
     * // Create many Event_attendees
     * const event_attendees = await prisma.event_attendees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends event_attendeesCreateManyArgs>(args?: SelectSubset<T, event_attendeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Event_attendees and returns the data saved in the database.
     * @param {event_attendeesCreateManyAndReturnArgs} args - Arguments to create many Event_attendees.
     * @example
     * // Create many Event_attendees
     * const event_attendees = await prisma.event_attendees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Event_attendees and only return the `id`
     * const event_attendeesWithIdOnly = await prisma.event_attendees.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends event_attendeesCreateManyAndReturnArgs>(args?: SelectSubset<T, event_attendeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event_attendees.
     * @param {event_attendeesDeleteArgs} args - Arguments to delete one Event_attendees.
     * @example
     * // Delete one Event_attendees
     * const Event_attendees = await prisma.event_attendees.delete({
     *   where: {
     *     // ... filter to delete one Event_attendees
     *   }
     * })
     * 
     */
    delete<T extends event_attendeesDeleteArgs>(args: SelectSubset<T, event_attendeesDeleteArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event_attendees.
     * @param {event_attendeesUpdateArgs} args - Arguments to update one Event_attendees.
     * @example
     * // Update one Event_attendees
     * const event_attendees = await prisma.event_attendees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends event_attendeesUpdateArgs>(args: SelectSubset<T, event_attendeesUpdateArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Event_attendees.
     * @param {event_attendeesDeleteManyArgs} args - Arguments to filter Event_attendees to delete.
     * @example
     * // Delete a few Event_attendees
     * const { count } = await prisma.event_attendees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends event_attendeesDeleteManyArgs>(args?: SelectSubset<T, event_attendeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Event_attendees
     * const event_attendees = await prisma.event_attendees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends event_attendeesUpdateManyArgs>(args: SelectSubset<T, event_attendeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Event_attendees and returns the data updated in the database.
     * @param {event_attendeesUpdateManyAndReturnArgs} args - Arguments to update many Event_attendees.
     * @example
     * // Update many Event_attendees
     * const event_attendees = await prisma.event_attendees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Event_attendees and only return the `id`
     * const event_attendeesWithIdOnly = await prisma.event_attendees.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends event_attendeesUpdateManyAndReturnArgs>(args: SelectSubset<T, event_attendeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event_attendees.
     * @param {event_attendeesUpsertArgs} args - Arguments to update or create a Event_attendees.
     * @example
     * // Update or create a Event_attendees
     * const event_attendees = await prisma.event_attendees.upsert({
     *   create: {
     *     // ... data to create a Event_attendees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event_attendees we want to update
     *   }
     * })
     */
    upsert<T extends event_attendeesUpsertArgs>(args: SelectSubset<T, event_attendeesUpsertArgs<ExtArgs>>): Prisma__event_attendeesClient<$Result.GetResult<Prisma.$event_attendeesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Event_attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesCountArgs} args - Arguments to filter Event_attendees to count.
     * @example
     * // Count the number of Event_attendees
     * const count = await prisma.event_attendees.count({
     *   where: {
     *     // ... the filter for the Event_attendees we want to count
     *   }
     * })
    **/
    count<T extends event_attendeesCountArgs>(
      args?: Subset<T, event_attendeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Event_attendeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event_attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Event_attendeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Event_attendeesAggregateArgs>(args: Subset<T, Event_attendeesAggregateArgs>): Prisma.PrismaPromise<GetEvent_attendeesAggregateType<T>>

    /**
     * Group by Event_attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {event_attendeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends event_attendeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: event_attendeesGroupByArgs['orderBy'] }
        : { orderBy?: event_attendeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, event_attendeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvent_attendeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the event_attendees model
   */
  readonly fields: event_attendeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for event_attendees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__event_attendeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organizer<T extends organizer_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, organizer_accountDefaultArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the event_attendees model
   */
  interface event_attendeesFieldRefs {
    readonly id: FieldRef<"event_attendees", 'Int'>
    readonly event_id: FieldRef<"event_attendees", 'Int'>
    readonly organizer_id: FieldRef<"event_attendees", 'Int'>
    readonly user_id: FieldRef<"event_attendees", 'Int'>
    readonly ticket_quantity: FieldRef<"event_attendees", 'Int'>
    readonly total_price_paid: FieldRef<"event_attendees", 'Int'>
    readonly status: FieldRef<"event_attendees", 'event_status'>
  }
    

  // Custom InputTypes
  /**
   * event_attendees findUnique
   */
  export type event_attendeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter, which event_attendees to fetch.
     */
    where: event_attendeesWhereUniqueInput
  }

  /**
   * event_attendees findUniqueOrThrow
   */
  export type event_attendeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter, which event_attendees to fetch.
     */
    where: event_attendeesWhereUniqueInput
  }

  /**
   * event_attendees findFirst
   */
  export type event_attendeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter, which event_attendees to fetch.
     */
    where?: event_attendeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_attendees to fetch.
     */
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_attendees.
     */
    cursor?: event_attendeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_attendees.
     */
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * event_attendees findFirstOrThrow
   */
  export type event_attendeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter, which event_attendees to fetch.
     */
    where?: event_attendeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_attendees to fetch.
     */
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for event_attendees.
     */
    cursor?: event_attendeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_attendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of event_attendees.
     */
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * event_attendees findMany
   */
  export type event_attendeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter, which event_attendees to fetch.
     */
    where?: event_attendeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of event_attendees to fetch.
     */
    orderBy?: event_attendeesOrderByWithRelationInput | event_attendeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing event_attendees.
     */
    cursor?: event_attendeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` event_attendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` event_attendees.
     */
    skip?: number
    distinct?: Event_attendeesScalarFieldEnum | Event_attendeesScalarFieldEnum[]
  }

  /**
   * event_attendees create
   */
  export type event_attendeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * The data needed to create a event_attendees.
     */
    data: XOR<event_attendeesCreateInput, event_attendeesUncheckedCreateInput>
  }

  /**
   * event_attendees createMany
   */
  export type event_attendeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many event_attendees.
     */
    data: event_attendeesCreateManyInput | event_attendeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * event_attendees createManyAndReturn
   */
  export type event_attendeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * The data used to create many event_attendees.
     */
    data: event_attendeesCreateManyInput | event_attendeesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_attendees update
   */
  export type event_attendeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * The data needed to update a event_attendees.
     */
    data: XOR<event_attendeesUpdateInput, event_attendeesUncheckedUpdateInput>
    /**
     * Choose, which event_attendees to update.
     */
    where: event_attendeesWhereUniqueInput
  }

  /**
   * event_attendees updateMany
   */
  export type event_attendeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update event_attendees.
     */
    data: XOR<event_attendeesUpdateManyMutationInput, event_attendeesUncheckedUpdateManyInput>
    /**
     * Filter which event_attendees to update
     */
    where?: event_attendeesWhereInput
    /**
     * Limit how many event_attendees to update.
     */
    limit?: number
  }

  /**
   * event_attendees updateManyAndReturn
   */
  export type event_attendeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * The data used to update event_attendees.
     */
    data: XOR<event_attendeesUpdateManyMutationInput, event_attendeesUncheckedUpdateManyInput>
    /**
     * Filter which event_attendees to update
     */
    where?: event_attendeesWhereInput
    /**
     * Limit how many event_attendees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * event_attendees upsert
   */
  export type event_attendeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * The filter to search for the event_attendees to update in case it exists.
     */
    where: event_attendeesWhereUniqueInput
    /**
     * In case the event_attendees found by the `where` argument doesn't exist, create a new event_attendees with this data.
     */
    create: XOR<event_attendeesCreateInput, event_attendeesUncheckedCreateInput>
    /**
     * In case the event_attendees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<event_attendeesUpdateInput, event_attendeesUncheckedUpdateInput>
  }

  /**
   * event_attendees delete
   */
  export type event_attendeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
    /**
     * Filter which event_attendees to delete.
     */
    where: event_attendeesWhereUniqueInput
  }

  /**
   * event_attendees deleteMany
   */
  export type event_attendeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which event_attendees to delete
     */
    where?: event_attendeesWhereInput
    /**
     * Limit how many event_attendees to delete.
     */
    limit?: number
  }

  /**
   * event_attendees without action
   */
  export type event_attendeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the event_attendees
     */
    select?: event_attendeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the event_attendees
     */
    omit?: event_attendeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: event_attendeesInclude<ExtArgs> | null
  }


  /**
   * Model transactions_table
   */

  export type AggregateTransactions_table = {
    _count: Transactions_tableCountAggregateOutputType | null
    _avg: Transactions_tableAvgAggregateOutputType | null
    _sum: Transactions_tableSumAggregateOutputType | null
    _min: Transactions_tableMinAggregateOutputType | null
    _max: Transactions_tableMaxAggregateOutputType | null
  }

  export type Transactions_tableAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    event_id: number | null
    voucher_id: number | null
  }

  export type Transactions_tableSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    event_id: number | null
    voucher_id: number | null
  }

  export type Transactions_tableMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    event_id: number | null
    voucher_id: number | null
    created_at: Date | null
    status: $Enums.transactions_status | null
    payment_proof_url: string | null
  }

  export type Transactions_tableMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    event_id: number | null
    voucher_id: number | null
    created_at: Date | null
    status: $Enums.transactions_status | null
    payment_proof_url: string | null
  }

  export type Transactions_tableCountAggregateOutputType = {
    id: number
    user_id: number
    event_id: number
    voucher_id: number
    created_at: number
    status: number
    payment_proof_url: number
    _all: number
  }


  export type Transactions_tableAvgAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    voucher_id?: true
  }

  export type Transactions_tableSumAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    voucher_id?: true
  }

  export type Transactions_tableMinAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    voucher_id?: true
    created_at?: true
    status?: true
    payment_proof_url?: true
  }

  export type Transactions_tableMaxAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    voucher_id?: true
    created_at?: true
    status?: true
    payment_proof_url?: true
  }

  export type Transactions_tableCountAggregateInputType = {
    id?: true
    user_id?: true
    event_id?: true
    voucher_id?: true
    created_at?: true
    status?: true
    payment_proof_url?: true
    _all?: true
  }

  export type Transactions_tableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions_table to aggregate.
     */
    where?: transactions_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions_tables to fetch.
     */
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactions_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions_tables
    **/
    _count?: true | Transactions_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Transactions_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Transactions_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Transactions_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Transactions_tableMaxAggregateInputType
  }

  export type GetTransactions_tableAggregateType<T extends Transactions_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions_table[P]>
      : GetScalarType<T[P], AggregateTransactions_table[P]>
  }




  export type transactions_tableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactions_tableWhereInput
    orderBy?: transactions_tableOrderByWithAggregationInput | transactions_tableOrderByWithAggregationInput[]
    by: Transactions_tableScalarFieldEnum[] | Transactions_tableScalarFieldEnum
    having?: transactions_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Transactions_tableCountAggregateInputType | true
    _avg?: Transactions_tableAvgAggregateInputType
    _sum?: Transactions_tableSumAggregateInputType
    _min?: Transactions_tableMinAggregateInputType
    _max?: Transactions_tableMaxAggregateInputType
  }

  export type Transactions_tableGroupByOutputType = {
    id: number
    user_id: number
    event_id: number
    voucher_id: number | null
    created_at: Date
    status: $Enums.transactions_status
    payment_proof_url: string
    _count: Transactions_tableCountAggregateOutputType | null
    _avg: Transactions_tableAvgAggregateOutputType | null
    _sum: Transactions_tableSumAggregateOutputType | null
    _min: Transactions_tableMinAggregateOutputType | null
    _max: Transactions_tableMaxAggregateOutputType | null
  }

  type GetTransactions_tableGroupByPayload<T extends transactions_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Transactions_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Transactions_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Transactions_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Transactions_tableGroupByOutputType[P]>
        }
      >
    >


  export type transactions_tableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    voucher_id?: boolean
    created_at?: boolean
    status?: boolean
    payment_proof_url?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    ticket?: boolean | transactions_table$ticketArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
    _count?: boolean | Transactions_tableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions_table"]>

  export type transactions_tableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    voucher_id?: boolean
    created_at?: boolean
    status?: boolean
    payment_proof_url?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
  }, ExtArgs["result"]["transactions_table"]>

  export type transactions_tableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    voucher_id?: boolean
    created_at?: boolean
    status?: boolean
    payment_proof_url?: boolean
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
  }, ExtArgs["result"]["transactions_table"]>

  export type transactions_tableSelectScalar = {
    id?: boolean
    user_id?: boolean
    event_id?: boolean
    voucher_id?: boolean
    created_at?: boolean
    status?: boolean
    payment_proof_url?: boolean
  }

  export type transactions_tableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "event_id" | "voucher_id" | "created_at" | "status" | "payment_proof_url", ExtArgs["result"]["transactions_table"]>
  export type transactions_tableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    ticket?: boolean | transactions_table$ticketArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
    _count?: boolean | Transactions_tableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type transactions_tableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
  }
  export type transactions_tableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | user_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    voucher?: boolean | transactions_table$voucherArgs<ExtArgs>
  }

  export type $transactions_tablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions_table"
    objects: {
      user: Prisma.$user_accountPayload<ExtArgs>
      event: Prisma.$event_tablePayload<ExtArgs>
      ticket: Prisma.$ticket_holdsPayload<ExtArgs>[]
      voucher: Prisma.$voucher_tablePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      event_id: number
      voucher_id: number | null
      created_at: Date
      status: $Enums.transactions_status
      payment_proof_url: string
    }, ExtArgs["result"]["transactions_table"]>
    composites: {}
  }

  type transactions_tableGetPayload<S extends boolean | null | undefined | transactions_tableDefaultArgs> = $Result.GetResult<Prisma.$transactions_tablePayload, S>

  type transactions_tableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<transactions_tableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Transactions_tableCountAggregateInputType | true
    }

  export interface transactions_tableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions_table'], meta: { name: 'transactions_table' } }
    /**
     * Find zero or one Transactions_table that matches the filter.
     * @param {transactions_tableFindUniqueArgs} args - Arguments to find a Transactions_table
     * @example
     * // Get one Transactions_table
     * const transactions_table = await prisma.transactions_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactions_tableFindUniqueArgs>(args: SelectSubset<T, transactions_tableFindUniqueArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transactions_table that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {transactions_tableFindUniqueOrThrowArgs} args - Arguments to find a Transactions_table
     * @example
     * // Get one Transactions_table
     * const transactions_table = await prisma.transactions_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactions_tableFindUniqueOrThrowArgs>(args: SelectSubset<T, transactions_tableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableFindFirstArgs} args - Arguments to find a Transactions_table
     * @example
     * // Get one Transactions_table
     * const transactions_table = await prisma.transactions_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactions_tableFindFirstArgs>(args?: SelectSubset<T, transactions_tableFindFirstArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transactions_table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableFindFirstOrThrowArgs} args - Arguments to find a Transactions_table
     * @example
     * // Get one Transactions_table
     * const transactions_table = await prisma.transactions_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactions_tableFindFirstOrThrowArgs>(args?: SelectSubset<T, transactions_tableFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions_tables
     * const transactions_tables = await prisma.transactions_table.findMany()
     * 
     * // Get first 10 Transactions_tables
     * const transactions_tables = await prisma.transactions_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactions_tableWithIdOnly = await prisma.transactions_table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transactions_tableFindManyArgs>(args?: SelectSubset<T, transactions_tableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transactions_table.
     * @param {transactions_tableCreateArgs} args - Arguments to create a Transactions_table.
     * @example
     * // Create one Transactions_table
     * const Transactions_table = await prisma.transactions_table.create({
     *   data: {
     *     // ... data to create a Transactions_table
     *   }
     * })
     * 
     */
    create<T extends transactions_tableCreateArgs>(args: SelectSubset<T, transactions_tableCreateArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions_tables.
     * @param {transactions_tableCreateManyArgs} args - Arguments to create many Transactions_tables.
     * @example
     * // Create many Transactions_tables
     * const transactions_table = await prisma.transactions_table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactions_tableCreateManyArgs>(args?: SelectSubset<T, transactions_tableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions_tables and returns the data saved in the database.
     * @param {transactions_tableCreateManyAndReturnArgs} args - Arguments to create many Transactions_tables.
     * @example
     * // Create many Transactions_tables
     * const transactions_table = await prisma.transactions_table.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions_tables and only return the `id`
     * const transactions_tableWithIdOnly = await prisma.transactions_table.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactions_tableCreateManyAndReturnArgs>(args?: SelectSubset<T, transactions_tableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transactions_table.
     * @param {transactions_tableDeleteArgs} args - Arguments to delete one Transactions_table.
     * @example
     * // Delete one Transactions_table
     * const Transactions_table = await prisma.transactions_table.delete({
     *   where: {
     *     // ... filter to delete one Transactions_table
     *   }
     * })
     * 
     */
    delete<T extends transactions_tableDeleteArgs>(args: SelectSubset<T, transactions_tableDeleteArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transactions_table.
     * @param {transactions_tableUpdateArgs} args - Arguments to update one Transactions_table.
     * @example
     * // Update one Transactions_table
     * const transactions_table = await prisma.transactions_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactions_tableUpdateArgs>(args: SelectSubset<T, transactions_tableUpdateArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions_tables.
     * @param {transactions_tableDeleteManyArgs} args - Arguments to filter Transactions_tables to delete.
     * @example
     * // Delete a few Transactions_tables
     * const { count } = await prisma.transactions_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactions_tableDeleteManyArgs>(args?: SelectSubset<T, transactions_tableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions_tables
     * const transactions_table = await prisma.transactions_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactions_tableUpdateManyArgs>(args: SelectSubset<T, transactions_tableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions_tables and returns the data updated in the database.
     * @param {transactions_tableUpdateManyAndReturnArgs} args - Arguments to update many Transactions_tables.
     * @example
     * // Update many Transactions_tables
     * const transactions_table = await prisma.transactions_table.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions_tables and only return the `id`
     * const transactions_tableWithIdOnly = await prisma.transactions_table.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends transactions_tableUpdateManyAndReturnArgs>(args: SelectSubset<T, transactions_tableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transactions_table.
     * @param {transactions_tableUpsertArgs} args - Arguments to update or create a Transactions_table.
     * @example
     * // Update or create a Transactions_table
     * const transactions_table = await prisma.transactions_table.upsert({
     *   create: {
     *     // ... data to create a Transactions_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions_table we want to update
     *   }
     * })
     */
    upsert<T extends transactions_tableUpsertArgs>(args: SelectSubset<T, transactions_tableUpsertArgs<ExtArgs>>): Prisma__transactions_tableClient<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableCountArgs} args - Arguments to filter Transactions_tables to count.
     * @example
     * // Count the number of Transactions_tables
     * const count = await prisma.transactions_table.count({
     *   where: {
     *     // ... the filter for the Transactions_tables we want to count
     *   }
     * })
    **/
    count<T extends transactions_tableCountArgs>(
      args?: Subset<T, transactions_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Transactions_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Transactions_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Transactions_tableAggregateArgs>(args: Subset<T, Transactions_tableAggregateArgs>): Prisma.PrismaPromise<GetTransactions_tableAggregateType<T>>

    /**
     * Group by Transactions_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactions_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactions_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactions_tableGroupByArgs['orderBy'] }
        : { orderBy?: transactions_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactions_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactions_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions_table model
   */
  readonly fields: transactions_tableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactions_tableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends user_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_accountDefaultArgs<ExtArgs>>): Prisma__user_accountClient<$Result.GetResult<Prisma.$user_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ticket<T extends transactions_table$ticketArgs<ExtArgs> = {}>(args?: Subset<T, transactions_table$ticketArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticket_holdsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    voucher<T extends transactions_table$voucherArgs<ExtArgs> = {}>(args?: Subset<T, transactions_table$voucherArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions_table model
   */
  interface transactions_tableFieldRefs {
    readonly id: FieldRef<"transactions_table", 'Int'>
    readonly user_id: FieldRef<"transactions_table", 'Int'>
    readonly event_id: FieldRef<"transactions_table", 'Int'>
    readonly voucher_id: FieldRef<"transactions_table", 'Int'>
    readonly created_at: FieldRef<"transactions_table", 'DateTime'>
    readonly status: FieldRef<"transactions_table", 'transactions_status'>
    readonly payment_proof_url: FieldRef<"transactions_table", 'String'>
  }
    

  // Custom InputTypes
  /**
   * transactions_table findUnique
   */
  export type transactions_tableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter, which transactions_table to fetch.
     */
    where: transactions_tableWhereUniqueInput
  }

  /**
   * transactions_table findUniqueOrThrow
   */
  export type transactions_tableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter, which transactions_table to fetch.
     */
    where: transactions_tableWhereUniqueInput
  }

  /**
   * transactions_table findFirst
   */
  export type transactions_tableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter, which transactions_table to fetch.
     */
    where?: transactions_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions_tables to fetch.
     */
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions_tables.
     */
    cursor?: transactions_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions_tables.
     */
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * transactions_table findFirstOrThrow
   */
  export type transactions_tableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter, which transactions_table to fetch.
     */
    where?: transactions_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions_tables to fetch.
     */
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions_tables.
     */
    cursor?: transactions_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions_tables.
     */
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * transactions_table findMany
   */
  export type transactions_tableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter, which transactions_tables to fetch.
     */
    where?: transactions_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions_tables to fetch.
     */
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions_tables.
     */
    cursor?: transactions_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions_tables.
     */
    skip?: number
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * transactions_table create
   */
  export type transactions_tableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions_table.
     */
    data: XOR<transactions_tableCreateInput, transactions_tableUncheckedCreateInput>
  }

  /**
   * transactions_table createMany
   */
  export type transactions_tableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions_tables.
     */
    data: transactions_tableCreateManyInput | transactions_tableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions_table createManyAndReturn
   */
  export type transactions_tableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * The data used to create many transactions_tables.
     */
    data: transactions_tableCreateManyInput | transactions_tableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions_table update
   */
  export type transactions_tableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions_table.
     */
    data: XOR<transactions_tableUpdateInput, transactions_tableUncheckedUpdateInput>
    /**
     * Choose, which transactions_table to update.
     */
    where: transactions_tableWhereUniqueInput
  }

  /**
   * transactions_table updateMany
   */
  export type transactions_tableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions_tables.
     */
    data: XOR<transactions_tableUpdateManyMutationInput, transactions_tableUncheckedUpdateManyInput>
    /**
     * Filter which transactions_tables to update
     */
    where?: transactions_tableWhereInput
    /**
     * Limit how many transactions_tables to update.
     */
    limit?: number
  }

  /**
   * transactions_table updateManyAndReturn
   */
  export type transactions_tableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * The data used to update transactions_tables.
     */
    data: XOR<transactions_tableUpdateManyMutationInput, transactions_tableUncheckedUpdateManyInput>
    /**
     * Filter which transactions_tables to update
     */
    where?: transactions_tableWhereInput
    /**
     * Limit how many transactions_tables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions_table upsert
   */
  export type transactions_tableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions_table to update in case it exists.
     */
    where: transactions_tableWhereUniqueInput
    /**
     * In case the transactions_table found by the `where` argument doesn't exist, create a new transactions_table with this data.
     */
    create: XOR<transactions_tableCreateInput, transactions_tableUncheckedCreateInput>
    /**
     * In case the transactions_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactions_tableUpdateInput, transactions_tableUncheckedUpdateInput>
  }

  /**
   * transactions_table delete
   */
  export type transactions_tableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    /**
     * Filter which transactions_table to delete.
     */
    where: transactions_tableWhereUniqueInput
  }

  /**
   * transactions_table deleteMany
   */
  export type transactions_tableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions_tables to delete
     */
    where?: transactions_tableWhereInput
    /**
     * Limit how many transactions_tables to delete.
     */
    limit?: number
  }

  /**
   * transactions_table.ticket
   */
  export type transactions_table$ticketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ticket_holds
     */
    select?: ticket_holdsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ticket_holds
     */
    omit?: ticket_holdsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticket_holdsInclude<ExtArgs> | null
    where?: ticket_holdsWhereInput
    orderBy?: ticket_holdsOrderByWithRelationInput | ticket_holdsOrderByWithRelationInput[]
    cursor?: ticket_holdsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ticket_holdsScalarFieldEnum | Ticket_holdsScalarFieldEnum[]
  }

  /**
   * transactions_table.voucher
   */
  export type transactions_table$voucherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    where?: voucher_tableWhereInput
  }

  /**
   * transactions_table without action
   */
  export type transactions_tableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
  }


  /**
   * Model voucher_table
   */

  export type AggregateVoucher_table = {
    _count: Voucher_tableCountAggregateOutputType | null
    _avg: Voucher_tableAvgAggregateOutputType | null
    _sum: Voucher_tableSumAggregateOutputType | null
    _min: Voucher_tableMinAggregateOutputType | null
    _max: Voucher_tableMaxAggregateOutputType | null
  }

  export type Voucher_tableAvgAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    usage_limit: number | null
    discount_value: number | null
  }

  export type Voucher_tableSumAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    usage_limit: number | null
    discount_value: number | null
  }

  export type Voucher_tableMinAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    start_at: Date | null
    expires_at: Date | null
    usage_limit: number | null
    discount_type: $Enums.discount_type | null
    discount_value: number | null
  }

  export type Voucher_tableMaxAggregateOutputType = {
    id: number | null
    organizer_id: number | null
    event_id: number | null
    start_at: Date | null
    expires_at: Date | null
    usage_limit: number | null
    discount_type: $Enums.discount_type | null
    discount_value: number | null
  }

  export type Voucher_tableCountAggregateOutputType = {
    id: number
    organizer_id: number
    event_id: number
    start_at: number
    expires_at: number
    usage_limit: number
    discount_type: number
    discount_value: number
    _all: number
  }


  export type Voucher_tableAvgAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    usage_limit?: true
    discount_value?: true
  }

  export type Voucher_tableSumAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    usage_limit?: true
    discount_value?: true
  }

  export type Voucher_tableMinAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    start_at?: true
    expires_at?: true
    usage_limit?: true
    discount_type?: true
    discount_value?: true
  }

  export type Voucher_tableMaxAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    start_at?: true
    expires_at?: true
    usage_limit?: true
    discount_type?: true
    discount_value?: true
  }

  export type Voucher_tableCountAggregateInputType = {
    id?: true
    organizer_id?: true
    event_id?: true
    start_at?: true
    expires_at?: true
    usage_limit?: true
    discount_type?: true
    discount_value?: true
    _all?: true
  }

  export type Voucher_tableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voucher_table to aggregate.
     */
    where?: voucher_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voucher_tables to fetch.
     */
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: voucher_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voucher_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voucher_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned voucher_tables
    **/
    _count?: true | Voucher_tableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Voucher_tableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Voucher_tableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Voucher_tableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Voucher_tableMaxAggregateInputType
  }

  export type GetVoucher_tableAggregateType<T extends Voucher_tableAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucher_table]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucher_table[P]>
      : GetScalarType<T[P], AggregateVoucher_table[P]>
  }




  export type voucher_tableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: voucher_tableWhereInput
    orderBy?: voucher_tableOrderByWithAggregationInput | voucher_tableOrderByWithAggregationInput[]
    by: Voucher_tableScalarFieldEnum[] | Voucher_tableScalarFieldEnum
    having?: voucher_tableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Voucher_tableCountAggregateInputType | true
    _avg?: Voucher_tableAvgAggregateInputType
    _sum?: Voucher_tableSumAggregateInputType
    _min?: Voucher_tableMinAggregateInputType
    _max?: Voucher_tableMaxAggregateInputType
  }

  export type Voucher_tableGroupByOutputType = {
    id: number
    organizer_id: number
    event_id: number
    start_at: Date
    expires_at: Date | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    _count: Voucher_tableCountAggregateOutputType | null
    _avg: Voucher_tableAvgAggregateOutputType | null
    _sum: Voucher_tableSumAggregateOutputType | null
    _min: Voucher_tableMinAggregateOutputType | null
    _max: Voucher_tableMaxAggregateOutputType | null
  }

  type GetVoucher_tableGroupByPayload<T extends voucher_tableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Voucher_tableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Voucher_tableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Voucher_tableGroupByOutputType[P]>
            : GetScalarType<T[P], Voucher_tableGroupByOutputType[P]>
        }
      >
    >


  export type voucher_tableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    start_at?: boolean
    expires_at?: boolean
    usage_limit?: boolean
    discount_type?: boolean
    discount_value?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    transactions_table?: boolean | voucher_table$transactions_tableArgs<ExtArgs>
    _count?: boolean | Voucher_tableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucher_table"]>

  export type voucher_tableSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    start_at?: boolean
    expires_at?: boolean
    usage_limit?: boolean
    discount_type?: boolean
    discount_value?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucher_table"]>

  export type voucher_tableSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    start_at?: boolean
    expires_at?: boolean
    usage_limit?: boolean
    discount_type?: boolean
    discount_value?: boolean
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["voucher_table"]>

  export type voucher_tableSelectScalar = {
    id?: boolean
    organizer_id?: boolean
    event_id?: boolean
    start_at?: boolean
    expires_at?: boolean
    usage_limit?: boolean
    discount_type?: boolean
    discount_value?: boolean
  }

  export type voucher_tableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizer_id" | "event_id" | "start_at" | "expires_at" | "usage_limit" | "discount_type" | "discount_value", ExtArgs["result"]["voucher_table"]>
  export type voucher_tableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
    transactions_table?: boolean | voucher_table$transactions_tableArgs<ExtArgs>
    _count?: boolean | Voucher_tableCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type voucher_tableIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }
  export type voucher_tableIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | organizer_accountDefaultArgs<ExtArgs>
    event?: boolean | event_tableDefaultArgs<ExtArgs>
  }

  export type $voucher_tablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "voucher_table"
    objects: {
      organizer: Prisma.$organizer_accountPayload<ExtArgs>
      event: Prisma.$event_tablePayload<ExtArgs>
      transactions_table: Prisma.$transactions_tablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizer_id: number
      event_id: number
      start_at: Date
      expires_at: Date | null
      usage_limit: number
      discount_type: $Enums.discount_type
      discount_value: number
    }, ExtArgs["result"]["voucher_table"]>
    composites: {}
  }

  type voucher_tableGetPayload<S extends boolean | null | undefined | voucher_tableDefaultArgs> = $Result.GetResult<Prisma.$voucher_tablePayload, S>

  type voucher_tableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<voucher_tableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Voucher_tableCountAggregateInputType | true
    }

  export interface voucher_tableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['voucher_table'], meta: { name: 'voucher_table' } }
    /**
     * Find zero or one Voucher_table that matches the filter.
     * @param {voucher_tableFindUniqueArgs} args - Arguments to find a Voucher_table
     * @example
     * // Get one Voucher_table
     * const voucher_table = await prisma.voucher_table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends voucher_tableFindUniqueArgs>(args: SelectSubset<T, voucher_tableFindUniqueArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Voucher_table that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {voucher_tableFindUniqueOrThrowArgs} args - Arguments to find a Voucher_table
     * @example
     * // Get one Voucher_table
     * const voucher_table = await prisma.voucher_table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends voucher_tableFindUniqueOrThrowArgs>(args: SelectSubset<T, voucher_tableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Voucher_table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableFindFirstArgs} args - Arguments to find a Voucher_table
     * @example
     * // Get one Voucher_table
     * const voucher_table = await prisma.voucher_table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends voucher_tableFindFirstArgs>(args?: SelectSubset<T, voucher_tableFindFirstArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Voucher_table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableFindFirstOrThrowArgs} args - Arguments to find a Voucher_table
     * @example
     * // Get one Voucher_table
     * const voucher_table = await prisma.voucher_table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends voucher_tableFindFirstOrThrowArgs>(args?: SelectSubset<T, voucher_tableFindFirstOrThrowArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Voucher_tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Voucher_tables
     * const voucher_tables = await prisma.voucher_table.findMany()
     * 
     * // Get first 10 Voucher_tables
     * const voucher_tables = await prisma.voucher_table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voucher_tableWithIdOnly = await prisma.voucher_table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends voucher_tableFindManyArgs>(args?: SelectSubset<T, voucher_tableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Voucher_table.
     * @param {voucher_tableCreateArgs} args - Arguments to create a Voucher_table.
     * @example
     * // Create one Voucher_table
     * const Voucher_table = await prisma.voucher_table.create({
     *   data: {
     *     // ... data to create a Voucher_table
     *   }
     * })
     * 
     */
    create<T extends voucher_tableCreateArgs>(args: SelectSubset<T, voucher_tableCreateArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Voucher_tables.
     * @param {voucher_tableCreateManyArgs} args - Arguments to create many Voucher_tables.
     * @example
     * // Create many Voucher_tables
     * const voucher_table = await prisma.voucher_table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends voucher_tableCreateManyArgs>(args?: SelectSubset<T, voucher_tableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Voucher_tables and returns the data saved in the database.
     * @param {voucher_tableCreateManyAndReturnArgs} args - Arguments to create many Voucher_tables.
     * @example
     * // Create many Voucher_tables
     * const voucher_table = await prisma.voucher_table.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Voucher_tables and only return the `id`
     * const voucher_tableWithIdOnly = await prisma.voucher_table.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends voucher_tableCreateManyAndReturnArgs>(args?: SelectSubset<T, voucher_tableCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Voucher_table.
     * @param {voucher_tableDeleteArgs} args - Arguments to delete one Voucher_table.
     * @example
     * // Delete one Voucher_table
     * const Voucher_table = await prisma.voucher_table.delete({
     *   where: {
     *     // ... filter to delete one Voucher_table
     *   }
     * })
     * 
     */
    delete<T extends voucher_tableDeleteArgs>(args: SelectSubset<T, voucher_tableDeleteArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Voucher_table.
     * @param {voucher_tableUpdateArgs} args - Arguments to update one Voucher_table.
     * @example
     * // Update one Voucher_table
     * const voucher_table = await prisma.voucher_table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends voucher_tableUpdateArgs>(args: SelectSubset<T, voucher_tableUpdateArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Voucher_tables.
     * @param {voucher_tableDeleteManyArgs} args - Arguments to filter Voucher_tables to delete.
     * @example
     * // Delete a few Voucher_tables
     * const { count } = await prisma.voucher_table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends voucher_tableDeleteManyArgs>(args?: SelectSubset<T, voucher_tableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voucher_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Voucher_tables
     * const voucher_table = await prisma.voucher_table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends voucher_tableUpdateManyArgs>(args: SelectSubset<T, voucher_tableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Voucher_tables and returns the data updated in the database.
     * @param {voucher_tableUpdateManyAndReturnArgs} args - Arguments to update many Voucher_tables.
     * @example
     * // Update many Voucher_tables
     * const voucher_table = await prisma.voucher_table.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Voucher_tables and only return the `id`
     * const voucher_tableWithIdOnly = await prisma.voucher_table.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends voucher_tableUpdateManyAndReturnArgs>(args: SelectSubset<T, voucher_tableUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Voucher_table.
     * @param {voucher_tableUpsertArgs} args - Arguments to update or create a Voucher_table.
     * @example
     * // Update or create a Voucher_table
     * const voucher_table = await prisma.voucher_table.upsert({
     *   create: {
     *     // ... data to create a Voucher_table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voucher_table we want to update
     *   }
     * })
     */
    upsert<T extends voucher_tableUpsertArgs>(args: SelectSubset<T, voucher_tableUpsertArgs<ExtArgs>>): Prisma__voucher_tableClient<$Result.GetResult<Prisma.$voucher_tablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Voucher_tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableCountArgs} args - Arguments to filter Voucher_tables to count.
     * @example
     * // Count the number of Voucher_tables
     * const count = await prisma.voucher_table.count({
     *   where: {
     *     // ... the filter for the Voucher_tables we want to count
     *   }
     * })
    **/
    count<T extends voucher_tableCountArgs>(
      args?: Subset<T, voucher_tableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Voucher_tableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voucher_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Voucher_tableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Voucher_tableAggregateArgs>(args: Subset<T, Voucher_tableAggregateArgs>): Prisma.PrismaPromise<GetVoucher_tableAggregateType<T>>

    /**
     * Group by Voucher_table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {voucher_tableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends voucher_tableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: voucher_tableGroupByArgs['orderBy'] }
        : { orderBy?: voucher_tableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, voucher_tableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucher_tableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the voucher_table model
   */
  readonly fields: voucher_tableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for voucher_table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__voucher_tableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends organizer_accountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, organizer_accountDefaultArgs<ExtArgs>>): Prisma__organizer_accountClient<$Result.GetResult<Prisma.$organizer_accountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    event<T extends event_tableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, event_tableDefaultArgs<ExtArgs>>): Prisma__event_tableClient<$Result.GetResult<Prisma.$event_tablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions_table<T extends voucher_table$transactions_tableArgs<ExtArgs> = {}>(args?: Subset<T, voucher_table$transactions_tableArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactions_tablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the voucher_table model
   */
  interface voucher_tableFieldRefs {
    readonly id: FieldRef<"voucher_table", 'Int'>
    readonly organizer_id: FieldRef<"voucher_table", 'Int'>
    readonly event_id: FieldRef<"voucher_table", 'Int'>
    readonly start_at: FieldRef<"voucher_table", 'DateTime'>
    readonly expires_at: FieldRef<"voucher_table", 'DateTime'>
    readonly usage_limit: FieldRef<"voucher_table", 'Int'>
    readonly discount_type: FieldRef<"voucher_table", 'discount_type'>
    readonly discount_value: FieldRef<"voucher_table", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * voucher_table findUnique
   */
  export type voucher_tableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter, which voucher_table to fetch.
     */
    where: voucher_tableWhereUniqueInput
  }

  /**
   * voucher_table findUniqueOrThrow
   */
  export type voucher_tableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter, which voucher_table to fetch.
     */
    where: voucher_tableWhereUniqueInput
  }

  /**
   * voucher_table findFirst
   */
  export type voucher_tableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter, which voucher_table to fetch.
     */
    where?: voucher_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voucher_tables to fetch.
     */
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voucher_tables.
     */
    cursor?: voucher_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voucher_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voucher_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voucher_tables.
     */
    distinct?: Voucher_tableScalarFieldEnum | Voucher_tableScalarFieldEnum[]
  }

  /**
   * voucher_table findFirstOrThrow
   */
  export type voucher_tableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter, which voucher_table to fetch.
     */
    where?: voucher_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voucher_tables to fetch.
     */
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for voucher_tables.
     */
    cursor?: voucher_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voucher_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voucher_tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of voucher_tables.
     */
    distinct?: Voucher_tableScalarFieldEnum | Voucher_tableScalarFieldEnum[]
  }

  /**
   * voucher_table findMany
   */
  export type voucher_tableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter, which voucher_tables to fetch.
     */
    where?: voucher_tableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of voucher_tables to fetch.
     */
    orderBy?: voucher_tableOrderByWithRelationInput | voucher_tableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing voucher_tables.
     */
    cursor?: voucher_tableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` voucher_tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` voucher_tables.
     */
    skip?: number
    distinct?: Voucher_tableScalarFieldEnum | Voucher_tableScalarFieldEnum[]
  }

  /**
   * voucher_table create
   */
  export type voucher_tableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * The data needed to create a voucher_table.
     */
    data: XOR<voucher_tableCreateInput, voucher_tableUncheckedCreateInput>
  }

  /**
   * voucher_table createMany
   */
  export type voucher_tableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many voucher_tables.
     */
    data: voucher_tableCreateManyInput | voucher_tableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * voucher_table createManyAndReturn
   */
  export type voucher_tableCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * The data used to create many voucher_tables.
     */
    data: voucher_tableCreateManyInput | voucher_tableCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * voucher_table update
   */
  export type voucher_tableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * The data needed to update a voucher_table.
     */
    data: XOR<voucher_tableUpdateInput, voucher_tableUncheckedUpdateInput>
    /**
     * Choose, which voucher_table to update.
     */
    where: voucher_tableWhereUniqueInput
  }

  /**
   * voucher_table updateMany
   */
  export type voucher_tableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update voucher_tables.
     */
    data: XOR<voucher_tableUpdateManyMutationInput, voucher_tableUncheckedUpdateManyInput>
    /**
     * Filter which voucher_tables to update
     */
    where?: voucher_tableWhereInput
    /**
     * Limit how many voucher_tables to update.
     */
    limit?: number
  }

  /**
   * voucher_table updateManyAndReturn
   */
  export type voucher_tableUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * The data used to update voucher_tables.
     */
    data: XOR<voucher_tableUpdateManyMutationInput, voucher_tableUncheckedUpdateManyInput>
    /**
     * Filter which voucher_tables to update
     */
    where?: voucher_tableWhereInput
    /**
     * Limit how many voucher_tables to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * voucher_table upsert
   */
  export type voucher_tableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * The filter to search for the voucher_table to update in case it exists.
     */
    where: voucher_tableWhereUniqueInput
    /**
     * In case the voucher_table found by the `where` argument doesn't exist, create a new voucher_table with this data.
     */
    create: XOR<voucher_tableCreateInput, voucher_tableUncheckedCreateInput>
    /**
     * In case the voucher_table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<voucher_tableUpdateInput, voucher_tableUncheckedUpdateInput>
  }

  /**
   * voucher_table delete
   */
  export type voucher_tableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
    /**
     * Filter which voucher_table to delete.
     */
    where: voucher_tableWhereUniqueInput
  }

  /**
   * voucher_table deleteMany
   */
  export type voucher_tableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which voucher_tables to delete
     */
    where?: voucher_tableWhereInput
    /**
     * Limit how many voucher_tables to delete.
     */
    limit?: number
  }

  /**
   * voucher_table.transactions_table
   */
  export type voucher_table$transactions_tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions_table
     */
    select?: transactions_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions_table
     */
    omit?: transactions_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactions_tableInclude<ExtArgs> | null
    where?: transactions_tableWhereInput
    orderBy?: transactions_tableOrderByWithRelationInput | transactions_tableOrderByWithRelationInput[]
    cursor?: transactions_tableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Transactions_tableScalarFieldEnum | Transactions_tableScalarFieldEnum[]
  }

  /**
   * voucher_table without action
   */
  export type voucher_tableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the voucher_table
     */
    select?: voucher_tableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the voucher_table
     */
    omit?: voucher_tableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: voucher_tableInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const User_accountScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    referral_code: 'referral_code',
    referred_by_code: 'referred_by_code',
    imgProfile: 'imgProfile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type User_accountScalarFieldEnum = (typeof User_accountScalarFieldEnum)[keyof typeof User_accountScalarFieldEnum]


  export const User_profileScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    user_fullname: 'user_fullname',
    user_date_of_birth: 'user_date_of_birth',
    user_phone: 'user_phone',
    user_profile_image: 'user_profile_image'
  };

  export type User_profileScalarFieldEnum = (typeof User_profileScalarFieldEnum)[keyof typeof User_profileScalarFieldEnum]


  export const User_pointsScalarFieldEnum: {
    id: 'id',
    points: 'points',
    points_source_type: 'points_source_type',
    points_source_id: 'points_source_id',
    earned_at: 'earned_at',
    expires_at: 'expires_at',
    points_remaining: 'points_remaining',
    user_id: 'user_id'
  };

  export type User_pointsScalarFieldEnum = (typeof User_pointsScalarFieldEnum)[keyof typeof User_pointsScalarFieldEnum]


  export const Points_redemptionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    total_points: 'total_points',
    redeemed_at: 'redeemed_at'
  };

  export type Points_redemptionScalarFieldEnum = (typeof Points_redemptionScalarFieldEnum)[keyof typeof Points_redemptionScalarFieldEnum]


  export const Points_redemption_itemsScalarFieldEnum: {
    id: 'id',
    user_point_id: 'user_point_id',
    redemption_id: 'redemption_id'
  };

  export type Points_redemption_itemsScalarFieldEnum = (typeof Points_redemption_itemsScalarFieldEnum)[keyof typeof Points_redemption_itemsScalarFieldEnum]


  export const Coupon_tableScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    code: 'code',
    discount_type: 'discount_type',
    discount_value: 'discount_value',
    created_at: 'created_at',
    expires_at: 'expires_at',
    used_at: 'used_at',
    usage_limit: 'usage_limit',
    used_count: 'used_count',
    status: 'status',
    issued_by: 'issued_by'
  };

  export type Coupon_tableScalarFieldEnum = (typeof Coupon_tableScalarFieldEnum)[keyof typeof Coupon_tableScalarFieldEnum]


  export const User_couponScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    coupon_id: 'coupon_id',
    used_at: 'used_at'
  };

  export type User_couponScalarFieldEnum = (typeof User_couponScalarFieldEnum)[keyof typeof User_couponScalarFieldEnum]


  export const Organizer_accountScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type Organizer_accountScalarFieldEnum = (typeof Organizer_accountScalarFieldEnum)[keyof typeof Organizer_accountScalarFieldEnum]


  export const Organizer_profileScalarFieldEnum: {
    id: 'id',
    organizer_id: 'organizer_id',
    organizer_name: 'organizer_name',
    organizer_address: 'organizer_address',
    organizer_phone: 'organizer_phone',
    organizer_profile_image: 'organizer_profile_image'
  };

  export type Organizer_profileScalarFieldEnum = (typeof Organizer_profileScalarFieldEnum)[keyof typeof Organizer_profileScalarFieldEnum]


  export const Organizer_reviewsScalarFieldEnum: {
    id: 'id',
    organizer_id: 'organizer_id',
    event_id: 'event_id',
    user_id: 'user_id',
    rating: 'rating',
    review: 'review',
    created_at: 'created_at'
  };

  export type Organizer_reviewsScalarFieldEnum = (typeof Organizer_reviewsScalarFieldEnum)[keyof typeof Organizer_reviewsScalarFieldEnum]


  export const Event_tableScalarFieldEnum: {
    id: 'id',
    organizer_id: 'organizer_id',
    name: 'name',
    price: 'price',
    start_date: 'start_date',
    end_date: 'end_date',
    seat_capacity: 'seat_capacity',
    event_type: 'event_type',
    created_at: 'created_at'
  };

  export type Event_tableScalarFieldEnum = (typeof Event_tableScalarFieldEnum)[keyof typeof Event_tableScalarFieldEnum]


  export const Ticket_holdsScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    user_id: 'user_id',
    ticket_type_id: 'ticket_type_id',
    ticket_quantity: 'ticket_quantity',
    held_at: 'held_at',
    expires_at: 'expires_at',
    transactions_id: 'transactions_id',
    status: 'status'
  };

  export type Ticket_holdsScalarFieldEnum = (typeof Ticket_holdsScalarFieldEnum)[keyof typeof Ticket_holdsScalarFieldEnum]


  export const Ticket_typeScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    type_name: 'type_name',
    price: 'price',
    quota: 'quota'
  };

  export type Ticket_typeScalarFieldEnum = (typeof Ticket_typeScalarFieldEnum)[keyof typeof Ticket_typeScalarFieldEnum]


  export const Event_attendeesScalarFieldEnum: {
    id: 'id',
    event_id: 'event_id',
    organizer_id: 'organizer_id',
    user_id: 'user_id',
    ticket_quantity: 'ticket_quantity',
    total_price_paid: 'total_price_paid',
    status: 'status'
  };

  export type Event_attendeesScalarFieldEnum = (typeof Event_attendeesScalarFieldEnum)[keyof typeof Event_attendeesScalarFieldEnum]


  export const Transactions_tableScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    event_id: 'event_id',
    voucher_id: 'voucher_id',
    created_at: 'created_at',
    status: 'status',
    payment_proof_url: 'payment_proof_url'
  };

  export type Transactions_tableScalarFieldEnum = (typeof Transactions_tableScalarFieldEnum)[keyof typeof Transactions_tableScalarFieldEnum]


  export const Voucher_tableScalarFieldEnum: {
    id: 'id',
    organizer_id: 'organizer_id',
    event_id: 'event_id',
    start_at: 'start_at',
    expires_at: 'expires_at',
    usage_limit: 'usage_limit',
    discount_type: 'discount_type',
    discount_value: 'discount_value'
  };

  export type Voucher_tableScalarFieldEnum = (typeof Voucher_tableScalarFieldEnum)[keyof typeof Voucher_tableScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'account_role'
   */
  export type Enumaccount_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'account_role'>
    


  /**
   * Reference to a field of type 'account_role[]'
   */
  export type ListEnumaccount_roleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'account_role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'discount_type'
   */
  export type Enumdiscount_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'discount_type'>
    


  /**
   * Reference to a field of type 'discount_type[]'
   */
  export type ListEnumdiscount_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'discount_type[]'>
    


  /**
   * Reference to a field of type 'coupon_status'
   */
  export type Enumcoupon_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'coupon_status'>
    


  /**
   * Reference to a field of type 'coupon_status[]'
   */
  export type ListEnumcoupon_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'coupon_status[]'>
    


  /**
   * Reference to a field of type 'issuer'
   */
  export type EnumissuerFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'issuer'>
    


  /**
   * Reference to a field of type 'issuer[]'
   */
  export type ListEnumissuerFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'issuer[]'>
    


  /**
   * Reference to a field of type 'event_status'
   */
  export type Enumevent_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'event_status'>
    


  /**
   * Reference to a field of type 'event_status[]'
   */
  export type ListEnumevent_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'event_status[]'>
    


  /**
   * Reference to a field of type 'transactions_status'
   */
  export type Enumtransactions_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transactions_status'>
    


  /**
   * Reference to a field of type 'transactions_status[]'
   */
  export type ListEnumtransactions_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'transactions_status[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type user_accountWhereInput = {
    AND?: user_accountWhereInput | user_accountWhereInput[]
    OR?: user_accountWhereInput[]
    NOT?: user_accountWhereInput | user_accountWhereInput[]
    id?: IntFilter<"user_account"> | number
    username?: StringFilter<"user_account"> | string
    email?: StringFilter<"user_account"> | string
    password?: StringFilter<"user_account"> | string
    role?: Enumaccount_roleFilter<"user_account"> | $Enums.account_role
    referral_code?: StringFilter<"user_account"> | string
    referred_by_code?: StringNullableFilter<"user_account"> | string | null
    imgProfile?: StringNullableFilter<"user_account"> | string | null
    createdAt?: DateTimeFilter<"user_account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"user_account"> | Date | string | null
    user_profile?: XOR<User_profileNullableScalarRelationFilter, user_profileWhereInput> | null
    user_points?: User_pointsListRelationFilter
    points_redemption?: Points_redemptionListRelationFilter
    organizer_reviews?: Organizer_reviewsListRelationFilter
    ticket_holds?: Ticket_holdsListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    transactions?: Transactions_tableListRelationFilter
    user_coupon?: User_couponListRelationFilter
  }

  export type user_accountOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    referral_code?: SortOrder
    referred_by_code?: SortOrderInput | SortOrder
    imgProfile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user_profile?: user_profileOrderByWithRelationInput
    user_points?: user_pointsOrderByRelationAggregateInput
    points_redemption?: points_redemptionOrderByRelationAggregateInput
    organizer_reviews?: organizer_reviewsOrderByRelationAggregateInput
    ticket_holds?: ticket_holdsOrderByRelationAggregateInput
    event_attendees?: event_attendeesOrderByRelationAggregateInput
    transactions?: transactions_tableOrderByRelationAggregateInput
    user_coupon?: user_couponOrderByRelationAggregateInput
  }

  export type user_accountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    referral_code?: string
    AND?: user_accountWhereInput | user_accountWhereInput[]
    OR?: user_accountWhereInput[]
    NOT?: user_accountWhereInput | user_accountWhereInput[]
    password?: StringFilter<"user_account"> | string
    role?: Enumaccount_roleFilter<"user_account"> | $Enums.account_role
    referred_by_code?: StringNullableFilter<"user_account"> | string | null
    imgProfile?: StringNullableFilter<"user_account"> | string | null
    createdAt?: DateTimeFilter<"user_account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"user_account"> | Date | string | null
    user_profile?: XOR<User_profileNullableScalarRelationFilter, user_profileWhereInput> | null
    user_points?: User_pointsListRelationFilter
    points_redemption?: Points_redemptionListRelationFilter
    organizer_reviews?: Organizer_reviewsListRelationFilter
    ticket_holds?: Ticket_holdsListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    transactions?: Transactions_tableListRelationFilter
    user_coupon?: User_couponListRelationFilter
  }, "id" | "username" | "email" | "referral_code">

  export type user_accountOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    referral_code?: SortOrder
    referred_by_code?: SortOrderInput | SortOrder
    imgProfile?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: user_accountCountOrderByAggregateInput
    _avg?: user_accountAvgOrderByAggregateInput
    _max?: user_accountMaxOrderByAggregateInput
    _min?: user_accountMinOrderByAggregateInput
    _sum?: user_accountSumOrderByAggregateInput
  }

  export type user_accountScalarWhereWithAggregatesInput = {
    AND?: user_accountScalarWhereWithAggregatesInput | user_accountScalarWhereWithAggregatesInput[]
    OR?: user_accountScalarWhereWithAggregatesInput[]
    NOT?: user_accountScalarWhereWithAggregatesInput | user_accountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_account"> | number
    username?: StringWithAggregatesFilter<"user_account"> | string
    email?: StringWithAggregatesFilter<"user_account"> | string
    password?: StringWithAggregatesFilter<"user_account"> | string
    role?: Enumaccount_roleWithAggregatesFilter<"user_account"> | $Enums.account_role
    referral_code?: StringWithAggregatesFilter<"user_account"> | string
    referred_by_code?: StringNullableWithAggregatesFilter<"user_account"> | string | null
    imgProfile?: StringNullableWithAggregatesFilter<"user_account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user_account"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"user_account"> | Date | string | null
  }

  export type user_profileWhereInput = {
    AND?: user_profileWhereInput | user_profileWhereInput[]
    OR?: user_profileWhereInput[]
    NOT?: user_profileWhereInput | user_profileWhereInput[]
    id?: IntFilter<"user_profile"> | number
    user_id?: IntFilter<"user_profile"> | number
    user_fullname?: StringFilter<"user_profile"> | string
    user_date_of_birth?: DateTimeFilter<"user_profile"> | Date | string
    user_phone?: IntFilter<"user_profile"> | number
    user_profile_image?: StringFilter<"user_profile"> | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }

  export type user_profileOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_fullname?: SortOrder
    user_date_of_birth?: SortOrder
    user_phone?: SortOrder
    user_profile_image?: SortOrder
    user?: user_accountOrderByWithRelationInput
  }

  export type user_profileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: user_profileWhereInput | user_profileWhereInput[]
    OR?: user_profileWhereInput[]
    NOT?: user_profileWhereInput | user_profileWhereInput[]
    user_fullname?: StringFilter<"user_profile"> | string
    user_date_of_birth?: DateTimeFilter<"user_profile"> | Date | string
    user_phone?: IntFilter<"user_profile"> | number
    user_profile_image?: StringFilter<"user_profile"> | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }, "id" | "user_id">

  export type user_profileOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_fullname?: SortOrder
    user_date_of_birth?: SortOrder
    user_phone?: SortOrder
    user_profile_image?: SortOrder
    _count?: user_profileCountOrderByAggregateInput
    _avg?: user_profileAvgOrderByAggregateInput
    _max?: user_profileMaxOrderByAggregateInput
    _min?: user_profileMinOrderByAggregateInput
    _sum?: user_profileSumOrderByAggregateInput
  }

  export type user_profileScalarWhereWithAggregatesInput = {
    AND?: user_profileScalarWhereWithAggregatesInput | user_profileScalarWhereWithAggregatesInput[]
    OR?: user_profileScalarWhereWithAggregatesInput[]
    NOT?: user_profileScalarWhereWithAggregatesInput | user_profileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_profile"> | number
    user_id?: IntWithAggregatesFilter<"user_profile"> | number
    user_fullname?: StringWithAggregatesFilter<"user_profile"> | string
    user_date_of_birth?: DateTimeWithAggregatesFilter<"user_profile"> | Date | string
    user_phone?: IntWithAggregatesFilter<"user_profile"> | number
    user_profile_image?: StringWithAggregatesFilter<"user_profile"> | string
  }

  export type user_pointsWhereInput = {
    AND?: user_pointsWhereInput | user_pointsWhereInput[]
    OR?: user_pointsWhereInput[]
    NOT?: user_pointsWhereInput | user_pointsWhereInput[]
    id?: IntFilter<"user_points"> | number
    points?: IntFilter<"user_points"> | number
    points_source_type?: StringFilter<"user_points"> | string
    points_source_id?: IntFilter<"user_points"> | number
    earned_at?: DateTimeFilter<"user_points"> | Date | string
    expires_at?: DateTimeFilter<"user_points"> | Date | string
    points_remaining?: IntFilter<"user_points"> | number
    user_id?: IntFilter<"user_points"> | number
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    points_redemption_items?: Points_redemption_itemsListRelationFilter
  }

  export type user_pointsOrderByWithRelationInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_type?: SortOrder
    points_source_id?: SortOrder
    earned_at?: SortOrder
    expires_at?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
    user?: user_accountOrderByWithRelationInput
    points_redemption_items?: points_redemption_itemsOrderByRelationAggregateInput
  }

  export type user_pointsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_pointsWhereInput | user_pointsWhereInput[]
    OR?: user_pointsWhereInput[]
    NOT?: user_pointsWhereInput | user_pointsWhereInput[]
    points?: IntFilter<"user_points"> | number
    points_source_type?: StringFilter<"user_points"> | string
    points_source_id?: IntFilter<"user_points"> | number
    earned_at?: DateTimeFilter<"user_points"> | Date | string
    expires_at?: DateTimeFilter<"user_points"> | Date | string
    points_remaining?: IntFilter<"user_points"> | number
    user_id?: IntFilter<"user_points"> | number
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    points_redemption_items?: Points_redemption_itemsListRelationFilter
  }, "id">

  export type user_pointsOrderByWithAggregationInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_type?: SortOrder
    points_source_id?: SortOrder
    earned_at?: SortOrder
    expires_at?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
    _count?: user_pointsCountOrderByAggregateInput
    _avg?: user_pointsAvgOrderByAggregateInput
    _max?: user_pointsMaxOrderByAggregateInput
    _min?: user_pointsMinOrderByAggregateInput
    _sum?: user_pointsSumOrderByAggregateInput
  }

  export type user_pointsScalarWhereWithAggregatesInput = {
    AND?: user_pointsScalarWhereWithAggregatesInput | user_pointsScalarWhereWithAggregatesInput[]
    OR?: user_pointsScalarWhereWithAggregatesInput[]
    NOT?: user_pointsScalarWhereWithAggregatesInput | user_pointsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_points"> | number
    points?: IntWithAggregatesFilter<"user_points"> | number
    points_source_type?: StringWithAggregatesFilter<"user_points"> | string
    points_source_id?: IntWithAggregatesFilter<"user_points"> | number
    earned_at?: DateTimeWithAggregatesFilter<"user_points"> | Date | string
    expires_at?: DateTimeWithAggregatesFilter<"user_points"> | Date | string
    points_remaining?: IntWithAggregatesFilter<"user_points"> | number
    user_id?: IntWithAggregatesFilter<"user_points"> | number
  }

  export type points_redemptionWhereInput = {
    AND?: points_redemptionWhereInput | points_redemptionWhereInput[]
    OR?: points_redemptionWhereInput[]
    NOT?: points_redemptionWhereInput | points_redemptionWhereInput[]
    id?: IntFilter<"points_redemption"> | number
    user_id?: IntFilter<"points_redemption"> | number
    total_points?: IntFilter<"points_redemption"> | number
    redeemed_at?: DateTimeFilter<"points_redemption"> | Date | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    points_redemption_items?: Points_redemption_itemsListRelationFilter
  }

  export type points_redemptionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
    redeemed_at?: SortOrder
    user?: user_accountOrderByWithRelationInput
    points_redemption_items?: points_redemption_itemsOrderByRelationAggregateInput
  }

  export type points_redemptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: points_redemptionWhereInput | points_redemptionWhereInput[]
    OR?: points_redemptionWhereInput[]
    NOT?: points_redemptionWhereInput | points_redemptionWhereInput[]
    user_id?: IntFilter<"points_redemption"> | number
    total_points?: IntFilter<"points_redemption"> | number
    redeemed_at?: DateTimeFilter<"points_redemption"> | Date | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    points_redemption_items?: Points_redemption_itemsListRelationFilter
  }, "id">

  export type points_redemptionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
    redeemed_at?: SortOrder
    _count?: points_redemptionCountOrderByAggregateInput
    _avg?: points_redemptionAvgOrderByAggregateInput
    _max?: points_redemptionMaxOrderByAggregateInput
    _min?: points_redemptionMinOrderByAggregateInput
    _sum?: points_redemptionSumOrderByAggregateInput
  }

  export type points_redemptionScalarWhereWithAggregatesInput = {
    AND?: points_redemptionScalarWhereWithAggregatesInput | points_redemptionScalarWhereWithAggregatesInput[]
    OR?: points_redemptionScalarWhereWithAggregatesInput[]
    NOT?: points_redemptionScalarWhereWithAggregatesInput | points_redemptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"points_redemption"> | number
    user_id?: IntWithAggregatesFilter<"points_redemption"> | number
    total_points?: IntWithAggregatesFilter<"points_redemption"> | number
    redeemed_at?: DateTimeWithAggregatesFilter<"points_redemption"> | Date | string
  }

  export type points_redemption_itemsWhereInput = {
    AND?: points_redemption_itemsWhereInput | points_redemption_itemsWhereInput[]
    OR?: points_redemption_itemsWhereInput[]
    NOT?: points_redemption_itemsWhereInput | points_redemption_itemsWhereInput[]
    id?: IntFilter<"points_redemption_items"> | number
    user_point_id?: IntFilter<"points_redemption_items"> | number
    redemption_id?: IntFilter<"points_redemption_items"> | number
    user_points?: XOR<User_pointsScalarRelationFilter, user_pointsWhereInput>
    points_redemption?: XOR<Points_redemptionScalarRelationFilter, points_redemptionWhereInput>
  }

  export type points_redemption_itemsOrderByWithRelationInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
    user_points?: user_pointsOrderByWithRelationInput
    points_redemption?: points_redemptionOrderByWithRelationInput
  }

  export type points_redemption_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_point_id_redemption_id?: points_redemption_itemsUser_point_idRedemption_idCompoundUniqueInput
    AND?: points_redemption_itemsWhereInput | points_redemption_itemsWhereInput[]
    OR?: points_redemption_itemsWhereInput[]
    NOT?: points_redemption_itemsWhereInput | points_redemption_itemsWhereInput[]
    user_point_id?: IntFilter<"points_redemption_items"> | number
    redemption_id?: IntFilter<"points_redemption_items"> | number
    user_points?: XOR<User_pointsScalarRelationFilter, user_pointsWhereInput>
    points_redemption?: XOR<Points_redemptionScalarRelationFilter, points_redemptionWhereInput>
  }, "id" | "user_point_id_redemption_id">

  export type points_redemption_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
    _count?: points_redemption_itemsCountOrderByAggregateInput
    _avg?: points_redemption_itemsAvgOrderByAggregateInput
    _max?: points_redemption_itemsMaxOrderByAggregateInput
    _min?: points_redemption_itemsMinOrderByAggregateInput
    _sum?: points_redemption_itemsSumOrderByAggregateInput
  }

  export type points_redemption_itemsScalarWhereWithAggregatesInput = {
    AND?: points_redemption_itemsScalarWhereWithAggregatesInput | points_redemption_itemsScalarWhereWithAggregatesInput[]
    OR?: points_redemption_itemsScalarWhereWithAggregatesInput[]
    NOT?: points_redemption_itemsScalarWhereWithAggregatesInput | points_redemption_itemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"points_redemption_items"> | number
    user_point_id?: IntWithAggregatesFilter<"points_redemption_items"> | number
    redemption_id?: IntWithAggregatesFilter<"points_redemption_items"> | number
  }

  export type coupon_tableWhereInput = {
    AND?: coupon_tableWhereInput | coupon_tableWhereInput[]
    OR?: coupon_tableWhereInput[]
    NOT?: coupon_tableWhereInput | coupon_tableWhereInput[]
    id?: IntFilter<"coupon_table"> | number
    event_id?: IntNullableFilter<"coupon_table"> | number | null
    code?: StringFilter<"coupon_table"> | string
    discount_type?: Enumdiscount_typeFilter<"coupon_table"> | $Enums.discount_type
    discount_value?: IntFilter<"coupon_table"> | number
    created_at?: DateTimeFilter<"coupon_table"> | Date | string
    expires_at?: DateTimeFilter<"coupon_table"> | Date | string
    used_at?: DateTimeNullableFilter<"coupon_table"> | Date | string | null
    usage_limit?: IntFilter<"coupon_table"> | number
    used_count?: IntFilter<"coupon_table"> | number
    status?: Enumcoupon_statusFilter<"coupon_table"> | $Enums.coupon_status
    issued_by?: EnumissuerFilter<"coupon_table"> | $Enums.issuer
    user_coupon?: User_couponListRelationFilter
  }

  export type coupon_tableOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrderInput | SortOrder
    code?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    used_at?: SortOrderInput | SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
    status?: SortOrder
    issued_by?: SortOrder
    user_coupon?: user_couponOrderByRelationAggregateInput
  }

  export type coupon_tableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: coupon_tableWhereInput | coupon_tableWhereInput[]
    OR?: coupon_tableWhereInput[]
    NOT?: coupon_tableWhereInput | coupon_tableWhereInput[]
    event_id?: IntNullableFilter<"coupon_table"> | number | null
    discount_type?: Enumdiscount_typeFilter<"coupon_table"> | $Enums.discount_type
    discount_value?: IntFilter<"coupon_table"> | number
    created_at?: DateTimeFilter<"coupon_table"> | Date | string
    expires_at?: DateTimeFilter<"coupon_table"> | Date | string
    used_at?: DateTimeNullableFilter<"coupon_table"> | Date | string | null
    usage_limit?: IntFilter<"coupon_table"> | number
    used_count?: IntFilter<"coupon_table"> | number
    status?: Enumcoupon_statusFilter<"coupon_table"> | $Enums.coupon_status
    issued_by?: EnumissuerFilter<"coupon_table"> | $Enums.issuer
    user_coupon?: User_couponListRelationFilter
  }, "id" | "code">

  export type coupon_tableOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrderInput | SortOrder
    code?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    used_at?: SortOrderInput | SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
    status?: SortOrder
    issued_by?: SortOrder
    _count?: coupon_tableCountOrderByAggregateInput
    _avg?: coupon_tableAvgOrderByAggregateInput
    _max?: coupon_tableMaxOrderByAggregateInput
    _min?: coupon_tableMinOrderByAggregateInput
    _sum?: coupon_tableSumOrderByAggregateInput
  }

  export type coupon_tableScalarWhereWithAggregatesInput = {
    AND?: coupon_tableScalarWhereWithAggregatesInput | coupon_tableScalarWhereWithAggregatesInput[]
    OR?: coupon_tableScalarWhereWithAggregatesInput[]
    NOT?: coupon_tableScalarWhereWithAggregatesInput | coupon_tableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"coupon_table"> | number
    event_id?: IntNullableWithAggregatesFilter<"coupon_table"> | number | null
    code?: StringWithAggregatesFilter<"coupon_table"> | string
    discount_type?: Enumdiscount_typeWithAggregatesFilter<"coupon_table"> | $Enums.discount_type
    discount_value?: IntWithAggregatesFilter<"coupon_table"> | number
    created_at?: DateTimeWithAggregatesFilter<"coupon_table"> | Date | string
    expires_at?: DateTimeWithAggregatesFilter<"coupon_table"> | Date | string
    used_at?: DateTimeNullableWithAggregatesFilter<"coupon_table"> | Date | string | null
    usage_limit?: IntWithAggregatesFilter<"coupon_table"> | number
    used_count?: IntWithAggregatesFilter<"coupon_table"> | number
    status?: Enumcoupon_statusWithAggregatesFilter<"coupon_table"> | $Enums.coupon_status
    issued_by?: EnumissuerWithAggregatesFilter<"coupon_table"> | $Enums.issuer
  }

  export type user_couponWhereInput = {
    AND?: user_couponWhereInput | user_couponWhereInput[]
    OR?: user_couponWhereInput[]
    NOT?: user_couponWhereInput | user_couponWhereInput[]
    id?: IntFilter<"user_coupon"> | number
    user_id?: IntFilter<"user_coupon"> | number
    coupon_id?: IntFilter<"user_coupon"> | number
    used_at?: DateTimeNullableFilter<"user_coupon"> | Date | string | null
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    coupon?: XOR<Coupon_tableScalarRelationFilter, coupon_tableWhereInput>
  }

  export type user_couponOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
    used_at?: SortOrderInput | SortOrder
    user?: user_accountOrderByWithRelationInput
    coupon?: coupon_tableOrderByWithRelationInput
  }

  export type user_couponWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_coupon_id?: user_couponUser_idCoupon_idCompoundUniqueInput
    AND?: user_couponWhereInput | user_couponWhereInput[]
    OR?: user_couponWhereInput[]
    NOT?: user_couponWhereInput | user_couponWhereInput[]
    user_id?: IntFilter<"user_coupon"> | number
    coupon_id?: IntFilter<"user_coupon"> | number
    used_at?: DateTimeNullableFilter<"user_coupon"> | Date | string | null
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    coupon?: XOR<Coupon_tableScalarRelationFilter, coupon_tableWhereInput>
  }, "id" | "user_id_coupon_id">

  export type user_couponOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
    used_at?: SortOrderInput | SortOrder
    _count?: user_couponCountOrderByAggregateInput
    _avg?: user_couponAvgOrderByAggregateInput
    _max?: user_couponMaxOrderByAggregateInput
    _min?: user_couponMinOrderByAggregateInput
    _sum?: user_couponSumOrderByAggregateInput
  }

  export type user_couponScalarWhereWithAggregatesInput = {
    AND?: user_couponScalarWhereWithAggregatesInput | user_couponScalarWhereWithAggregatesInput[]
    OR?: user_couponScalarWhereWithAggregatesInput[]
    NOT?: user_couponScalarWhereWithAggregatesInput | user_couponScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_coupon"> | number
    user_id?: IntWithAggregatesFilter<"user_coupon"> | number
    coupon_id?: IntWithAggregatesFilter<"user_coupon"> | number
    used_at?: DateTimeNullableWithAggregatesFilter<"user_coupon"> | Date | string | null
  }

  export type organizer_accountWhereInput = {
    AND?: organizer_accountWhereInput | organizer_accountWhereInput[]
    OR?: organizer_accountWhereInput[]
    NOT?: organizer_accountWhereInput | organizer_accountWhereInput[]
    id?: IntFilter<"organizer_account"> | number
    username?: StringFilter<"organizer_account"> | string
    email?: StringFilter<"organizer_account"> | string
    password?: StringFilter<"organizer_account"> | string
    role?: Enumaccount_roleFilter<"organizer_account"> | $Enums.account_role
    organizer_profile?: XOR<Organizer_profileNullableScalarRelationFilter, organizer_profileWhereInput> | null
    organizer_reviews?: Organizer_reviewsListRelationFilter
    event_table?: Event_tableListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    voucher?: Voucher_tableListRelationFilter
  }

  export type organizer_accountOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    organizer_profile?: organizer_profileOrderByWithRelationInput
    organizer_reviews?: organizer_reviewsOrderByRelationAggregateInput
    event_table?: event_tableOrderByRelationAggregateInput
    event_attendees?: event_attendeesOrderByRelationAggregateInput
    voucher?: voucher_tableOrderByRelationAggregateInput
  }

  export type organizer_accountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: organizer_accountWhereInput | organizer_accountWhereInput[]
    OR?: organizer_accountWhereInput[]
    NOT?: organizer_accountWhereInput | organizer_accountWhereInput[]
    username?: StringFilter<"organizer_account"> | string
    password?: StringFilter<"organizer_account"> | string
    role?: Enumaccount_roleFilter<"organizer_account"> | $Enums.account_role
    organizer_profile?: XOR<Organizer_profileNullableScalarRelationFilter, organizer_profileWhereInput> | null
    organizer_reviews?: Organizer_reviewsListRelationFilter
    event_table?: Event_tableListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    voucher?: Voucher_tableListRelationFilter
  }, "id" | "email">

  export type organizer_accountOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: organizer_accountCountOrderByAggregateInput
    _avg?: organizer_accountAvgOrderByAggregateInput
    _max?: organizer_accountMaxOrderByAggregateInput
    _min?: organizer_accountMinOrderByAggregateInput
    _sum?: organizer_accountSumOrderByAggregateInput
  }

  export type organizer_accountScalarWhereWithAggregatesInput = {
    AND?: organizer_accountScalarWhereWithAggregatesInput | organizer_accountScalarWhereWithAggregatesInput[]
    OR?: organizer_accountScalarWhereWithAggregatesInput[]
    NOT?: organizer_accountScalarWhereWithAggregatesInput | organizer_accountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"organizer_account"> | number
    username?: StringWithAggregatesFilter<"organizer_account"> | string
    email?: StringWithAggregatesFilter<"organizer_account"> | string
    password?: StringWithAggregatesFilter<"organizer_account"> | string
    role?: Enumaccount_roleWithAggregatesFilter<"organizer_account"> | $Enums.account_role
  }

  export type organizer_profileWhereInput = {
    AND?: organizer_profileWhereInput | organizer_profileWhereInput[]
    OR?: organizer_profileWhereInput[]
    NOT?: organizer_profileWhereInput | organizer_profileWhereInput[]
    id?: IntFilter<"organizer_profile"> | number
    organizer_id?: IntFilter<"organizer_profile"> | number
    organizer_name?: StringFilter<"organizer_profile"> | string
    organizer_address?: StringFilter<"organizer_profile"> | string
    organizer_phone?: IntFilter<"organizer_profile"> | number
    organizer_profile_image?: StringFilter<"organizer_profile"> | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
  }

  export type organizer_profileOrderByWithRelationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_address?: SortOrder
    organizer_phone?: SortOrder
    organizer_profile_image?: SortOrder
    organizer?: organizer_accountOrderByWithRelationInput
  }

  export type organizer_profileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    organizer_id?: number
    AND?: organizer_profileWhereInput | organizer_profileWhereInput[]
    OR?: organizer_profileWhereInput[]
    NOT?: organizer_profileWhereInput | organizer_profileWhereInput[]
    organizer_name?: StringFilter<"organizer_profile"> | string
    organizer_address?: StringFilter<"organizer_profile"> | string
    organizer_phone?: IntFilter<"organizer_profile"> | number
    organizer_profile_image?: StringFilter<"organizer_profile"> | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
  }, "id" | "organizer_id">

  export type organizer_profileOrderByWithAggregationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_address?: SortOrder
    organizer_phone?: SortOrder
    organizer_profile_image?: SortOrder
    _count?: organizer_profileCountOrderByAggregateInput
    _avg?: organizer_profileAvgOrderByAggregateInput
    _max?: organizer_profileMaxOrderByAggregateInput
    _min?: organizer_profileMinOrderByAggregateInput
    _sum?: organizer_profileSumOrderByAggregateInput
  }

  export type organizer_profileScalarWhereWithAggregatesInput = {
    AND?: organizer_profileScalarWhereWithAggregatesInput | organizer_profileScalarWhereWithAggregatesInput[]
    OR?: organizer_profileScalarWhereWithAggregatesInput[]
    NOT?: organizer_profileScalarWhereWithAggregatesInput | organizer_profileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"organizer_profile"> | number
    organizer_id?: IntWithAggregatesFilter<"organizer_profile"> | number
    organizer_name?: StringWithAggregatesFilter<"organizer_profile"> | string
    organizer_address?: StringWithAggregatesFilter<"organizer_profile"> | string
    organizer_phone?: IntWithAggregatesFilter<"organizer_profile"> | number
    organizer_profile_image?: StringWithAggregatesFilter<"organizer_profile"> | string
  }

  export type organizer_reviewsWhereInput = {
    AND?: organizer_reviewsWhereInput | organizer_reviewsWhereInput[]
    OR?: organizer_reviewsWhereInput[]
    NOT?: organizer_reviewsWhereInput | organizer_reviewsWhereInput[]
    id?: IntFilter<"organizer_reviews"> | number
    organizer_id?: IntFilter<"organizer_reviews"> | number
    event_id?: IntFilter<"organizer_reviews"> | number
    user_id?: IntFilter<"organizer_reviews"> | number
    rating?: IntFilter<"organizer_reviews"> | number
    review?: StringFilter<"organizer_reviews"> | string
    created_at?: DateTimeFilter<"organizer_reviews"> | Date | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }

  export type organizer_reviewsOrderByWithRelationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    created_at?: SortOrder
    organizer?: organizer_accountOrderByWithRelationInput
    event?: event_tableOrderByWithRelationInput
    user?: user_accountOrderByWithRelationInput
  }

  export type organizer_reviewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: organizer_reviewsWhereInput | organizer_reviewsWhereInput[]
    OR?: organizer_reviewsWhereInput[]
    NOT?: organizer_reviewsWhereInput | organizer_reviewsWhereInput[]
    organizer_id?: IntFilter<"organizer_reviews"> | number
    event_id?: IntFilter<"organizer_reviews"> | number
    user_id?: IntFilter<"organizer_reviews"> | number
    rating?: IntFilter<"organizer_reviews"> | number
    review?: StringFilter<"organizer_reviews"> | string
    created_at?: DateTimeFilter<"organizer_reviews"> | Date | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }, "id">

  export type organizer_reviewsOrderByWithAggregationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    created_at?: SortOrder
    _count?: organizer_reviewsCountOrderByAggregateInput
    _avg?: organizer_reviewsAvgOrderByAggregateInput
    _max?: organizer_reviewsMaxOrderByAggregateInput
    _min?: organizer_reviewsMinOrderByAggregateInput
    _sum?: organizer_reviewsSumOrderByAggregateInput
  }

  export type organizer_reviewsScalarWhereWithAggregatesInput = {
    AND?: organizer_reviewsScalarWhereWithAggregatesInput | organizer_reviewsScalarWhereWithAggregatesInput[]
    OR?: organizer_reviewsScalarWhereWithAggregatesInput[]
    NOT?: organizer_reviewsScalarWhereWithAggregatesInput | organizer_reviewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"organizer_reviews"> | number
    organizer_id?: IntWithAggregatesFilter<"organizer_reviews"> | number
    event_id?: IntWithAggregatesFilter<"organizer_reviews"> | number
    user_id?: IntWithAggregatesFilter<"organizer_reviews"> | number
    rating?: IntWithAggregatesFilter<"organizer_reviews"> | number
    review?: StringWithAggregatesFilter<"organizer_reviews"> | string
    created_at?: DateTimeWithAggregatesFilter<"organizer_reviews"> | Date | string
  }

  export type event_tableWhereInput = {
    AND?: event_tableWhereInput | event_tableWhereInput[]
    OR?: event_tableWhereInput[]
    NOT?: event_tableWhereInput | event_tableWhereInput[]
    id?: IntFilter<"event_table"> | number
    organizer_id?: IntFilter<"event_table"> | number
    name?: StringFilter<"event_table"> | string
    price?: IntFilter<"event_table"> | number
    start_date?: DateTimeFilter<"event_table"> | Date | string
    end_date?: DateTimeFilter<"event_table"> | Date | string
    seat_capacity?: IntFilter<"event_table"> | number
    event_type?: StringFilter<"event_table"> | string
    created_at?: DateTimeFilter<"event_table"> | Date | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    organizer_reviews?: Organizer_reviewsListRelationFilter
    ticket_holds?: Ticket_holdsListRelationFilter
    ticket_type?: Ticket_typeListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    transactions?: Transactions_tableListRelationFilter
    voucher?: Voucher_tableListRelationFilter
  }

  export type event_tableOrderByWithRelationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    seat_capacity?: SortOrder
    event_type?: SortOrder
    created_at?: SortOrder
    organizer?: organizer_accountOrderByWithRelationInput
    organizer_reviews?: organizer_reviewsOrderByRelationAggregateInput
    ticket_holds?: ticket_holdsOrderByRelationAggregateInput
    ticket_type?: ticket_typeOrderByRelationAggregateInput
    event_attendees?: event_attendeesOrderByRelationAggregateInput
    transactions?: transactions_tableOrderByRelationAggregateInput
    voucher?: voucher_tableOrderByRelationAggregateInput
  }

  export type event_tableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: event_tableWhereInput | event_tableWhereInput[]
    OR?: event_tableWhereInput[]
    NOT?: event_tableWhereInput | event_tableWhereInput[]
    organizer_id?: IntFilter<"event_table"> | number
    name?: StringFilter<"event_table"> | string
    price?: IntFilter<"event_table"> | number
    start_date?: DateTimeFilter<"event_table"> | Date | string
    end_date?: DateTimeFilter<"event_table"> | Date | string
    seat_capacity?: IntFilter<"event_table"> | number
    event_type?: StringFilter<"event_table"> | string
    created_at?: DateTimeFilter<"event_table"> | Date | string
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    organizer_reviews?: Organizer_reviewsListRelationFilter
    ticket_holds?: Ticket_holdsListRelationFilter
    ticket_type?: Ticket_typeListRelationFilter
    event_attendees?: Event_attendeesListRelationFilter
    transactions?: Transactions_tableListRelationFilter
    voucher?: Voucher_tableListRelationFilter
  }, "id">

  export type event_tableOrderByWithAggregationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    seat_capacity?: SortOrder
    event_type?: SortOrder
    created_at?: SortOrder
    _count?: event_tableCountOrderByAggregateInput
    _avg?: event_tableAvgOrderByAggregateInput
    _max?: event_tableMaxOrderByAggregateInput
    _min?: event_tableMinOrderByAggregateInput
    _sum?: event_tableSumOrderByAggregateInput
  }

  export type event_tableScalarWhereWithAggregatesInput = {
    AND?: event_tableScalarWhereWithAggregatesInput | event_tableScalarWhereWithAggregatesInput[]
    OR?: event_tableScalarWhereWithAggregatesInput[]
    NOT?: event_tableScalarWhereWithAggregatesInput | event_tableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"event_table"> | number
    organizer_id?: IntWithAggregatesFilter<"event_table"> | number
    name?: StringWithAggregatesFilter<"event_table"> | string
    price?: IntWithAggregatesFilter<"event_table"> | number
    start_date?: DateTimeWithAggregatesFilter<"event_table"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"event_table"> | Date | string
    seat_capacity?: IntWithAggregatesFilter<"event_table"> | number
    event_type?: StringWithAggregatesFilter<"event_table"> | string
    created_at?: DateTimeWithAggregatesFilter<"event_table"> | Date | string
  }

  export type ticket_holdsWhereInput = {
    AND?: ticket_holdsWhereInput | ticket_holdsWhereInput[]
    OR?: ticket_holdsWhereInput[]
    NOT?: ticket_holdsWhereInput | ticket_holdsWhereInput[]
    id?: IntFilter<"ticket_holds"> | number
    event_id?: IntFilter<"ticket_holds"> | number
    user_id?: IntFilter<"ticket_holds"> | number
    ticket_type_id?: IntFilter<"ticket_holds"> | number
    ticket_quantity?: IntFilter<"ticket_holds"> | number
    held_at?: DateTimeFilter<"ticket_holds"> | Date | string
    expires_at?: DateTimeFilter<"ticket_holds"> | Date | string
    transactions_id?: IntFilter<"ticket_holds"> | number
    status?: Enumcoupon_statusFilter<"ticket_holds"> | $Enums.coupon_status
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    ticket_type?: XOR<Ticket_typeScalarRelationFilter, ticket_typeWhereInput>
    transactions?: XOR<Transactions_tableScalarRelationFilter, transactions_tableWhereInput>
  }

  export type ticket_holdsOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    held_at?: SortOrder
    expires_at?: SortOrder
    transactions_id?: SortOrder
    status?: SortOrder
    event?: event_tableOrderByWithRelationInput
    user?: user_accountOrderByWithRelationInput
    ticket_type?: ticket_typeOrderByWithRelationInput
    transactions?: transactions_tableOrderByWithRelationInput
  }

  export type ticket_holdsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticket_holdsWhereInput | ticket_holdsWhereInput[]
    OR?: ticket_holdsWhereInput[]
    NOT?: ticket_holdsWhereInput | ticket_holdsWhereInput[]
    event_id?: IntFilter<"ticket_holds"> | number
    user_id?: IntFilter<"ticket_holds"> | number
    ticket_type_id?: IntFilter<"ticket_holds"> | number
    ticket_quantity?: IntFilter<"ticket_holds"> | number
    held_at?: DateTimeFilter<"ticket_holds"> | Date | string
    expires_at?: DateTimeFilter<"ticket_holds"> | Date | string
    transactions_id?: IntFilter<"ticket_holds"> | number
    status?: Enumcoupon_statusFilter<"ticket_holds"> | $Enums.coupon_status
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    ticket_type?: XOR<Ticket_typeScalarRelationFilter, ticket_typeWhereInput>
    transactions?: XOR<Transactions_tableScalarRelationFilter, transactions_tableWhereInput>
  }, "id">

  export type ticket_holdsOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    held_at?: SortOrder
    expires_at?: SortOrder
    transactions_id?: SortOrder
    status?: SortOrder
    _count?: ticket_holdsCountOrderByAggregateInput
    _avg?: ticket_holdsAvgOrderByAggregateInput
    _max?: ticket_holdsMaxOrderByAggregateInput
    _min?: ticket_holdsMinOrderByAggregateInput
    _sum?: ticket_holdsSumOrderByAggregateInput
  }

  export type ticket_holdsScalarWhereWithAggregatesInput = {
    AND?: ticket_holdsScalarWhereWithAggregatesInput | ticket_holdsScalarWhereWithAggregatesInput[]
    OR?: ticket_holdsScalarWhereWithAggregatesInput[]
    NOT?: ticket_holdsScalarWhereWithAggregatesInput | ticket_holdsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket_holds"> | number
    event_id?: IntWithAggregatesFilter<"ticket_holds"> | number
    user_id?: IntWithAggregatesFilter<"ticket_holds"> | number
    ticket_type_id?: IntWithAggregatesFilter<"ticket_holds"> | number
    ticket_quantity?: IntWithAggregatesFilter<"ticket_holds"> | number
    held_at?: DateTimeWithAggregatesFilter<"ticket_holds"> | Date | string
    expires_at?: DateTimeWithAggregatesFilter<"ticket_holds"> | Date | string
    transactions_id?: IntWithAggregatesFilter<"ticket_holds"> | number
    status?: Enumcoupon_statusWithAggregatesFilter<"ticket_holds"> | $Enums.coupon_status
  }

  export type ticket_typeWhereInput = {
    AND?: ticket_typeWhereInput | ticket_typeWhereInput[]
    OR?: ticket_typeWhereInput[]
    NOT?: ticket_typeWhereInput | ticket_typeWhereInput[]
    id?: IntFilter<"ticket_type"> | number
    event_id?: IntFilter<"ticket_type"> | number
    type_name?: StringFilter<"ticket_type"> | string
    price?: IntFilter<"ticket_type"> | number
    quota?: IntFilter<"ticket_type"> | number
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    ticket_holds?: Ticket_holdsListRelationFilter
  }

  export type ticket_typeOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrder
    type_name?: SortOrder
    price?: SortOrder
    quota?: SortOrder
    event?: event_tableOrderByWithRelationInput
    ticket_holds?: ticket_holdsOrderByRelationAggregateInput
  }

  export type ticket_typeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ticket_typeWhereInput | ticket_typeWhereInput[]
    OR?: ticket_typeWhereInput[]
    NOT?: ticket_typeWhereInput | ticket_typeWhereInput[]
    event_id?: IntFilter<"ticket_type"> | number
    type_name?: StringFilter<"ticket_type"> | string
    price?: IntFilter<"ticket_type"> | number
    quota?: IntFilter<"ticket_type"> | number
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    ticket_holds?: Ticket_holdsListRelationFilter
  }, "id">

  export type ticket_typeOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrder
    type_name?: SortOrder
    price?: SortOrder
    quota?: SortOrder
    _count?: ticket_typeCountOrderByAggregateInput
    _avg?: ticket_typeAvgOrderByAggregateInput
    _max?: ticket_typeMaxOrderByAggregateInput
    _min?: ticket_typeMinOrderByAggregateInput
    _sum?: ticket_typeSumOrderByAggregateInput
  }

  export type ticket_typeScalarWhereWithAggregatesInput = {
    AND?: ticket_typeScalarWhereWithAggregatesInput | ticket_typeScalarWhereWithAggregatesInput[]
    OR?: ticket_typeScalarWhereWithAggregatesInput[]
    NOT?: ticket_typeScalarWhereWithAggregatesInput | ticket_typeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ticket_type"> | number
    event_id?: IntWithAggregatesFilter<"ticket_type"> | number
    type_name?: StringWithAggregatesFilter<"ticket_type"> | string
    price?: IntWithAggregatesFilter<"ticket_type"> | number
    quota?: IntWithAggregatesFilter<"ticket_type"> | number
  }

  export type event_attendeesWhereInput = {
    AND?: event_attendeesWhereInput | event_attendeesWhereInput[]
    OR?: event_attendeesWhereInput[]
    NOT?: event_attendeesWhereInput | event_attendeesWhereInput[]
    id?: IntFilter<"event_attendees"> | number
    event_id?: IntFilter<"event_attendees"> | number
    organizer_id?: IntFilter<"event_attendees"> | number
    user_id?: IntFilter<"event_attendees"> | number
    ticket_quantity?: IntFilter<"event_attendees"> | number
    total_price_paid?: IntFilter<"event_attendees"> | number
    status?: Enumevent_statusFilter<"event_attendees"> | $Enums.event_status
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }

  export type event_attendeesOrderByWithRelationInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
    status?: SortOrder
    event?: event_tableOrderByWithRelationInput
    organizer?: organizer_accountOrderByWithRelationInput
    user?: user_accountOrderByWithRelationInput
  }

  export type event_attendeesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    event_id_user_id?: event_attendeesEvent_idUser_idCompoundUniqueInput
    AND?: event_attendeesWhereInput | event_attendeesWhereInput[]
    OR?: event_attendeesWhereInput[]
    NOT?: event_attendeesWhereInput | event_attendeesWhereInput[]
    event_id?: IntFilter<"event_attendees"> | number
    organizer_id?: IntFilter<"event_attendees"> | number
    user_id?: IntFilter<"event_attendees"> | number
    ticket_quantity?: IntFilter<"event_attendees"> | number
    total_price_paid?: IntFilter<"event_attendees"> | number
    status?: Enumevent_statusFilter<"event_attendees"> | $Enums.event_status
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
  }, "id" | "event_id_user_id">

  export type event_attendeesOrderByWithAggregationInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
    status?: SortOrder
    _count?: event_attendeesCountOrderByAggregateInput
    _avg?: event_attendeesAvgOrderByAggregateInput
    _max?: event_attendeesMaxOrderByAggregateInput
    _min?: event_attendeesMinOrderByAggregateInput
    _sum?: event_attendeesSumOrderByAggregateInput
  }

  export type event_attendeesScalarWhereWithAggregatesInput = {
    AND?: event_attendeesScalarWhereWithAggregatesInput | event_attendeesScalarWhereWithAggregatesInput[]
    OR?: event_attendeesScalarWhereWithAggregatesInput[]
    NOT?: event_attendeesScalarWhereWithAggregatesInput | event_attendeesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"event_attendees"> | number
    event_id?: IntWithAggregatesFilter<"event_attendees"> | number
    organizer_id?: IntWithAggregatesFilter<"event_attendees"> | number
    user_id?: IntWithAggregatesFilter<"event_attendees"> | number
    ticket_quantity?: IntWithAggregatesFilter<"event_attendees"> | number
    total_price_paid?: IntWithAggregatesFilter<"event_attendees"> | number
    status?: Enumevent_statusWithAggregatesFilter<"event_attendees"> | $Enums.event_status
  }

  export type transactions_tableWhereInput = {
    AND?: transactions_tableWhereInput | transactions_tableWhereInput[]
    OR?: transactions_tableWhereInput[]
    NOT?: transactions_tableWhereInput | transactions_tableWhereInput[]
    id?: IntFilter<"transactions_table"> | number
    user_id?: IntFilter<"transactions_table"> | number
    event_id?: IntFilter<"transactions_table"> | number
    voucher_id?: IntNullableFilter<"transactions_table"> | number | null
    created_at?: DateTimeFilter<"transactions_table"> | Date | string
    status?: Enumtransactions_statusFilter<"transactions_table"> | $Enums.transactions_status
    payment_proof_url?: StringFilter<"transactions_table"> | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    ticket?: Ticket_holdsListRelationFilter
    voucher?: XOR<Voucher_tableNullableScalarRelationFilter, voucher_tableWhereInput> | null
  }

  export type transactions_tableOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    status?: SortOrder
    payment_proof_url?: SortOrder
    user?: user_accountOrderByWithRelationInput
    event?: event_tableOrderByWithRelationInput
    ticket?: ticket_holdsOrderByRelationAggregateInput
    voucher?: voucher_tableOrderByWithRelationInput
  }

  export type transactions_tableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transactions_tableWhereInput | transactions_tableWhereInput[]
    OR?: transactions_tableWhereInput[]
    NOT?: transactions_tableWhereInput | transactions_tableWhereInput[]
    user_id?: IntFilter<"transactions_table"> | number
    event_id?: IntFilter<"transactions_table"> | number
    voucher_id?: IntNullableFilter<"transactions_table"> | number | null
    created_at?: DateTimeFilter<"transactions_table"> | Date | string
    status?: Enumtransactions_statusFilter<"transactions_table"> | $Enums.transactions_status
    payment_proof_url?: StringFilter<"transactions_table"> | string
    user?: XOR<User_accountScalarRelationFilter, user_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    ticket?: Ticket_holdsListRelationFilter
    voucher?: XOR<Voucher_tableNullableScalarRelationFilter, voucher_tableWhereInput> | null
  }, "id">

  export type transactions_tableOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    status?: SortOrder
    payment_proof_url?: SortOrder
    _count?: transactions_tableCountOrderByAggregateInput
    _avg?: transactions_tableAvgOrderByAggregateInput
    _max?: transactions_tableMaxOrderByAggregateInput
    _min?: transactions_tableMinOrderByAggregateInput
    _sum?: transactions_tableSumOrderByAggregateInput
  }

  export type transactions_tableScalarWhereWithAggregatesInput = {
    AND?: transactions_tableScalarWhereWithAggregatesInput | transactions_tableScalarWhereWithAggregatesInput[]
    OR?: transactions_tableScalarWhereWithAggregatesInput[]
    NOT?: transactions_tableScalarWhereWithAggregatesInput | transactions_tableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transactions_table"> | number
    user_id?: IntWithAggregatesFilter<"transactions_table"> | number
    event_id?: IntWithAggregatesFilter<"transactions_table"> | number
    voucher_id?: IntNullableWithAggregatesFilter<"transactions_table"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"transactions_table"> | Date | string
    status?: Enumtransactions_statusWithAggregatesFilter<"transactions_table"> | $Enums.transactions_status
    payment_proof_url?: StringWithAggregatesFilter<"transactions_table"> | string
  }

  export type voucher_tableWhereInput = {
    AND?: voucher_tableWhereInput | voucher_tableWhereInput[]
    OR?: voucher_tableWhereInput[]
    NOT?: voucher_tableWhereInput | voucher_tableWhereInput[]
    id?: IntFilter<"voucher_table"> | number
    organizer_id?: IntFilter<"voucher_table"> | number
    event_id?: IntFilter<"voucher_table"> | number
    start_at?: DateTimeFilter<"voucher_table"> | Date | string
    expires_at?: DateTimeNullableFilter<"voucher_table"> | Date | string | null
    usage_limit?: IntFilter<"voucher_table"> | number
    discount_type?: Enumdiscount_typeFilter<"voucher_table"> | $Enums.discount_type
    discount_value?: IntFilter<"voucher_table"> | number
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    transactions_table?: Transactions_tableListRelationFilter
  }

  export type voucher_tableOrderByWithRelationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    start_at?: SortOrder
    expires_at?: SortOrderInput | SortOrder
    usage_limit?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    organizer?: organizer_accountOrderByWithRelationInput
    event?: event_tableOrderByWithRelationInput
    transactions_table?: transactions_tableOrderByRelationAggregateInput
  }

  export type voucher_tableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: voucher_tableWhereInput | voucher_tableWhereInput[]
    OR?: voucher_tableWhereInput[]
    NOT?: voucher_tableWhereInput | voucher_tableWhereInput[]
    organizer_id?: IntFilter<"voucher_table"> | number
    event_id?: IntFilter<"voucher_table"> | number
    start_at?: DateTimeFilter<"voucher_table"> | Date | string
    expires_at?: DateTimeNullableFilter<"voucher_table"> | Date | string | null
    usage_limit?: IntFilter<"voucher_table"> | number
    discount_type?: Enumdiscount_typeFilter<"voucher_table"> | $Enums.discount_type
    discount_value?: IntFilter<"voucher_table"> | number
    organizer?: XOR<Organizer_accountScalarRelationFilter, organizer_accountWhereInput>
    event?: XOR<Event_tableScalarRelationFilter, event_tableWhereInput>
    transactions_table?: Transactions_tableListRelationFilter
  }, "id">

  export type voucher_tableOrderByWithAggregationInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    start_at?: SortOrder
    expires_at?: SortOrderInput | SortOrder
    usage_limit?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    _count?: voucher_tableCountOrderByAggregateInput
    _avg?: voucher_tableAvgOrderByAggregateInput
    _max?: voucher_tableMaxOrderByAggregateInput
    _min?: voucher_tableMinOrderByAggregateInput
    _sum?: voucher_tableSumOrderByAggregateInput
  }

  export type voucher_tableScalarWhereWithAggregatesInput = {
    AND?: voucher_tableScalarWhereWithAggregatesInput | voucher_tableScalarWhereWithAggregatesInput[]
    OR?: voucher_tableScalarWhereWithAggregatesInput[]
    NOT?: voucher_tableScalarWhereWithAggregatesInput | voucher_tableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"voucher_table"> | number
    organizer_id?: IntWithAggregatesFilter<"voucher_table"> | number
    event_id?: IntWithAggregatesFilter<"voucher_table"> | number
    start_at?: DateTimeWithAggregatesFilter<"voucher_table"> | Date | string
    expires_at?: DateTimeNullableWithAggregatesFilter<"voucher_table"> | Date | string | null
    usage_limit?: IntWithAggregatesFilter<"voucher_table"> | number
    discount_type?: Enumdiscount_typeWithAggregatesFilter<"voucher_table"> | $Enums.discount_type
    discount_value?: IntWithAggregatesFilter<"voucher_table"> | number
  }

  export type user_accountCreateInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_accountCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type user_accountUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_accountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_profileCreateInput = {
    user_fullname: string
    user_date_of_birth: Date | string
    user_phone: number
    user_profile_image: string
    user: user_accountCreateNestedOneWithoutUser_profileInput
  }

  export type user_profileUncheckedCreateInput = {
    id?: number
    user_id: number
    user_fullname: string
    user_date_of_birth: Date | string
    user_phone: number
    user_profile_image: string
  }

  export type user_profileUpdateInput = {
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
    user?: user_accountUpdateOneRequiredWithoutUser_profileNestedInput
  }

  export type user_profileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type user_profileCreateManyInput = {
    id?: number
    user_id: number
    user_fullname: string
    user_date_of_birth: Date | string
    user_phone: number
    user_profile_image: string
  }

  export type user_profileUpdateManyMutationInput = {
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type user_profileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type user_pointsCreateInput = {
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    user: user_accountCreateNestedOneWithoutUser_pointsInput
    points_redemption_items?: points_redemption_itemsCreateNestedManyWithoutUser_pointsInput
  }

  export type user_pointsUncheckedCreateInput = {
    id?: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    user_id: number
    points_redemption_items?: points_redemption_itemsUncheckedCreateNestedManyWithoutUser_pointsInput
  }

  export type user_pointsUpdateInput = {
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    user?: user_accountUpdateOneRequiredWithoutUser_pointsNestedInput
    points_redemption_items?: points_redemption_itemsUpdateManyWithoutUser_pointsNestedInput
  }

  export type user_pointsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    points_redemption_items?: points_redemption_itemsUncheckedUpdateManyWithoutUser_pointsNestedInput
  }

  export type user_pointsCreateManyInput = {
    id?: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    user_id: number
  }

  export type user_pointsUpdateManyMutationInput = {
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
  }

  export type user_pointsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemptionCreateInput = {
    total_points: number
    redeemed_at: Date | string
    user: user_accountCreateNestedOneWithoutPoints_redemptionInput
    points_redemption_items?: points_redemption_itemsCreateNestedManyWithoutPoints_redemptionInput
  }

  export type points_redemptionUncheckedCreateInput = {
    id?: number
    user_id: number
    total_points: number
    redeemed_at: Date | string
    points_redemption_items?: points_redemption_itemsUncheckedCreateNestedManyWithoutPoints_redemptionInput
  }

  export type points_redemptionUpdateInput = {
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: user_accountUpdateOneRequiredWithoutPoints_redemptionNestedInput
    points_redemption_items?: points_redemption_itemsUpdateManyWithoutPoints_redemptionNestedInput
  }

  export type points_redemptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_redemption_items?: points_redemption_itemsUncheckedUpdateManyWithoutPoints_redemptionNestedInput
  }

  export type points_redemptionCreateManyInput = {
    id?: number
    user_id: number
    total_points: number
    redeemed_at: Date | string
  }

  export type points_redemptionUpdateManyMutationInput = {
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type points_redemptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type points_redemption_itemsCreateInput = {
    user_points: user_pointsCreateNestedOneWithoutPoints_redemption_itemsInput
    points_redemption: points_redemptionCreateNestedOneWithoutPoints_redemption_itemsInput
  }

  export type points_redemption_itemsUncheckedCreateInput = {
    id?: number
    user_point_id: number
    redemption_id: number
  }

  export type points_redemption_itemsUpdateInput = {
    user_points?: user_pointsUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput
    points_redemption?: points_redemptionUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput
  }

  export type points_redemption_itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_point_id?: IntFieldUpdateOperationsInput | number
    redemption_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemption_itemsCreateManyInput = {
    id?: number
    user_point_id: number
    redemption_id: number
  }

  export type points_redemption_itemsUpdateManyMutationInput = {

  }

  export type points_redemption_itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_point_id?: IntFieldUpdateOperationsInput | number
    redemption_id?: IntFieldUpdateOperationsInput | number
  }

  export type coupon_tableCreateInput = {
    event_id?: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at?: Date | string
    expires_at: Date | string
    used_at?: Date | string | null
    usage_limit: number
    used_count?: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
    user_coupon?: user_couponCreateNestedManyWithoutCouponInput
  }

  export type coupon_tableUncheckedCreateInput = {
    id?: number
    event_id?: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at?: Date | string
    expires_at: Date | string
    used_at?: Date | string | null
    usage_limit: number
    used_count?: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutCouponInput
  }

  export type coupon_tableUpdateInput = {
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
    user_coupon?: user_couponUpdateManyWithoutCouponNestedInput
  }

  export type coupon_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
    user_coupon?: user_couponUncheckedUpdateManyWithoutCouponNestedInput
  }

  export type coupon_tableCreateManyInput = {
    id?: number
    event_id?: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at?: Date | string
    expires_at: Date | string
    used_at?: Date | string | null
    usage_limit: number
    used_count?: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
  }

  export type coupon_tableUpdateManyMutationInput = {
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
  }

  export type coupon_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
  }

  export type user_couponCreateInput = {
    used_at?: Date | string | null
    user: user_accountCreateNestedOneWithoutUser_couponInput
    coupon: coupon_tableCreateNestedOneWithoutUser_couponInput
  }

  export type user_couponUncheckedCreateInput = {
    id?: number
    user_id: number
    coupon_id: number
    used_at?: Date | string | null
  }

  export type user_couponUpdateInput = {
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: user_accountUpdateOneRequiredWithoutUser_couponNestedInput
    coupon?: coupon_tableUpdateOneRequiredWithoutUser_couponNestedInput
  }

  export type user_couponUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    coupon_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_couponCreateManyInput = {
    id?: number
    user_id: number
    coupon_id: number
    used_at?: Date | string | null
  }

  export type user_couponUpdateManyMutationInput = {
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_couponUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    coupon_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type organizer_accountCreateInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableUncheckedCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUncheckedUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
  }

  export type organizer_accountUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
  }

  export type organizer_accountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
  }

  export type organizer_profileCreateInput = {
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
    organizer: organizer_accountCreateNestedOneWithoutOrganizer_profileInput
  }

  export type organizer_profileUncheckedCreateInput = {
    id?: number
    organizer_id: number
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
  }

  export type organizer_profileUpdateInput = {
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
    organizer?: organizer_accountUpdateOneRequiredWithoutOrganizer_profileNestedInput
  }

  export type organizer_profileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type organizer_profileCreateManyInput = {
    id?: number
    organizer_id: number
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
  }

  export type organizer_profileUpdateManyMutationInput = {
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type organizer_profileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type organizer_reviewsCreateInput = {
    rating: number
    review: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutOrganizer_reviewsInput
    event: event_tableCreateNestedOneWithoutOrganizer_reviewsInput
    user: user_accountCreateNestedOneWithoutOrganizer_reviewsInput
  }

  export type organizer_reviewsUncheckedCreateInput = {
    id?: number
    organizer_id: number
    event_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type organizer_reviewsUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
    event?: event_tableUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
    user?: user_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
  }

  export type organizer_reviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsCreateManyInput = {
    id?: number
    organizer_id: number
    event_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type organizer_reviewsUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_tableCreateInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type event_tableCreateManyInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
  }

  export type event_tableUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticket_holdsCreateInput = {
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
    event: event_tableCreateNestedOneWithoutTicket_holdsInput
    user: user_accountCreateNestedOneWithoutTicket_holdsInput
    ticket_type: ticket_typeCreateNestedOneWithoutTicket_holdsInput
    transactions: transactions_tableCreateNestedOneWithoutTicketInput
  }

  export type ticket_holdsUncheckedCreateInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsUpdateInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    event?: event_tableUpdateOneRequiredWithoutTicket_holdsNestedInput
    user?: user_accountUpdateOneRequiredWithoutTicket_holdsNestedInput
    ticket_type?: ticket_typeUpdateOneRequiredWithoutTicket_holdsNestedInput
    transactions?: transactions_tableUpdateOneRequiredWithoutTicketNestedInput
  }

  export type ticket_holdsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsCreateManyInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsUpdateManyMutationInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_typeCreateInput = {
    type_name: string
    price: number
    quota: number
    event: event_tableCreateNestedOneWithoutTicket_typeInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutTicket_typeInput
  }

  export type ticket_typeUncheckedCreateInput = {
    id?: number
    event_id: number
    type_name: string
    price: number
    quota: number
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutTicket_typeInput
  }

  export type ticket_typeUpdateInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
    event?: event_tableUpdateOneRequiredWithoutTicket_typeNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutTicket_typeNestedInput
  }

  export type ticket_typeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutTicket_typeNestedInput
  }

  export type ticket_typeCreateManyInput = {
    id?: number
    event_id: number
    type_name: string
    price: number
    quota: number
  }

  export type ticket_typeUpdateManyMutationInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
  }

  export type ticket_typeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
  }

  export type event_attendeesCreateInput = {
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
    event: event_tableCreateNestedOneWithoutEvent_attendeesInput
    organizer: organizer_accountCreateNestedOneWithoutEvent_attendeesInput
    user: user_accountCreateNestedOneWithoutEvent_attendeesInput
  }

  export type event_attendeesUncheckedCreateInput = {
    id?: number
    event_id: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type event_attendeesUpdateInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
    event?: event_tableUpdateOneRequiredWithoutEvent_attendeesNestedInput
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
    user?: user_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
  }

  export type event_attendeesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type event_attendeesCreateManyInput = {
    id?: number
    event_id: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type event_attendeesUpdateManyMutationInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type event_attendeesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type transactions_tableCreateInput = {
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    user: user_accountCreateNestedOneWithoutTransactionsInput
    event: event_tableCreateNestedOneWithoutTransactionsInput
    ticket?: ticket_holdsCreateNestedManyWithoutTransactionsInput
    voucher?: voucher_tableCreateNestedOneWithoutTransactions_tableInput
  }

  export type transactions_tableUncheckedCreateInput = {
    id?: number
    user_id: number
    event_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    ticket?: ticket_holdsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactions_tableUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    user?: user_accountUpdateOneRequiredWithoutTransactionsNestedInput
    event?: event_tableUpdateOneRequiredWithoutTransactionsNestedInput
    ticket?: ticket_holdsUpdateManyWithoutTransactionsNestedInput
    voucher?: voucher_tableUpdateOneWithoutTransactions_tableNestedInput
  }

  export type transactions_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    ticket?: ticket_holdsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactions_tableCreateManyInput = {
    id?: number
    user_id: number
    event_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
  }

  export type transactions_tableUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }

  export type transactions_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }

  export type voucher_tableCreateInput = {
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    organizer: organizer_accountCreateNestedOneWithoutVoucherInput
    event: event_tableCreateNestedOneWithoutVoucherInput
    transactions_table?: transactions_tableCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableUncheckedCreateInput = {
    id?: number
    organizer_id: number
    event_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    transactions_table?: transactions_tableUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableUpdateInput = {
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    organizer?: organizer_accountUpdateOneRequiredWithoutVoucherNestedInput
    event?: event_tableUpdateOneRequiredWithoutVoucherNestedInput
    transactions_table?: transactions_tableUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    transactions_table?: transactions_tableUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableCreateManyInput = {
    id?: number
    organizer_id: number
    event_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
  }

  export type voucher_tableUpdateManyMutationInput = {
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
  }

  export type voucher_tableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Enumaccount_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.account_role | Enumaccount_roleFieldRefInput<$PrismaModel>
    in?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    notIn?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    not?: NestedEnumaccount_roleFilter<$PrismaModel> | $Enums.account_role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type User_profileNullableScalarRelationFilter = {
    is?: user_profileWhereInput | null
    isNot?: user_profileWhereInput | null
  }

  export type User_pointsListRelationFilter = {
    every?: user_pointsWhereInput
    some?: user_pointsWhereInput
    none?: user_pointsWhereInput
  }

  export type Points_redemptionListRelationFilter = {
    every?: points_redemptionWhereInput
    some?: points_redemptionWhereInput
    none?: points_redemptionWhereInput
  }

  export type Organizer_reviewsListRelationFilter = {
    every?: organizer_reviewsWhereInput
    some?: organizer_reviewsWhereInput
    none?: organizer_reviewsWhereInput
  }

  export type Ticket_holdsListRelationFilter = {
    every?: ticket_holdsWhereInput
    some?: ticket_holdsWhereInput
    none?: ticket_holdsWhereInput
  }

  export type Event_attendeesListRelationFilter = {
    every?: event_attendeesWhereInput
    some?: event_attendeesWhereInput
    none?: event_attendeesWhereInput
  }

  export type Transactions_tableListRelationFilter = {
    every?: transactions_tableWhereInput
    some?: transactions_tableWhereInput
    none?: transactions_tableWhereInput
  }

  export type User_couponListRelationFilter = {
    every?: user_couponWhereInput
    some?: user_couponWhereInput
    none?: user_couponWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type user_pointsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type points_redemptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type organizer_reviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ticket_holdsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type event_attendeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transactions_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_couponOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_accountCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    referral_code?: SortOrder
    referred_by_code?: SortOrder
    imgProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type user_accountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type user_accountMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    referral_code?: SortOrder
    referred_by_code?: SortOrder
    imgProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type user_accountMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    referral_code?: SortOrder
    referred_by_code?: SortOrder
    imgProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type user_accountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Enumaccount_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.account_role | Enumaccount_roleFieldRefInput<$PrismaModel>
    in?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    notIn?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    not?: NestedEnumaccount_roleWithAggregatesFilter<$PrismaModel> | $Enums.account_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumaccount_roleFilter<$PrismaModel>
    _max?: NestedEnumaccount_roleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type User_accountScalarRelationFilter = {
    is?: user_accountWhereInput
    isNot?: user_accountWhereInput
  }

  export type user_profileCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_fullname?: SortOrder
    user_date_of_birth?: SortOrder
    user_phone?: SortOrder
    user_profile_image?: SortOrder
  }

  export type user_profileAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_phone?: SortOrder
  }

  export type user_profileMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_fullname?: SortOrder
    user_date_of_birth?: SortOrder
    user_phone?: SortOrder
    user_profile_image?: SortOrder
  }

  export type user_profileMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_fullname?: SortOrder
    user_date_of_birth?: SortOrder
    user_phone?: SortOrder
    user_profile_image?: SortOrder
  }

  export type user_profileSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    user_phone?: SortOrder
  }

  export type Points_redemption_itemsListRelationFilter = {
    every?: points_redemption_itemsWhereInput
    some?: points_redemption_itemsWhereInput
    none?: points_redemption_itemsWhereInput
  }

  export type points_redemption_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_pointsCountOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_type?: SortOrder
    points_source_id?: SortOrder
    earned_at?: SortOrder
    expires_at?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
  }

  export type user_pointsAvgOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_id?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
  }

  export type user_pointsMaxOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_type?: SortOrder
    points_source_id?: SortOrder
    earned_at?: SortOrder
    expires_at?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
  }

  export type user_pointsMinOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_type?: SortOrder
    points_source_id?: SortOrder
    earned_at?: SortOrder
    expires_at?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
  }

  export type user_pointsSumOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    points_source_id?: SortOrder
    points_remaining?: SortOrder
    user_id?: SortOrder
  }

  export type points_redemptionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
    redeemed_at?: SortOrder
  }

  export type points_redemptionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
  }

  export type points_redemptionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
    redeemed_at?: SortOrder
  }

  export type points_redemptionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
    redeemed_at?: SortOrder
  }

  export type points_redemptionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_points?: SortOrder
  }

  export type User_pointsScalarRelationFilter = {
    is?: user_pointsWhereInput
    isNot?: user_pointsWhereInput
  }

  export type Points_redemptionScalarRelationFilter = {
    is?: points_redemptionWhereInput
    isNot?: points_redemptionWhereInput
  }

  export type points_redemption_itemsUser_point_idRedemption_idCompoundUniqueInput = {
    user_point_id: number
    redemption_id: number
  }

  export type points_redemption_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
  }

  export type points_redemption_itemsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
  }

  export type points_redemption_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
  }

  export type points_redemption_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
  }

  export type points_redemption_itemsSumOrderByAggregateInput = {
    id?: SortOrder
    user_point_id?: SortOrder
    redemption_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Enumdiscount_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_type | Enumdiscount_typeFieldRefInput<$PrismaModel>
    in?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumdiscount_typeFilter<$PrismaModel> | $Enums.discount_type
  }

  export type Enumcoupon_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.coupon_status | Enumcoupon_statusFieldRefInput<$PrismaModel>
    in?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumcoupon_statusFilter<$PrismaModel> | $Enums.coupon_status
  }

  export type EnumissuerFilter<$PrismaModel = never> = {
    equals?: $Enums.issuer | EnumissuerFieldRefInput<$PrismaModel>
    in?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    notIn?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    not?: NestedEnumissuerFilter<$PrismaModel> | $Enums.issuer
  }

  export type coupon_tableCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    code?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    used_at?: SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
    status?: SortOrder
    issued_by?: SortOrder
  }

  export type coupon_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    discount_value?: SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
  }

  export type coupon_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    code?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    used_at?: SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
    status?: SortOrder
    issued_by?: SortOrder
  }

  export type coupon_tableMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    code?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
    created_at?: SortOrder
    expires_at?: SortOrder
    used_at?: SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
    status?: SortOrder
    issued_by?: SortOrder
  }

  export type coupon_tableSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    discount_value?: SortOrder
    usage_limit?: SortOrder
    used_count?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Enumdiscount_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_type | Enumdiscount_typeFieldRefInput<$PrismaModel>
    in?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumdiscount_typeWithAggregatesFilter<$PrismaModel> | $Enums.discount_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdiscount_typeFilter<$PrismaModel>
    _max?: NestedEnumdiscount_typeFilter<$PrismaModel>
  }

  export type Enumcoupon_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.coupon_status | Enumcoupon_statusFieldRefInput<$PrismaModel>
    in?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumcoupon_statusWithAggregatesFilter<$PrismaModel> | $Enums.coupon_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcoupon_statusFilter<$PrismaModel>
    _max?: NestedEnumcoupon_statusFilter<$PrismaModel>
  }

  export type EnumissuerWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.issuer | EnumissuerFieldRefInput<$PrismaModel>
    in?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    notIn?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    not?: NestedEnumissuerWithAggregatesFilter<$PrismaModel> | $Enums.issuer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumissuerFilter<$PrismaModel>
    _max?: NestedEnumissuerFilter<$PrismaModel>
  }

  export type Coupon_tableScalarRelationFilter = {
    is?: coupon_tableWhereInput
    isNot?: coupon_tableWhereInput
  }

  export type user_couponUser_idCoupon_idCompoundUniqueInput = {
    user_id: number
    coupon_id: number
  }

  export type user_couponCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
    used_at?: SortOrder
  }

  export type user_couponAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
  }

  export type user_couponMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
    used_at?: SortOrder
  }

  export type user_couponMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
    used_at?: SortOrder
  }

  export type user_couponSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    coupon_id?: SortOrder
  }

  export type Organizer_profileNullableScalarRelationFilter = {
    is?: organizer_profileWhereInput | null
    isNot?: organizer_profileWhereInput | null
  }

  export type Event_tableListRelationFilter = {
    every?: event_tableWhereInput
    some?: event_tableWhereInput
    none?: event_tableWhereInput
  }

  export type Voucher_tableListRelationFilter = {
    every?: voucher_tableWhereInput
    some?: voucher_tableWhereInput
    none?: voucher_tableWhereInput
  }

  export type event_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type voucher_tableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type organizer_accountCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type organizer_accountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type organizer_accountMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type organizer_accountMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type organizer_accountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Organizer_accountScalarRelationFilter = {
    is?: organizer_accountWhereInput
    isNot?: organizer_accountWhereInput
  }

  export type organizer_profileCountOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_address?: SortOrder
    organizer_phone?: SortOrder
    organizer_profile_image?: SortOrder
  }

  export type organizer_profileAvgOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_phone?: SortOrder
  }

  export type organizer_profileMaxOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_address?: SortOrder
    organizer_phone?: SortOrder
    organizer_profile_image?: SortOrder
  }

  export type organizer_profileMinOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_address?: SortOrder
    organizer_phone?: SortOrder
    organizer_profile_image?: SortOrder
  }

  export type organizer_profileSumOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    organizer_phone?: SortOrder
  }

  export type Event_tableScalarRelationFilter = {
    is?: event_tableWhereInput
    isNot?: event_tableWhereInput
  }

  export type organizer_reviewsCountOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    created_at?: SortOrder
  }

  export type organizer_reviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type organizer_reviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    created_at?: SortOrder
  }

  export type organizer_reviewsMinOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    created_at?: SortOrder
  }

  export type organizer_reviewsSumOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type Ticket_typeListRelationFilter = {
    every?: ticket_typeWhereInput
    some?: ticket_typeWhereInput
    none?: ticket_typeWhereInput
  }

  export type ticket_typeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type event_tableCountOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    seat_capacity?: SortOrder
    event_type?: SortOrder
    created_at?: SortOrder
  }

  export type event_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    price?: SortOrder
    seat_capacity?: SortOrder
  }

  export type event_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    seat_capacity?: SortOrder
    event_type?: SortOrder
    created_at?: SortOrder
  }

  export type event_tableMinOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    seat_capacity?: SortOrder
    event_type?: SortOrder
    created_at?: SortOrder
  }

  export type event_tableSumOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    price?: SortOrder
    seat_capacity?: SortOrder
  }

  export type Ticket_typeScalarRelationFilter = {
    is?: ticket_typeWhereInput
    isNot?: ticket_typeWhereInput
  }

  export type Transactions_tableScalarRelationFilter = {
    is?: transactions_tableWhereInput
    isNot?: transactions_tableWhereInput
  }

  export type ticket_holdsCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    held_at?: SortOrder
    expires_at?: SortOrder
    transactions_id?: SortOrder
    status?: SortOrder
  }

  export type ticket_holdsAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    transactions_id?: SortOrder
  }

  export type ticket_holdsMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    held_at?: SortOrder
    expires_at?: SortOrder
    transactions_id?: SortOrder
    status?: SortOrder
  }

  export type ticket_holdsMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    held_at?: SortOrder
    expires_at?: SortOrder
    transactions_id?: SortOrder
    status?: SortOrder
  }

  export type ticket_holdsSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    ticket_type_id?: SortOrder
    ticket_quantity?: SortOrder
    transactions_id?: SortOrder
  }

  export type ticket_typeCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    type_name?: SortOrder
    price?: SortOrder
    quota?: SortOrder
  }

  export type ticket_typeAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    price?: SortOrder
    quota?: SortOrder
  }

  export type ticket_typeMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    type_name?: SortOrder
    price?: SortOrder
    quota?: SortOrder
  }

  export type ticket_typeMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    type_name?: SortOrder
    price?: SortOrder
    quota?: SortOrder
  }

  export type ticket_typeSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    price?: SortOrder
    quota?: SortOrder
  }

  export type Enumevent_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumevent_statusFilter<$PrismaModel> | $Enums.event_status
  }

  export type event_attendeesEvent_idUser_idCompoundUniqueInput = {
    event_id: number
    user_id: number
  }

  export type event_attendeesCountOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
    status?: SortOrder
  }

  export type event_attendeesAvgOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
  }

  export type event_attendeesMaxOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
    status?: SortOrder
  }

  export type event_attendeesMinOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
    status?: SortOrder
  }

  export type event_attendeesSumOrderByAggregateInput = {
    id?: SortOrder
    event_id?: SortOrder
    organizer_id?: SortOrder
    user_id?: SortOrder
    ticket_quantity?: SortOrder
    total_price_paid?: SortOrder
  }

  export type Enumevent_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumevent_statusWithAggregatesFilter<$PrismaModel> | $Enums.event_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumevent_statusFilter<$PrismaModel>
    _max?: NestedEnumevent_statusFilter<$PrismaModel>
  }

  export type Enumtransactions_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.transactions_status | Enumtransactions_statusFieldRefInput<$PrismaModel>
    in?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactions_statusFilter<$PrismaModel> | $Enums.transactions_status
  }

  export type Voucher_tableNullableScalarRelationFilter = {
    is?: voucher_tableWhereInput | null
    isNot?: voucher_tableWhereInput | null
  }

  export type transactions_tableCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    payment_proof_url?: SortOrder
  }

  export type transactions_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrder
  }

  export type transactions_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    payment_proof_url?: SortOrder
  }

  export type transactions_tableMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    payment_proof_url?: SortOrder
  }

  export type transactions_tableSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    voucher_id?: SortOrder
  }

  export type Enumtransactions_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactions_status | Enumtransactions_statusFieldRefInput<$PrismaModel>
    in?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactions_statusWithAggregatesFilter<$PrismaModel> | $Enums.transactions_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactions_statusFilter<$PrismaModel>
    _max?: NestedEnumtransactions_statusFilter<$PrismaModel>
  }

  export type voucher_tableCountOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    start_at?: SortOrder
    expires_at?: SortOrder
    usage_limit?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
  }

  export type voucher_tableAvgOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    usage_limit?: SortOrder
    discount_value?: SortOrder
  }

  export type voucher_tableMaxOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    start_at?: SortOrder
    expires_at?: SortOrder
    usage_limit?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
  }

  export type voucher_tableMinOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    start_at?: SortOrder
    expires_at?: SortOrder
    usage_limit?: SortOrder
    discount_type?: SortOrder
    discount_value?: SortOrder
  }

  export type voucher_tableSumOrderByAggregateInput = {
    id?: SortOrder
    organizer_id?: SortOrder
    event_id?: SortOrder
    usage_limit?: SortOrder
    discount_value?: SortOrder
  }

  export type user_profileCreateNestedOneWithoutUserInput = {
    create?: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
    connectOrCreate?: user_profileCreateOrConnectWithoutUserInput
    connect?: user_profileWhereUniqueInput
  }

  export type user_pointsCreateNestedManyWithoutUserInput = {
    create?: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput> | user_pointsCreateWithoutUserInput[] | user_pointsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_pointsCreateOrConnectWithoutUserInput | user_pointsCreateOrConnectWithoutUserInput[]
    createMany?: user_pointsCreateManyUserInputEnvelope
    connect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
  }

  export type points_redemptionCreateNestedManyWithoutUserInput = {
    create?: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput> | points_redemptionCreateWithoutUserInput[] | points_redemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: points_redemptionCreateOrConnectWithoutUserInput | points_redemptionCreateOrConnectWithoutUserInput[]
    createMany?: points_redemptionCreateManyUserInputEnvelope
    connect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
  }

  export type organizer_reviewsCreateNestedManyWithoutUserInput = {
    create?: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput> | organizer_reviewsCreateWithoutUserInput[] | organizer_reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutUserInput | organizer_reviewsCreateOrConnectWithoutUserInput[]
    createMany?: organizer_reviewsCreateManyUserInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type ticket_holdsCreateNestedManyWithoutUserInput = {
    create?: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput> | ticket_holdsCreateWithoutUserInput[] | ticket_holdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutUserInput | ticket_holdsCreateOrConnectWithoutUserInput[]
    createMany?: ticket_holdsCreateManyUserInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type event_attendeesCreateNestedManyWithoutUserInput = {
    create?: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput> | event_attendeesCreateWithoutUserInput[] | event_attendeesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutUserInput | event_attendeesCreateOrConnectWithoutUserInput[]
    createMany?: event_attendeesCreateManyUserInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type transactions_tableCreateNestedManyWithoutUserInput = {
    create?: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput> | transactions_tableCreateWithoutUserInput[] | transactions_tableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutUserInput | transactions_tableCreateOrConnectWithoutUserInput[]
    createMany?: transactions_tableCreateManyUserInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type user_couponCreateNestedManyWithoutUserInput = {
    create?: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput> | user_couponCreateWithoutUserInput[] | user_couponUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutUserInput | user_couponCreateOrConnectWithoutUserInput[]
    createMany?: user_couponCreateManyUserInputEnvelope
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
  }

  export type user_profileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
    connectOrCreate?: user_profileCreateOrConnectWithoutUserInput
    connect?: user_profileWhereUniqueInput
  }

  export type user_pointsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput> | user_pointsCreateWithoutUserInput[] | user_pointsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_pointsCreateOrConnectWithoutUserInput | user_pointsCreateOrConnectWithoutUserInput[]
    createMany?: user_pointsCreateManyUserInputEnvelope
    connect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
  }

  export type points_redemptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput> | points_redemptionCreateWithoutUserInput[] | points_redemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: points_redemptionCreateOrConnectWithoutUserInput | points_redemptionCreateOrConnectWithoutUserInput[]
    createMany?: points_redemptionCreateManyUserInputEnvelope
    connect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
  }

  export type organizer_reviewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput> | organizer_reviewsCreateWithoutUserInput[] | organizer_reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutUserInput | organizer_reviewsCreateOrConnectWithoutUserInput[]
    createMany?: organizer_reviewsCreateManyUserInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type ticket_holdsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput> | ticket_holdsCreateWithoutUserInput[] | ticket_holdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutUserInput | ticket_holdsCreateOrConnectWithoutUserInput[]
    createMany?: ticket_holdsCreateManyUserInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type event_attendeesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput> | event_attendeesCreateWithoutUserInput[] | event_attendeesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutUserInput | event_attendeesCreateOrConnectWithoutUserInput[]
    createMany?: event_attendeesCreateManyUserInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type transactions_tableUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput> | transactions_tableCreateWithoutUserInput[] | transactions_tableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutUserInput | transactions_tableCreateOrConnectWithoutUserInput[]
    createMany?: transactions_tableCreateManyUserInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type user_couponUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput> | user_couponCreateWithoutUserInput[] | user_couponUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutUserInput | user_couponCreateOrConnectWithoutUserInput[]
    createMany?: user_couponCreateManyUserInputEnvelope
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Enumaccount_roleFieldUpdateOperationsInput = {
    set?: $Enums.account_role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type user_profileUpdateOneWithoutUserNestedInput = {
    create?: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
    connectOrCreate?: user_profileCreateOrConnectWithoutUserInput
    upsert?: user_profileUpsertWithoutUserInput
    disconnect?: user_profileWhereInput | boolean
    delete?: user_profileWhereInput | boolean
    connect?: user_profileWhereUniqueInput
    update?: XOR<XOR<user_profileUpdateToOneWithWhereWithoutUserInput, user_profileUpdateWithoutUserInput>, user_profileUncheckedUpdateWithoutUserInput>
  }

  export type user_pointsUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput> | user_pointsCreateWithoutUserInput[] | user_pointsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_pointsCreateOrConnectWithoutUserInput | user_pointsCreateOrConnectWithoutUserInput[]
    upsert?: user_pointsUpsertWithWhereUniqueWithoutUserInput | user_pointsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_pointsCreateManyUserInputEnvelope
    set?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    disconnect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    delete?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    connect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    update?: user_pointsUpdateWithWhereUniqueWithoutUserInput | user_pointsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_pointsUpdateManyWithWhereWithoutUserInput | user_pointsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_pointsScalarWhereInput | user_pointsScalarWhereInput[]
  }

  export type points_redemptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput> | points_redemptionCreateWithoutUserInput[] | points_redemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: points_redemptionCreateOrConnectWithoutUserInput | points_redemptionCreateOrConnectWithoutUserInput[]
    upsert?: points_redemptionUpsertWithWhereUniqueWithoutUserInput | points_redemptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: points_redemptionCreateManyUserInputEnvelope
    set?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    disconnect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    delete?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    connect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    update?: points_redemptionUpdateWithWhereUniqueWithoutUserInput | points_redemptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: points_redemptionUpdateManyWithWhereWithoutUserInput | points_redemptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: points_redemptionScalarWhereInput | points_redemptionScalarWhereInput[]
  }

  export type organizer_reviewsUpdateManyWithoutUserNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput> | organizer_reviewsCreateWithoutUserInput[] | organizer_reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutUserInput | organizer_reviewsCreateOrConnectWithoutUserInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutUserInput | organizer_reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: organizer_reviewsCreateManyUserInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutUserInput | organizer_reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutUserInput | organizer_reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type ticket_holdsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput> | ticket_holdsCreateWithoutUserInput[] | ticket_holdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutUserInput | ticket_holdsCreateOrConnectWithoutUserInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutUserInput | ticket_holdsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ticket_holdsCreateManyUserInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutUserInput | ticket_holdsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutUserInput | ticket_holdsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type event_attendeesUpdateManyWithoutUserNestedInput = {
    create?: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput> | event_attendeesCreateWithoutUserInput[] | event_attendeesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutUserInput | event_attendeesCreateOrConnectWithoutUserInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutUserInput | event_attendeesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: event_attendeesCreateManyUserInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutUserInput | event_attendeesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutUserInput | event_attendeesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type transactions_tableUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput> | transactions_tableCreateWithoutUserInput[] | transactions_tableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutUserInput | transactions_tableCreateOrConnectWithoutUserInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutUserInput | transactions_tableUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactions_tableCreateManyUserInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutUserInput | transactions_tableUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutUserInput | transactions_tableUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type user_couponUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput> | user_couponCreateWithoutUserInput[] | user_couponUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutUserInput | user_couponCreateOrConnectWithoutUserInput[]
    upsert?: user_couponUpsertWithWhereUniqueWithoutUserInput | user_couponUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_couponCreateManyUserInputEnvelope
    set?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    disconnect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    delete?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    update?: user_couponUpdateWithWhereUniqueWithoutUserInput | user_couponUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_couponUpdateManyWithWhereWithoutUserInput | user_couponUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_profileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
    connectOrCreate?: user_profileCreateOrConnectWithoutUserInput
    upsert?: user_profileUpsertWithoutUserInput
    disconnect?: user_profileWhereInput | boolean
    delete?: user_profileWhereInput | boolean
    connect?: user_profileWhereUniqueInput
    update?: XOR<XOR<user_profileUpdateToOneWithWhereWithoutUserInput, user_profileUpdateWithoutUserInput>, user_profileUncheckedUpdateWithoutUserInput>
  }

  export type user_pointsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput> | user_pointsCreateWithoutUserInput[] | user_pointsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_pointsCreateOrConnectWithoutUserInput | user_pointsCreateOrConnectWithoutUserInput[]
    upsert?: user_pointsUpsertWithWhereUniqueWithoutUserInput | user_pointsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_pointsCreateManyUserInputEnvelope
    set?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    disconnect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    delete?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    connect?: user_pointsWhereUniqueInput | user_pointsWhereUniqueInput[]
    update?: user_pointsUpdateWithWhereUniqueWithoutUserInput | user_pointsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_pointsUpdateManyWithWhereWithoutUserInput | user_pointsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_pointsScalarWhereInput | user_pointsScalarWhereInput[]
  }

  export type points_redemptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput> | points_redemptionCreateWithoutUserInput[] | points_redemptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: points_redemptionCreateOrConnectWithoutUserInput | points_redemptionCreateOrConnectWithoutUserInput[]
    upsert?: points_redemptionUpsertWithWhereUniqueWithoutUserInput | points_redemptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: points_redemptionCreateManyUserInputEnvelope
    set?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    disconnect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    delete?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    connect?: points_redemptionWhereUniqueInput | points_redemptionWhereUniqueInput[]
    update?: points_redemptionUpdateWithWhereUniqueWithoutUserInput | points_redemptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: points_redemptionUpdateManyWithWhereWithoutUserInput | points_redemptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: points_redemptionScalarWhereInput | points_redemptionScalarWhereInput[]
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput> | organizer_reviewsCreateWithoutUserInput[] | organizer_reviewsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutUserInput | organizer_reviewsCreateOrConnectWithoutUserInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutUserInput | organizer_reviewsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: organizer_reviewsCreateManyUserInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutUserInput | organizer_reviewsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutUserInput | organizer_reviewsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type ticket_holdsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput> | ticket_holdsCreateWithoutUserInput[] | ticket_holdsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutUserInput | ticket_holdsCreateOrConnectWithoutUserInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutUserInput | ticket_holdsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ticket_holdsCreateManyUserInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutUserInput | ticket_holdsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutUserInput | ticket_holdsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type event_attendeesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput> | event_attendeesCreateWithoutUserInput[] | event_attendeesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutUserInput | event_attendeesCreateOrConnectWithoutUserInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutUserInput | event_attendeesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: event_attendeesCreateManyUserInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutUserInput | event_attendeesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutUserInput | event_attendeesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type transactions_tableUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput> | transactions_tableCreateWithoutUserInput[] | transactions_tableUncheckedCreateWithoutUserInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutUserInput | transactions_tableCreateOrConnectWithoutUserInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutUserInput | transactions_tableUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: transactions_tableCreateManyUserInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutUserInput | transactions_tableUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutUserInput | transactions_tableUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type user_couponUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput> | user_couponCreateWithoutUserInput[] | user_couponUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutUserInput | user_couponCreateOrConnectWithoutUserInput[]
    upsert?: user_couponUpsertWithWhereUniqueWithoutUserInput | user_couponUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_couponCreateManyUserInputEnvelope
    set?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    disconnect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    delete?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    update?: user_couponUpdateWithWhereUniqueWithoutUserInput | user_couponUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_couponUpdateManyWithWhereWithoutUserInput | user_couponUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
  }

  export type user_accountCreateNestedOneWithoutUser_profileInput = {
    create?: XOR<user_accountCreateWithoutUser_profileInput, user_accountUncheckedCreateWithoutUser_profileInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_profileInput
    connect?: user_accountWhereUniqueInput
  }

  export type user_accountUpdateOneRequiredWithoutUser_profileNestedInput = {
    create?: XOR<user_accountCreateWithoutUser_profileInput, user_accountUncheckedCreateWithoutUser_profileInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_profileInput
    upsert?: user_accountUpsertWithoutUser_profileInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutUser_profileInput, user_accountUpdateWithoutUser_profileInput>, user_accountUncheckedUpdateWithoutUser_profileInput>
  }

  export type user_accountCreateNestedOneWithoutUser_pointsInput = {
    create?: XOR<user_accountCreateWithoutUser_pointsInput, user_accountUncheckedCreateWithoutUser_pointsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_pointsInput
    connect?: user_accountWhereUniqueInput
  }

  export type points_redemption_itemsCreateNestedManyWithoutUser_pointsInput = {
    create?: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput> | points_redemption_itemsCreateWithoutUser_pointsInput[] | points_redemption_itemsUncheckedCreateWithoutUser_pointsInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutUser_pointsInput | points_redemption_itemsCreateOrConnectWithoutUser_pointsInput[]
    createMany?: points_redemption_itemsCreateManyUser_pointsInputEnvelope
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
  }

  export type points_redemption_itemsUncheckedCreateNestedManyWithoutUser_pointsInput = {
    create?: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput> | points_redemption_itemsCreateWithoutUser_pointsInput[] | points_redemption_itemsUncheckedCreateWithoutUser_pointsInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutUser_pointsInput | points_redemption_itemsCreateOrConnectWithoutUser_pointsInput[]
    createMany?: points_redemption_itemsCreateManyUser_pointsInputEnvelope
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
  }

  export type user_accountUpdateOneRequiredWithoutUser_pointsNestedInput = {
    create?: XOR<user_accountCreateWithoutUser_pointsInput, user_accountUncheckedCreateWithoutUser_pointsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_pointsInput
    upsert?: user_accountUpsertWithoutUser_pointsInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutUser_pointsInput, user_accountUpdateWithoutUser_pointsInput>, user_accountUncheckedUpdateWithoutUser_pointsInput>
  }

  export type points_redemption_itemsUpdateManyWithoutUser_pointsNestedInput = {
    create?: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput> | points_redemption_itemsCreateWithoutUser_pointsInput[] | points_redemption_itemsUncheckedCreateWithoutUser_pointsInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutUser_pointsInput | points_redemption_itemsCreateOrConnectWithoutUser_pointsInput[]
    upsert?: points_redemption_itemsUpsertWithWhereUniqueWithoutUser_pointsInput | points_redemption_itemsUpsertWithWhereUniqueWithoutUser_pointsInput[]
    createMany?: points_redemption_itemsCreateManyUser_pointsInputEnvelope
    set?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    disconnect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    delete?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    update?: points_redemption_itemsUpdateWithWhereUniqueWithoutUser_pointsInput | points_redemption_itemsUpdateWithWhereUniqueWithoutUser_pointsInput[]
    updateMany?: points_redemption_itemsUpdateManyWithWhereWithoutUser_pointsInput | points_redemption_itemsUpdateManyWithWhereWithoutUser_pointsInput[]
    deleteMany?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
  }

  export type points_redemption_itemsUncheckedUpdateManyWithoutUser_pointsNestedInput = {
    create?: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput> | points_redemption_itemsCreateWithoutUser_pointsInput[] | points_redemption_itemsUncheckedCreateWithoutUser_pointsInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutUser_pointsInput | points_redemption_itemsCreateOrConnectWithoutUser_pointsInput[]
    upsert?: points_redemption_itemsUpsertWithWhereUniqueWithoutUser_pointsInput | points_redemption_itemsUpsertWithWhereUniqueWithoutUser_pointsInput[]
    createMany?: points_redemption_itemsCreateManyUser_pointsInputEnvelope
    set?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    disconnect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    delete?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    update?: points_redemption_itemsUpdateWithWhereUniqueWithoutUser_pointsInput | points_redemption_itemsUpdateWithWhereUniqueWithoutUser_pointsInput[]
    updateMany?: points_redemption_itemsUpdateManyWithWhereWithoutUser_pointsInput | points_redemption_itemsUpdateManyWithWhereWithoutUser_pointsInput[]
    deleteMany?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
  }

  export type user_accountCreateNestedOneWithoutPoints_redemptionInput = {
    create?: XOR<user_accountCreateWithoutPoints_redemptionInput, user_accountUncheckedCreateWithoutPoints_redemptionInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutPoints_redemptionInput
    connect?: user_accountWhereUniqueInput
  }

  export type points_redemption_itemsCreateNestedManyWithoutPoints_redemptionInput = {
    create?: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput> | points_redemption_itemsCreateWithoutPoints_redemptionInput[] | points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput | points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput[]
    createMany?: points_redemption_itemsCreateManyPoints_redemptionInputEnvelope
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
  }

  export type points_redemption_itemsUncheckedCreateNestedManyWithoutPoints_redemptionInput = {
    create?: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput> | points_redemption_itemsCreateWithoutPoints_redemptionInput[] | points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput | points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput[]
    createMany?: points_redemption_itemsCreateManyPoints_redemptionInputEnvelope
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
  }

  export type user_accountUpdateOneRequiredWithoutPoints_redemptionNestedInput = {
    create?: XOR<user_accountCreateWithoutPoints_redemptionInput, user_accountUncheckedCreateWithoutPoints_redemptionInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutPoints_redemptionInput
    upsert?: user_accountUpsertWithoutPoints_redemptionInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutPoints_redemptionInput, user_accountUpdateWithoutPoints_redemptionInput>, user_accountUncheckedUpdateWithoutPoints_redemptionInput>
  }

  export type points_redemption_itemsUpdateManyWithoutPoints_redemptionNestedInput = {
    create?: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput> | points_redemption_itemsCreateWithoutPoints_redemptionInput[] | points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput | points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput[]
    upsert?: points_redemption_itemsUpsertWithWhereUniqueWithoutPoints_redemptionInput | points_redemption_itemsUpsertWithWhereUniqueWithoutPoints_redemptionInput[]
    createMany?: points_redemption_itemsCreateManyPoints_redemptionInputEnvelope
    set?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    disconnect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    delete?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    update?: points_redemption_itemsUpdateWithWhereUniqueWithoutPoints_redemptionInput | points_redemption_itemsUpdateWithWhereUniqueWithoutPoints_redemptionInput[]
    updateMany?: points_redemption_itemsUpdateManyWithWhereWithoutPoints_redemptionInput | points_redemption_itemsUpdateManyWithWhereWithoutPoints_redemptionInput[]
    deleteMany?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
  }

  export type points_redemption_itemsUncheckedUpdateManyWithoutPoints_redemptionNestedInput = {
    create?: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput> | points_redemption_itemsCreateWithoutPoints_redemptionInput[] | points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput[]
    connectOrCreate?: points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput | points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput[]
    upsert?: points_redemption_itemsUpsertWithWhereUniqueWithoutPoints_redemptionInput | points_redemption_itemsUpsertWithWhereUniqueWithoutPoints_redemptionInput[]
    createMany?: points_redemption_itemsCreateManyPoints_redemptionInputEnvelope
    set?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    disconnect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    delete?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    connect?: points_redemption_itemsWhereUniqueInput | points_redemption_itemsWhereUniqueInput[]
    update?: points_redemption_itemsUpdateWithWhereUniqueWithoutPoints_redemptionInput | points_redemption_itemsUpdateWithWhereUniqueWithoutPoints_redemptionInput[]
    updateMany?: points_redemption_itemsUpdateManyWithWhereWithoutPoints_redemptionInput | points_redemption_itemsUpdateManyWithWhereWithoutPoints_redemptionInput[]
    deleteMany?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
  }

  export type user_pointsCreateNestedOneWithoutPoints_redemption_itemsInput = {
    create?: XOR<user_pointsCreateWithoutPoints_redemption_itemsInput, user_pointsUncheckedCreateWithoutPoints_redemption_itemsInput>
    connectOrCreate?: user_pointsCreateOrConnectWithoutPoints_redemption_itemsInput
    connect?: user_pointsWhereUniqueInput
  }

  export type points_redemptionCreateNestedOneWithoutPoints_redemption_itemsInput = {
    create?: XOR<points_redemptionCreateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedCreateWithoutPoints_redemption_itemsInput>
    connectOrCreate?: points_redemptionCreateOrConnectWithoutPoints_redemption_itemsInput
    connect?: points_redemptionWhereUniqueInput
  }

  export type user_pointsUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput = {
    create?: XOR<user_pointsCreateWithoutPoints_redemption_itemsInput, user_pointsUncheckedCreateWithoutPoints_redemption_itemsInput>
    connectOrCreate?: user_pointsCreateOrConnectWithoutPoints_redemption_itemsInput
    upsert?: user_pointsUpsertWithoutPoints_redemption_itemsInput
    connect?: user_pointsWhereUniqueInput
    update?: XOR<XOR<user_pointsUpdateToOneWithWhereWithoutPoints_redemption_itemsInput, user_pointsUpdateWithoutPoints_redemption_itemsInput>, user_pointsUncheckedUpdateWithoutPoints_redemption_itemsInput>
  }

  export type points_redemptionUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput = {
    create?: XOR<points_redemptionCreateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedCreateWithoutPoints_redemption_itemsInput>
    connectOrCreate?: points_redemptionCreateOrConnectWithoutPoints_redemption_itemsInput
    upsert?: points_redemptionUpsertWithoutPoints_redemption_itemsInput
    connect?: points_redemptionWhereUniqueInput
    update?: XOR<XOR<points_redemptionUpdateToOneWithWhereWithoutPoints_redemption_itemsInput, points_redemptionUpdateWithoutPoints_redemption_itemsInput>, points_redemptionUncheckedUpdateWithoutPoints_redemption_itemsInput>
  }

  export type user_couponCreateNestedManyWithoutCouponInput = {
    create?: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput> | user_couponCreateWithoutCouponInput[] | user_couponUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutCouponInput | user_couponCreateOrConnectWithoutCouponInput[]
    createMany?: user_couponCreateManyCouponInputEnvelope
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
  }

  export type user_couponUncheckedCreateNestedManyWithoutCouponInput = {
    create?: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput> | user_couponCreateWithoutCouponInput[] | user_couponUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutCouponInput | user_couponCreateOrConnectWithoutCouponInput[]
    createMany?: user_couponCreateManyCouponInputEnvelope
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Enumdiscount_typeFieldUpdateOperationsInput = {
    set?: $Enums.discount_type
  }

  export type Enumcoupon_statusFieldUpdateOperationsInput = {
    set?: $Enums.coupon_status
  }

  export type EnumissuerFieldUpdateOperationsInput = {
    set?: $Enums.issuer
  }

  export type user_couponUpdateManyWithoutCouponNestedInput = {
    create?: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput> | user_couponCreateWithoutCouponInput[] | user_couponUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutCouponInput | user_couponCreateOrConnectWithoutCouponInput[]
    upsert?: user_couponUpsertWithWhereUniqueWithoutCouponInput | user_couponUpsertWithWhereUniqueWithoutCouponInput[]
    createMany?: user_couponCreateManyCouponInputEnvelope
    set?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    disconnect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    delete?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    update?: user_couponUpdateWithWhereUniqueWithoutCouponInput | user_couponUpdateWithWhereUniqueWithoutCouponInput[]
    updateMany?: user_couponUpdateManyWithWhereWithoutCouponInput | user_couponUpdateManyWithWhereWithoutCouponInput[]
    deleteMany?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
  }

  export type user_couponUncheckedUpdateManyWithoutCouponNestedInput = {
    create?: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput> | user_couponCreateWithoutCouponInput[] | user_couponUncheckedCreateWithoutCouponInput[]
    connectOrCreate?: user_couponCreateOrConnectWithoutCouponInput | user_couponCreateOrConnectWithoutCouponInput[]
    upsert?: user_couponUpsertWithWhereUniqueWithoutCouponInput | user_couponUpsertWithWhereUniqueWithoutCouponInput[]
    createMany?: user_couponCreateManyCouponInputEnvelope
    set?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    disconnect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    delete?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    connect?: user_couponWhereUniqueInput | user_couponWhereUniqueInput[]
    update?: user_couponUpdateWithWhereUniqueWithoutCouponInput | user_couponUpdateWithWhereUniqueWithoutCouponInput[]
    updateMany?: user_couponUpdateManyWithWhereWithoutCouponInput | user_couponUpdateManyWithWhereWithoutCouponInput[]
    deleteMany?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
  }

  export type user_accountCreateNestedOneWithoutUser_couponInput = {
    create?: XOR<user_accountCreateWithoutUser_couponInput, user_accountUncheckedCreateWithoutUser_couponInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_couponInput
    connect?: user_accountWhereUniqueInput
  }

  export type coupon_tableCreateNestedOneWithoutUser_couponInput = {
    create?: XOR<coupon_tableCreateWithoutUser_couponInput, coupon_tableUncheckedCreateWithoutUser_couponInput>
    connectOrCreate?: coupon_tableCreateOrConnectWithoutUser_couponInput
    connect?: coupon_tableWhereUniqueInput
  }

  export type user_accountUpdateOneRequiredWithoutUser_couponNestedInput = {
    create?: XOR<user_accountCreateWithoutUser_couponInput, user_accountUncheckedCreateWithoutUser_couponInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutUser_couponInput
    upsert?: user_accountUpsertWithoutUser_couponInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutUser_couponInput, user_accountUpdateWithoutUser_couponInput>, user_accountUncheckedUpdateWithoutUser_couponInput>
  }

  export type coupon_tableUpdateOneRequiredWithoutUser_couponNestedInput = {
    create?: XOR<coupon_tableCreateWithoutUser_couponInput, coupon_tableUncheckedCreateWithoutUser_couponInput>
    connectOrCreate?: coupon_tableCreateOrConnectWithoutUser_couponInput
    upsert?: coupon_tableUpsertWithoutUser_couponInput
    connect?: coupon_tableWhereUniqueInput
    update?: XOR<XOR<coupon_tableUpdateToOneWithWhereWithoutUser_couponInput, coupon_tableUpdateWithoutUser_couponInput>, coupon_tableUncheckedUpdateWithoutUser_couponInput>
  }

  export type organizer_profileCreateNestedOneWithoutOrganizerInput = {
    create?: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
    connectOrCreate?: organizer_profileCreateOrConnectWithoutOrganizerInput
    connect?: organizer_profileWhereUniqueInput
  }

  export type organizer_reviewsCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput> | organizer_reviewsCreateWithoutOrganizerInput[] | organizer_reviewsUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutOrganizerInput | organizer_reviewsCreateOrConnectWithoutOrganizerInput[]
    createMany?: organizer_reviewsCreateManyOrganizerInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type event_tableCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput> | event_tableCreateWithoutOrganizerInput[] | event_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizerInput | event_tableCreateOrConnectWithoutOrganizerInput[]
    createMany?: event_tableCreateManyOrganizerInputEnvelope
    connect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
  }

  export type event_attendeesCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput> | event_attendeesCreateWithoutOrganizerInput[] | event_attendeesUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutOrganizerInput | event_attendeesCreateOrConnectWithoutOrganizerInput[]
    createMany?: event_attendeesCreateManyOrganizerInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type voucher_tableCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput> | voucher_tableCreateWithoutOrganizerInput[] | voucher_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutOrganizerInput | voucher_tableCreateOrConnectWithoutOrganizerInput[]
    createMany?: voucher_tableCreateManyOrganizerInputEnvelope
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
  }

  export type organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput = {
    create?: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
    connectOrCreate?: organizer_profileCreateOrConnectWithoutOrganizerInput
    connect?: organizer_profileWhereUniqueInput
  }

  export type organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput> | organizer_reviewsCreateWithoutOrganizerInput[] | organizer_reviewsUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutOrganizerInput | organizer_reviewsCreateOrConnectWithoutOrganizerInput[]
    createMany?: organizer_reviewsCreateManyOrganizerInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type event_tableUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput> | event_tableCreateWithoutOrganizerInput[] | event_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizerInput | event_tableCreateOrConnectWithoutOrganizerInput[]
    createMany?: event_tableCreateManyOrganizerInputEnvelope
    connect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
  }

  export type event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput> | event_attendeesCreateWithoutOrganizerInput[] | event_attendeesUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutOrganizerInput | event_attendeesCreateOrConnectWithoutOrganizerInput[]
    createMany?: event_attendeesCreateManyOrganizerInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput> | voucher_tableCreateWithoutOrganizerInput[] | voucher_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutOrganizerInput | voucher_tableCreateOrConnectWithoutOrganizerInput[]
    createMany?: voucher_tableCreateManyOrganizerInputEnvelope
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
  }

  export type organizer_profileUpdateOneWithoutOrganizerNestedInput = {
    create?: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
    connectOrCreate?: organizer_profileCreateOrConnectWithoutOrganizerInput
    upsert?: organizer_profileUpsertWithoutOrganizerInput
    disconnect?: organizer_profileWhereInput | boolean
    delete?: organizer_profileWhereInput | boolean
    connect?: organizer_profileWhereUniqueInput
    update?: XOR<XOR<organizer_profileUpdateToOneWithWhereWithoutOrganizerInput, organizer_profileUpdateWithoutOrganizerInput>, organizer_profileUncheckedUpdateWithoutOrganizerInput>
  }

  export type organizer_reviewsUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput> | organizer_reviewsCreateWithoutOrganizerInput[] | organizer_reviewsUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutOrganizerInput | organizer_reviewsCreateOrConnectWithoutOrganizerInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutOrganizerInput | organizer_reviewsUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: organizer_reviewsCreateManyOrganizerInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutOrganizerInput | organizer_reviewsUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutOrganizerInput | organizer_reviewsUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type event_tableUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput> | event_tableCreateWithoutOrganizerInput[] | event_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizerInput | event_tableCreateOrConnectWithoutOrganizerInput[]
    upsert?: event_tableUpsertWithWhereUniqueWithoutOrganizerInput | event_tableUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: event_tableCreateManyOrganizerInputEnvelope
    set?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    disconnect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    delete?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    connect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    update?: event_tableUpdateWithWhereUniqueWithoutOrganizerInput | event_tableUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: event_tableUpdateManyWithWhereWithoutOrganizerInput | event_tableUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: event_tableScalarWhereInput | event_tableScalarWhereInput[]
  }

  export type event_attendeesUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput> | event_attendeesCreateWithoutOrganizerInput[] | event_attendeesUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutOrganizerInput | event_attendeesCreateOrConnectWithoutOrganizerInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutOrganizerInput | event_attendeesUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: event_attendeesCreateManyOrganizerInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutOrganizerInput | event_attendeesUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutOrganizerInput | event_attendeesUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type voucher_tableUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput> | voucher_tableCreateWithoutOrganizerInput[] | voucher_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutOrganizerInput | voucher_tableCreateOrConnectWithoutOrganizerInput[]
    upsert?: voucher_tableUpsertWithWhereUniqueWithoutOrganizerInput | voucher_tableUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: voucher_tableCreateManyOrganizerInputEnvelope
    set?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    disconnect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    delete?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    update?: voucher_tableUpdateWithWhereUniqueWithoutOrganizerInput | voucher_tableUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: voucher_tableUpdateManyWithWhereWithoutOrganizerInput | voucher_tableUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
  }

  export type organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput = {
    create?: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
    connectOrCreate?: organizer_profileCreateOrConnectWithoutOrganizerInput
    upsert?: organizer_profileUpsertWithoutOrganizerInput
    disconnect?: organizer_profileWhereInput | boolean
    delete?: organizer_profileWhereInput | boolean
    connect?: organizer_profileWhereUniqueInput
    update?: XOR<XOR<organizer_profileUpdateToOneWithWhereWithoutOrganizerInput, organizer_profileUpdateWithoutOrganizerInput>, organizer_profileUncheckedUpdateWithoutOrganizerInput>
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput> | organizer_reviewsCreateWithoutOrganizerInput[] | organizer_reviewsUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutOrganizerInput | organizer_reviewsCreateOrConnectWithoutOrganizerInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutOrganizerInput | organizer_reviewsUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: organizer_reviewsCreateManyOrganizerInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutOrganizerInput | organizer_reviewsUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutOrganizerInput | organizer_reviewsUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type event_tableUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput> | event_tableCreateWithoutOrganizerInput[] | event_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizerInput | event_tableCreateOrConnectWithoutOrganizerInput[]
    upsert?: event_tableUpsertWithWhereUniqueWithoutOrganizerInput | event_tableUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: event_tableCreateManyOrganizerInputEnvelope
    set?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    disconnect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    delete?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    connect?: event_tableWhereUniqueInput | event_tableWhereUniqueInput[]
    update?: event_tableUpdateWithWhereUniqueWithoutOrganizerInput | event_tableUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: event_tableUpdateManyWithWhereWithoutOrganizerInput | event_tableUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: event_tableScalarWhereInput | event_tableScalarWhereInput[]
  }

  export type event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput> | event_attendeesCreateWithoutOrganizerInput[] | event_attendeesUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutOrganizerInput | event_attendeesCreateOrConnectWithoutOrganizerInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutOrganizerInput | event_attendeesUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: event_attendeesCreateManyOrganizerInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutOrganizerInput | event_attendeesUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutOrganizerInput | event_attendeesUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput> | voucher_tableCreateWithoutOrganizerInput[] | voucher_tableUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutOrganizerInput | voucher_tableCreateOrConnectWithoutOrganizerInput[]
    upsert?: voucher_tableUpsertWithWhereUniqueWithoutOrganizerInput | voucher_tableUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: voucher_tableCreateManyOrganizerInputEnvelope
    set?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    disconnect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    delete?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    update?: voucher_tableUpdateWithWhereUniqueWithoutOrganizerInput | voucher_tableUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: voucher_tableUpdateManyWithWhereWithoutOrganizerInput | voucher_tableUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
  }

  export type organizer_accountCreateNestedOneWithoutOrganizer_profileInput = {
    create?: XOR<organizer_accountCreateWithoutOrganizer_profileInput, organizer_accountUncheckedCreateWithoutOrganizer_profileInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutOrganizer_profileInput
    connect?: organizer_accountWhereUniqueInput
  }

  export type organizer_accountUpdateOneRequiredWithoutOrganizer_profileNestedInput = {
    create?: XOR<organizer_accountCreateWithoutOrganizer_profileInput, organizer_accountUncheckedCreateWithoutOrganizer_profileInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutOrganizer_profileInput
    upsert?: organizer_accountUpsertWithoutOrganizer_profileInput
    connect?: organizer_accountWhereUniqueInput
    update?: XOR<XOR<organizer_accountUpdateToOneWithWhereWithoutOrganizer_profileInput, organizer_accountUpdateWithoutOrganizer_profileInput>, organizer_accountUncheckedUpdateWithoutOrganizer_profileInput>
  }

  export type organizer_accountCreateNestedOneWithoutOrganizer_reviewsInput = {
    create?: XOR<organizer_accountCreateWithoutOrganizer_reviewsInput, organizer_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutOrganizer_reviewsInput
    connect?: organizer_accountWhereUniqueInput
  }

  export type event_tableCreateNestedOneWithoutOrganizer_reviewsInput = {
    create?: XOR<event_tableCreateWithoutOrganizer_reviewsInput, event_tableUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizer_reviewsInput
    connect?: event_tableWhereUniqueInput
  }

  export type user_accountCreateNestedOneWithoutOrganizer_reviewsInput = {
    create?: XOR<user_accountCreateWithoutOrganizer_reviewsInput, user_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutOrganizer_reviewsInput
    connect?: user_accountWhereUniqueInput
  }

  export type organizer_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput = {
    create?: XOR<organizer_accountCreateWithoutOrganizer_reviewsInput, organizer_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutOrganizer_reviewsInput
    upsert?: organizer_accountUpsertWithoutOrganizer_reviewsInput
    connect?: organizer_accountWhereUniqueInput
    update?: XOR<XOR<organizer_accountUpdateToOneWithWhereWithoutOrganizer_reviewsInput, organizer_accountUpdateWithoutOrganizer_reviewsInput>, organizer_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type event_tableUpdateOneRequiredWithoutOrganizer_reviewsNestedInput = {
    create?: XOR<event_tableCreateWithoutOrganizer_reviewsInput, event_tableUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutOrganizer_reviewsInput
    upsert?: event_tableUpsertWithoutOrganizer_reviewsInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutOrganizer_reviewsInput, event_tableUpdateWithoutOrganizer_reviewsInput>, event_tableUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type user_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput = {
    create?: XOR<user_accountCreateWithoutOrganizer_reviewsInput, user_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutOrganizer_reviewsInput
    upsert?: user_accountUpsertWithoutOrganizer_reviewsInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutOrganizer_reviewsInput, user_accountUpdateWithoutOrganizer_reviewsInput>, user_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type organizer_accountCreateNestedOneWithoutEvent_tableInput = {
    create?: XOR<organizer_accountCreateWithoutEvent_tableInput, organizer_accountUncheckedCreateWithoutEvent_tableInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutEvent_tableInput
    connect?: organizer_accountWhereUniqueInput
  }

  export type organizer_reviewsCreateNestedManyWithoutEventInput = {
    create?: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput> | organizer_reviewsCreateWithoutEventInput[] | organizer_reviewsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutEventInput | organizer_reviewsCreateOrConnectWithoutEventInput[]
    createMany?: organizer_reviewsCreateManyEventInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type ticket_holdsCreateNestedManyWithoutEventInput = {
    create?: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput> | ticket_holdsCreateWithoutEventInput[] | ticket_holdsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutEventInput | ticket_holdsCreateOrConnectWithoutEventInput[]
    createMany?: ticket_holdsCreateManyEventInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type ticket_typeCreateNestedManyWithoutEventInput = {
    create?: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput> | ticket_typeCreateWithoutEventInput[] | ticket_typeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_typeCreateOrConnectWithoutEventInput | ticket_typeCreateOrConnectWithoutEventInput[]
    createMany?: ticket_typeCreateManyEventInputEnvelope
    connect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
  }

  export type event_attendeesCreateNestedManyWithoutEventInput = {
    create?: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput> | event_attendeesCreateWithoutEventInput[] | event_attendeesUncheckedCreateWithoutEventInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutEventInput | event_attendeesCreateOrConnectWithoutEventInput[]
    createMany?: event_attendeesCreateManyEventInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type transactions_tableCreateNestedManyWithoutEventInput = {
    create?: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput> | transactions_tableCreateWithoutEventInput[] | transactions_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutEventInput | transactions_tableCreateOrConnectWithoutEventInput[]
    createMany?: transactions_tableCreateManyEventInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type voucher_tableCreateNestedManyWithoutEventInput = {
    create?: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput> | voucher_tableCreateWithoutEventInput[] | voucher_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutEventInput | voucher_tableCreateOrConnectWithoutEventInput[]
    createMany?: voucher_tableCreateManyEventInputEnvelope
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
  }

  export type organizer_reviewsUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput> | organizer_reviewsCreateWithoutEventInput[] | organizer_reviewsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutEventInput | organizer_reviewsCreateOrConnectWithoutEventInput[]
    createMany?: organizer_reviewsCreateManyEventInputEnvelope
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
  }

  export type ticket_holdsUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput> | ticket_holdsCreateWithoutEventInput[] | ticket_holdsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutEventInput | ticket_holdsCreateOrConnectWithoutEventInput[]
    createMany?: ticket_holdsCreateManyEventInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type ticket_typeUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput> | ticket_typeCreateWithoutEventInput[] | ticket_typeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_typeCreateOrConnectWithoutEventInput | ticket_typeCreateOrConnectWithoutEventInput[]
    createMany?: ticket_typeCreateManyEventInputEnvelope
    connect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
  }

  export type event_attendeesUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput> | event_attendeesCreateWithoutEventInput[] | event_attendeesUncheckedCreateWithoutEventInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutEventInput | event_attendeesCreateOrConnectWithoutEventInput[]
    createMany?: event_attendeesCreateManyEventInputEnvelope
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
  }

  export type transactions_tableUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput> | transactions_tableCreateWithoutEventInput[] | transactions_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutEventInput | transactions_tableCreateOrConnectWithoutEventInput[]
    createMany?: transactions_tableCreateManyEventInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type voucher_tableUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput> | voucher_tableCreateWithoutEventInput[] | voucher_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutEventInput | voucher_tableCreateOrConnectWithoutEventInput[]
    createMany?: voucher_tableCreateManyEventInputEnvelope
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
  }

  export type organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput = {
    create?: XOR<organizer_accountCreateWithoutEvent_tableInput, organizer_accountUncheckedCreateWithoutEvent_tableInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutEvent_tableInput
    upsert?: organizer_accountUpsertWithoutEvent_tableInput
    connect?: organizer_accountWhereUniqueInput
    update?: XOR<XOR<organizer_accountUpdateToOneWithWhereWithoutEvent_tableInput, organizer_accountUpdateWithoutEvent_tableInput>, organizer_accountUncheckedUpdateWithoutEvent_tableInput>
  }

  export type organizer_reviewsUpdateManyWithoutEventNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput> | organizer_reviewsCreateWithoutEventInput[] | organizer_reviewsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutEventInput | organizer_reviewsCreateOrConnectWithoutEventInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutEventInput | organizer_reviewsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: organizer_reviewsCreateManyEventInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutEventInput | organizer_reviewsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutEventInput | organizer_reviewsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type ticket_holdsUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput> | ticket_holdsCreateWithoutEventInput[] | ticket_holdsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutEventInput | ticket_holdsCreateOrConnectWithoutEventInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutEventInput | ticket_holdsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticket_holdsCreateManyEventInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutEventInput | ticket_holdsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutEventInput | ticket_holdsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type ticket_typeUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput> | ticket_typeCreateWithoutEventInput[] | ticket_typeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_typeCreateOrConnectWithoutEventInput | ticket_typeCreateOrConnectWithoutEventInput[]
    upsert?: ticket_typeUpsertWithWhereUniqueWithoutEventInput | ticket_typeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticket_typeCreateManyEventInputEnvelope
    set?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    disconnect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    delete?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    connect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    update?: ticket_typeUpdateWithWhereUniqueWithoutEventInput | ticket_typeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticket_typeUpdateManyWithWhereWithoutEventInput | ticket_typeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticket_typeScalarWhereInput | ticket_typeScalarWhereInput[]
  }

  export type event_attendeesUpdateManyWithoutEventNestedInput = {
    create?: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput> | event_attendeesCreateWithoutEventInput[] | event_attendeesUncheckedCreateWithoutEventInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutEventInput | event_attendeesCreateOrConnectWithoutEventInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutEventInput | event_attendeesUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: event_attendeesCreateManyEventInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutEventInput | event_attendeesUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutEventInput | event_attendeesUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type transactions_tableUpdateManyWithoutEventNestedInput = {
    create?: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput> | transactions_tableCreateWithoutEventInput[] | transactions_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutEventInput | transactions_tableCreateOrConnectWithoutEventInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutEventInput | transactions_tableUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: transactions_tableCreateManyEventInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutEventInput | transactions_tableUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutEventInput | transactions_tableUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type voucher_tableUpdateManyWithoutEventNestedInput = {
    create?: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput> | voucher_tableCreateWithoutEventInput[] | voucher_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutEventInput | voucher_tableCreateOrConnectWithoutEventInput[]
    upsert?: voucher_tableUpsertWithWhereUniqueWithoutEventInput | voucher_tableUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: voucher_tableCreateManyEventInputEnvelope
    set?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    disconnect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    delete?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    update?: voucher_tableUpdateWithWhereUniqueWithoutEventInput | voucher_tableUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: voucher_tableUpdateManyWithWhereWithoutEventInput | voucher_tableUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput> | organizer_reviewsCreateWithoutEventInput[] | organizer_reviewsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: organizer_reviewsCreateOrConnectWithoutEventInput | organizer_reviewsCreateOrConnectWithoutEventInput[]
    upsert?: organizer_reviewsUpsertWithWhereUniqueWithoutEventInput | organizer_reviewsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: organizer_reviewsCreateManyEventInputEnvelope
    set?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    disconnect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    delete?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    connect?: organizer_reviewsWhereUniqueInput | organizer_reviewsWhereUniqueInput[]
    update?: organizer_reviewsUpdateWithWhereUniqueWithoutEventInput | organizer_reviewsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: organizer_reviewsUpdateManyWithWhereWithoutEventInput | organizer_reviewsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
  }

  export type ticket_holdsUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput> | ticket_holdsCreateWithoutEventInput[] | ticket_holdsUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutEventInput | ticket_holdsCreateOrConnectWithoutEventInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutEventInput | ticket_holdsUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticket_holdsCreateManyEventInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutEventInput | ticket_holdsUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutEventInput | ticket_holdsUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type ticket_typeUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput> | ticket_typeCreateWithoutEventInput[] | ticket_typeUncheckedCreateWithoutEventInput[]
    connectOrCreate?: ticket_typeCreateOrConnectWithoutEventInput | ticket_typeCreateOrConnectWithoutEventInput[]
    upsert?: ticket_typeUpsertWithWhereUniqueWithoutEventInput | ticket_typeUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: ticket_typeCreateManyEventInputEnvelope
    set?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    disconnect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    delete?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    connect?: ticket_typeWhereUniqueInput | ticket_typeWhereUniqueInput[]
    update?: ticket_typeUpdateWithWhereUniqueWithoutEventInput | ticket_typeUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: ticket_typeUpdateManyWithWhereWithoutEventInput | ticket_typeUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: ticket_typeScalarWhereInput | ticket_typeScalarWhereInput[]
  }

  export type event_attendeesUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput> | event_attendeesCreateWithoutEventInput[] | event_attendeesUncheckedCreateWithoutEventInput[]
    connectOrCreate?: event_attendeesCreateOrConnectWithoutEventInput | event_attendeesCreateOrConnectWithoutEventInput[]
    upsert?: event_attendeesUpsertWithWhereUniqueWithoutEventInput | event_attendeesUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: event_attendeesCreateManyEventInputEnvelope
    set?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    disconnect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    delete?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    connect?: event_attendeesWhereUniqueInput | event_attendeesWhereUniqueInput[]
    update?: event_attendeesUpdateWithWhereUniqueWithoutEventInput | event_attendeesUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: event_attendeesUpdateManyWithWhereWithoutEventInput | event_attendeesUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
  }

  export type transactions_tableUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput> | transactions_tableCreateWithoutEventInput[] | transactions_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutEventInput | transactions_tableCreateOrConnectWithoutEventInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutEventInput | transactions_tableUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: transactions_tableCreateManyEventInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutEventInput | transactions_tableUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutEventInput | transactions_tableUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type voucher_tableUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput> | voucher_tableCreateWithoutEventInput[] | voucher_tableUncheckedCreateWithoutEventInput[]
    connectOrCreate?: voucher_tableCreateOrConnectWithoutEventInput | voucher_tableCreateOrConnectWithoutEventInput[]
    upsert?: voucher_tableUpsertWithWhereUniqueWithoutEventInput | voucher_tableUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: voucher_tableCreateManyEventInputEnvelope
    set?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    disconnect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    delete?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    connect?: voucher_tableWhereUniqueInput | voucher_tableWhereUniqueInput[]
    update?: voucher_tableUpdateWithWhereUniqueWithoutEventInput | voucher_tableUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: voucher_tableUpdateManyWithWhereWithoutEventInput | voucher_tableUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
  }

  export type event_tableCreateNestedOneWithoutTicket_holdsInput = {
    create?: XOR<event_tableCreateWithoutTicket_holdsInput, event_tableUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTicket_holdsInput
    connect?: event_tableWhereUniqueInput
  }

  export type user_accountCreateNestedOneWithoutTicket_holdsInput = {
    create?: XOR<user_accountCreateWithoutTicket_holdsInput, user_accountUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutTicket_holdsInput
    connect?: user_accountWhereUniqueInput
  }

  export type ticket_typeCreateNestedOneWithoutTicket_holdsInput = {
    create?: XOR<ticket_typeCreateWithoutTicket_holdsInput, ticket_typeUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: ticket_typeCreateOrConnectWithoutTicket_holdsInput
    connect?: ticket_typeWhereUniqueInput
  }

  export type transactions_tableCreateNestedOneWithoutTicketInput = {
    create?: XOR<transactions_tableCreateWithoutTicketInput, transactions_tableUncheckedCreateWithoutTicketInput>
    connectOrCreate?: transactions_tableCreateOrConnectWithoutTicketInput
    connect?: transactions_tableWhereUniqueInput
  }

  export type event_tableUpdateOneRequiredWithoutTicket_holdsNestedInput = {
    create?: XOR<event_tableCreateWithoutTicket_holdsInput, event_tableUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTicket_holdsInput
    upsert?: event_tableUpsertWithoutTicket_holdsInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutTicket_holdsInput, event_tableUpdateWithoutTicket_holdsInput>, event_tableUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type user_accountUpdateOneRequiredWithoutTicket_holdsNestedInput = {
    create?: XOR<user_accountCreateWithoutTicket_holdsInput, user_accountUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutTicket_holdsInput
    upsert?: user_accountUpsertWithoutTicket_holdsInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutTicket_holdsInput, user_accountUpdateWithoutTicket_holdsInput>, user_accountUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type ticket_typeUpdateOneRequiredWithoutTicket_holdsNestedInput = {
    create?: XOR<ticket_typeCreateWithoutTicket_holdsInput, ticket_typeUncheckedCreateWithoutTicket_holdsInput>
    connectOrCreate?: ticket_typeCreateOrConnectWithoutTicket_holdsInput
    upsert?: ticket_typeUpsertWithoutTicket_holdsInput
    connect?: ticket_typeWhereUniqueInput
    update?: XOR<XOR<ticket_typeUpdateToOneWithWhereWithoutTicket_holdsInput, ticket_typeUpdateWithoutTicket_holdsInput>, ticket_typeUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type transactions_tableUpdateOneRequiredWithoutTicketNestedInput = {
    create?: XOR<transactions_tableCreateWithoutTicketInput, transactions_tableUncheckedCreateWithoutTicketInput>
    connectOrCreate?: transactions_tableCreateOrConnectWithoutTicketInput
    upsert?: transactions_tableUpsertWithoutTicketInput
    connect?: transactions_tableWhereUniqueInput
    update?: XOR<XOR<transactions_tableUpdateToOneWithWhereWithoutTicketInput, transactions_tableUpdateWithoutTicketInput>, transactions_tableUncheckedUpdateWithoutTicketInput>
  }

  export type event_tableCreateNestedOneWithoutTicket_typeInput = {
    create?: XOR<event_tableCreateWithoutTicket_typeInput, event_tableUncheckedCreateWithoutTicket_typeInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTicket_typeInput
    connect?: event_tableWhereUniqueInput
  }

  export type ticket_holdsCreateNestedManyWithoutTicket_typeInput = {
    create?: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput> | ticket_holdsCreateWithoutTicket_typeInput[] | ticket_holdsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTicket_typeInput | ticket_holdsCreateOrConnectWithoutTicket_typeInput[]
    createMany?: ticket_holdsCreateManyTicket_typeInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type ticket_holdsUncheckedCreateNestedManyWithoutTicket_typeInput = {
    create?: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput> | ticket_holdsCreateWithoutTicket_typeInput[] | ticket_holdsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTicket_typeInput | ticket_holdsCreateOrConnectWithoutTicket_typeInput[]
    createMany?: ticket_holdsCreateManyTicket_typeInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type event_tableUpdateOneRequiredWithoutTicket_typeNestedInput = {
    create?: XOR<event_tableCreateWithoutTicket_typeInput, event_tableUncheckedCreateWithoutTicket_typeInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTicket_typeInput
    upsert?: event_tableUpsertWithoutTicket_typeInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutTicket_typeInput, event_tableUpdateWithoutTicket_typeInput>, event_tableUncheckedUpdateWithoutTicket_typeInput>
  }

  export type ticket_holdsUpdateManyWithoutTicket_typeNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput> | ticket_holdsCreateWithoutTicket_typeInput[] | ticket_holdsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTicket_typeInput | ticket_holdsCreateOrConnectWithoutTicket_typeInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutTicket_typeInput | ticket_holdsUpsertWithWhereUniqueWithoutTicket_typeInput[]
    createMany?: ticket_holdsCreateManyTicket_typeInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutTicket_typeInput | ticket_holdsUpdateWithWhereUniqueWithoutTicket_typeInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutTicket_typeInput | ticket_holdsUpdateManyWithWhereWithoutTicket_typeInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type ticket_holdsUncheckedUpdateManyWithoutTicket_typeNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput> | ticket_holdsCreateWithoutTicket_typeInput[] | ticket_holdsUncheckedCreateWithoutTicket_typeInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTicket_typeInput | ticket_holdsCreateOrConnectWithoutTicket_typeInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutTicket_typeInput | ticket_holdsUpsertWithWhereUniqueWithoutTicket_typeInput[]
    createMany?: ticket_holdsCreateManyTicket_typeInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutTicket_typeInput | ticket_holdsUpdateWithWhereUniqueWithoutTicket_typeInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutTicket_typeInput | ticket_holdsUpdateManyWithWhereWithoutTicket_typeInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type event_tableCreateNestedOneWithoutEvent_attendeesInput = {
    create?: XOR<event_tableCreateWithoutEvent_attendeesInput, event_tableUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutEvent_attendeesInput
    connect?: event_tableWhereUniqueInput
  }

  export type organizer_accountCreateNestedOneWithoutEvent_attendeesInput = {
    create?: XOR<organizer_accountCreateWithoutEvent_attendeesInput, organizer_accountUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutEvent_attendeesInput
    connect?: organizer_accountWhereUniqueInput
  }

  export type user_accountCreateNestedOneWithoutEvent_attendeesInput = {
    create?: XOR<user_accountCreateWithoutEvent_attendeesInput, user_accountUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutEvent_attendeesInput
    connect?: user_accountWhereUniqueInput
  }

  export type Enumevent_statusFieldUpdateOperationsInput = {
    set?: $Enums.event_status
  }

  export type event_tableUpdateOneRequiredWithoutEvent_attendeesNestedInput = {
    create?: XOR<event_tableCreateWithoutEvent_attendeesInput, event_tableUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutEvent_attendeesInput
    upsert?: event_tableUpsertWithoutEvent_attendeesInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutEvent_attendeesInput, event_tableUpdateWithoutEvent_attendeesInput>, event_tableUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type organizer_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput = {
    create?: XOR<organizer_accountCreateWithoutEvent_attendeesInput, organizer_accountUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutEvent_attendeesInput
    upsert?: organizer_accountUpsertWithoutEvent_attendeesInput
    connect?: organizer_accountWhereUniqueInput
    update?: XOR<XOR<organizer_accountUpdateToOneWithWhereWithoutEvent_attendeesInput, organizer_accountUpdateWithoutEvent_attendeesInput>, organizer_accountUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type user_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput = {
    create?: XOR<user_accountCreateWithoutEvent_attendeesInput, user_accountUncheckedCreateWithoutEvent_attendeesInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutEvent_attendeesInput
    upsert?: user_accountUpsertWithoutEvent_attendeesInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutEvent_attendeesInput, user_accountUpdateWithoutEvent_attendeesInput>, user_accountUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type user_accountCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<user_accountCreateWithoutTransactionsInput, user_accountUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutTransactionsInput
    connect?: user_accountWhereUniqueInput
  }

  export type event_tableCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<event_tableCreateWithoutTransactionsInput, event_tableUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTransactionsInput
    connect?: event_tableWhereUniqueInput
  }

  export type ticket_holdsCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput> | ticket_holdsCreateWithoutTransactionsInput[] | ticket_holdsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTransactionsInput | ticket_holdsCreateOrConnectWithoutTransactionsInput[]
    createMany?: ticket_holdsCreateManyTransactionsInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type voucher_tableCreateNestedOneWithoutTransactions_tableInput = {
    create?: XOR<voucher_tableCreateWithoutTransactions_tableInput, voucher_tableUncheckedCreateWithoutTransactions_tableInput>
    connectOrCreate?: voucher_tableCreateOrConnectWithoutTransactions_tableInput
    connect?: voucher_tableWhereUniqueInput
  }

  export type ticket_holdsUncheckedCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput> | ticket_holdsCreateWithoutTransactionsInput[] | ticket_holdsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTransactionsInput | ticket_holdsCreateOrConnectWithoutTransactionsInput[]
    createMany?: ticket_holdsCreateManyTransactionsInputEnvelope
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
  }

  export type Enumtransactions_statusFieldUpdateOperationsInput = {
    set?: $Enums.transactions_status
  }

  export type user_accountUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<user_accountCreateWithoutTransactionsInput, user_accountUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: user_accountCreateOrConnectWithoutTransactionsInput
    upsert?: user_accountUpsertWithoutTransactionsInput
    connect?: user_accountWhereUniqueInput
    update?: XOR<XOR<user_accountUpdateToOneWithWhereWithoutTransactionsInput, user_accountUpdateWithoutTransactionsInput>, user_accountUncheckedUpdateWithoutTransactionsInput>
  }

  export type event_tableUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<event_tableCreateWithoutTransactionsInput, event_tableUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutTransactionsInput
    upsert?: event_tableUpsertWithoutTransactionsInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutTransactionsInput, event_tableUpdateWithoutTransactionsInput>, event_tableUncheckedUpdateWithoutTransactionsInput>
  }

  export type ticket_holdsUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput> | ticket_holdsCreateWithoutTransactionsInput[] | ticket_holdsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTransactionsInput | ticket_holdsCreateOrConnectWithoutTransactionsInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutTransactionsInput | ticket_holdsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: ticket_holdsCreateManyTransactionsInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutTransactionsInput | ticket_holdsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutTransactionsInput | ticket_holdsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type voucher_tableUpdateOneWithoutTransactions_tableNestedInput = {
    create?: XOR<voucher_tableCreateWithoutTransactions_tableInput, voucher_tableUncheckedCreateWithoutTransactions_tableInput>
    connectOrCreate?: voucher_tableCreateOrConnectWithoutTransactions_tableInput
    upsert?: voucher_tableUpsertWithoutTransactions_tableInput
    disconnect?: voucher_tableWhereInput | boolean
    delete?: voucher_tableWhereInput | boolean
    connect?: voucher_tableWhereUniqueInput
    update?: XOR<XOR<voucher_tableUpdateToOneWithWhereWithoutTransactions_tableInput, voucher_tableUpdateWithoutTransactions_tableInput>, voucher_tableUncheckedUpdateWithoutTransactions_tableInput>
  }

  export type ticket_holdsUncheckedUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput> | ticket_holdsCreateWithoutTransactionsInput[] | ticket_holdsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: ticket_holdsCreateOrConnectWithoutTransactionsInput | ticket_holdsCreateOrConnectWithoutTransactionsInput[]
    upsert?: ticket_holdsUpsertWithWhereUniqueWithoutTransactionsInput | ticket_holdsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: ticket_holdsCreateManyTransactionsInputEnvelope
    set?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    disconnect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    delete?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    connect?: ticket_holdsWhereUniqueInput | ticket_holdsWhereUniqueInput[]
    update?: ticket_holdsUpdateWithWhereUniqueWithoutTransactionsInput | ticket_holdsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: ticket_holdsUpdateManyWithWhereWithoutTransactionsInput | ticket_holdsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
  }

  export type organizer_accountCreateNestedOneWithoutVoucherInput = {
    create?: XOR<organizer_accountCreateWithoutVoucherInput, organizer_accountUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutVoucherInput
    connect?: organizer_accountWhereUniqueInput
  }

  export type event_tableCreateNestedOneWithoutVoucherInput = {
    create?: XOR<event_tableCreateWithoutVoucherInput, event_tableUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutVoucherInput
    connect?: event_tableWhereUniqueInput
  }

  export type transactions_tableCreateNestedManyWithoutVoucherInput = {
    create?: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput> | transactions_tableCreateWithoutVoucherInput[] | transactions_tableUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutVoucherInput | transactions_tableCreateOrConnectWithoutVoucherInput[]
    createMany?: transactions_tableCreateManyVoucherInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type transactions_tableUncheckedCreateNestedManyWithoutVoucherInput = {
    create?: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput> | transactions_tableCreateWithoutVoucherInput[] | transactions_tableUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutVoucherInput | transactions_tableCreateOrConnectWithoutVoucherInput[]
    createMany?: transactions_tableCreateManyVoucherInputEnvelope
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
  }

  export type organizer_accountUpdateOneRequiredWithoutVoucherNestedInput = {
    create?: XOR<organizer_accountCreateWithoutVoucherInput, organizer_accountUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: organizer_accountCreateOrConnectWithoutVoucherInput
    upsert?: organizer_accountUpsertWithoutVoucherInput
    connect?: organizer_accountWhereUniqueInput
    update?: XOR<XOR<organizer_accountUpdateToOneWithWhereWithoutVoucherInput, organizer_accountUpdateWithoutVoucherInput>, organizer_accountUncheckedUpdateWithoutVoucherInput>
  }

  export type event_tableUpdateOneRequiredWithoutVoucherNestedInput = {
    create?: XOR<event_tableCreateWithoutVoucherInput, event_tableUncheckedCreateWithoutVoucherInput>
    connectOrCreate?: event_tableCreateOrConnectWithoutVoucherInput
    upsert?: event_tableUpsertWithoutVoucherInput
    connect?: event_tableWhereUniqueInput
    update?: XOR<XOR<event_tableUpdateToOneWithWhereWithoutVoucherInput, event_tableUpdateWithoutVoucherInput>, event_tableUncheckedUpdateWithoutVoucherInput>
  }

  export type transactions_tableUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput> | transactions_tableCreateWithoutVoucherInput[] | transactions_tableUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutVoucherInput | transactions_tableCreateOrConnectWithoutVoucherInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutVoucherInput | transactions_tableUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: transactions_tableCreateManyVoucherInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutVoucherInput | transactions_tableUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutVoucherInput | transactions_tableUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type transactions_tableUncheckedUpdateManyWithoutVoucherNestedInput = {
    create?: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput> | transactions_tableCreateWithoutVoucherInput[] | transactions_tableUncheckedCreateWithoutVoucherInput[]
    connectOrCreate?: transactions_tableCreateOrConnectWithoutVoucherInput | transactions_tableCreateOrConnectWithoutVoucherInput[]
    upsert?: transactions_tableUpsertWithWhereUniqueWithoutVoucherInput | transactions_tableUpsertWithWhereUniqueWithoutVoucherInput[]
    createMany?: transactions_tableCreateManyVoucherInputEnvelope
    set?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    disconnect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    delete?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    connect?: transactions_tableWhereUniqueInput | transactions_tableWhereUniqueInput[]
    update?: transactions_tableUpdateWithWhereUniqueWithoutVoucherInput | transactions_tableUpdateWithWhereUniqueWithoutVoucherInput[]
    updateMany?: transactions_tableUpdateManyWithWhereWithoutVoucherInput | transactions_tableUpdateManyWithWhereWithoutVoucherInput[]
    deleteMany?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumaccount_roleFilter<$PrismaModel = never> = {
    equals?: $Enums.account_role | Enumaccount_roleFieldRefInput<$PrismaModel>
    in?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    notIn?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    not?: NestedEnumaccount_roleFilter<$PrismaModel> | $Enums.account_role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumaccount_roleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.account_role | Enumaccount_roleFieldRefInput<$PrismaModel>
    in?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    notIn?: $Enums.account_role[] | ListEnumaccount_roleFieldRefInput<$PrismaModel>
    not?: NestedEnumaccount_roleWithAggregatesFilter<$PrismaModel> | $Enums.account_role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumaccount_roleFilter<$PrismaModel>
    _max?: NestedEnumaccount_roleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumdiscount_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_type | Enumdiscount_typeFieldRefInput<$PrismaModel>
    in?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumdiscount_typeFilter<$PrismaModel> | $Enums.discount_type
  }

  export type NestedEnumcoupon_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.coupon_status | Enumcoupon_statusFieldRefInput<$PrismaModel>
    in?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumcoupon_statusFilter<$PrismaModel> | $Enums.coupon_status
  }

  export type NestedEnumissuerFilter<$PrismaModel = never> = {
    equals?: $Enums.issuer | EnumissuerFieldRefInput<$PrismaModel>
    in?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    notIn?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    not?: NestedEnumissuerFilter<$PrismaModel> | $Enums.issuer
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumdiscount_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.discount_type | Enumdiscount_typeFieldRefInput<$PrismaModel>
    in?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.discount_type[] | ListEnumdiscount_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumdiscount_typeWithAggregatesFilter<$PrismaModel> | $Enums.discount_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumdiscount_typeFilter<$PrismaModel>
    _max?: NestedEnumdiscount_typeFilter<$PrismaModel>
  }

  export type NestedEnumcoupon_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.coupon_status | Enumcoupon_statusFieldRefInput<$PrismaModel>
    in?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.coupon_status[] | ListEnumcoupon_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumcoupon_statusWithAggregatesFilter<$PrismaModel> | $Enums.coupon_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumcoupon_statusFilter<$PrismaModel>
    _max?: NestedEnumcoupon_statusFilter<$PrismaModel>
  }

  export type NestedEnumissuerWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.issuer | EnumissuerFieldRefInput<$PrismaModel>
    in?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    notIn?: $Enums.issuer[] | ListEnumissuerFieldRefInput<$PrismaModel>
    not?: NestedEnumissuerWithAggregatesFilter<$PrismaModel> | $Enums.issuer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumissuerFilter<$PrismaModel>
    _max?: NestedEnumissuerFilter<$PrismaModel>
  }

  export type NestedEnumevent_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumevent_statusFilter<$PrismaModel> | $Enums.event_status
  }

  export type NestedEnumevent_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.event_status | Enumevent_statusFieldRefInput<$PrismaModel>
    in?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.event_status[] | ListEnumevent_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumevent_statusWithAggregatesFilter<$PrismaModel> | $Enums.event_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumevent_statusFilter<$PrismaModel>
    _max?: NestedEnumevent_statusFilter<$PrismaModel>
  }

  export type NestedEnumtransactions_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.transactions_status | Enumtransactions_statusFieldRefInput<$PrismaModel>
    in?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactions_statusFilter<$PrismaModel> | $Enums.transactions_status
  }

  export type NestedEnumtransactions_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.transactions_status | Enumtransactions_statusFieldRefInput<$PrismaModel>
    in?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    notIn?: $Enums.transactions_status[] | ListEnumtransactions_statusFieldRefInput<$PrismaModel>
    not?: NestedEnumtransactions_statusWithAggregatesFilter<$PrismaModel> | $Enums.transactions_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtransactions_statusFilter<$PrismaModel>
    _max?: NestedEnumtransactions_statusFilter<$PrismaModel>
  }

  export type user_profileCreateWithoutUserInput = {
    user_fullname: string
    user_date_of_birth: Date | string
    user_phone: number
    user_profile_image: string
  }

  export type user_profileUncheckedCreateWithoutUserInput = {
    id?: number
    user_fullname: string
    user_date_of_birth: Date | string
    user_phone: number
    user_profile_image: string
  }

  export type user_profileCreateOrConnectWithoutUserInput = {
    where: user_profileWhereUniqueInput
    create: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
  }

  export type user_pointsCreateWithoutUserInput = {
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    points_redemption_items?: points_redemption_itemsCreateNestedManyWithoutUser_pointsInput
  }

  export type user_pointsUncheckedCreateWithoutUserInput = {
    id?: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    points_redemption_items?: points_redemption_itemsUncheckedCreateNestedManyWithoutUser_pointsInput
  }

  export type user_pointsCreateOrConnectWithoutUserInput = {
    where: user_pointsWhereUniqueInput
    create: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput>
  }

  export type user_pointsCreateManyUserInputEnvelope = {
    data: user_pointsCreateManyUserInput | user_pointsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type points_redemptionCreateWithoutUserInput = {
    total_points: number
    redeemed_at: Date | string
    points_redemption_items?: points_redemption_itemsCreateNestedManyWithoutPoints_redemptionInput
  }

  export type points_redemptionUncheckedCreateWithoutUserInput = {
    id?: number
    total_points: number
    redeemed_at: Date | string
    points_redemption_items?: points_redemption_itemsUncheckedCreateNestedManyWithoutPoints_redemptionInput
  }

  export type points_redemptionCreateOrConnectWithoutUserInput = {
    where: points_redemptionWhereUniqueInput
    create: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput>
  }

  export type points_redemptionCreateManyUserInputEnvelope = {
    data: points_redemptionCreateManyUserInput | points_redemptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type organizer_reviewsCreateWithoutUserInput = {
    rating: number
    review: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutOrganizer_reviewsInput
    event: event_tableCreateNestedOneWithoutOrganizer_reviewsInput
  }

  export type organizer_reviewsUncheckedCreateWithoutUserInput = {
    id?: number
    organizer_id: number
    event_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type organizer_reviewsCreateOrConnectWithoutUserInput = {
    where: organizer_reviewsWhereUniqueInput
    create: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput>
  }

  export type organizer_reviewsCreateManyUserInputEnvelope = {
    data: organizer_reviewsCreateManyUserInput | organizer_reviewsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ticket_holdsCreateWithoutUserInput = {
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
    event: event_tableCreateNestedOneWithoutTicket_holdsInput
    ticket_type: ticket_typeCreateNestedOneWithoutTicket_holdsInput
    transactions: transactions_tableCreateNestedOneWithoutTicketInput
  }

  export type ticket_holdsUncheckedCreateWithoutUserInput = {
    id?: number
    event_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsCreateOrConnectWithoutUserInput = {
    where: ticket_holdsWhereUniqueInput
    create: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput>
  }

  export type ticket_holdsCreateManyUserInputEnvelope = {
    data: ticket_holdsCreateManyUserInput | ticket_holdsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type event_attendeesCreateWithoutUserInput = {
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
    event: event_tableCreateNestedOneWithoutEvent_attendeesInput
    organizer: organizer_accountCreateNestedOneWithoutEvent_attendeesInput
  }

  export type event_attendeesUncheckedCreateWithoutUserInput = {
    id?: number
    event_id: number
    organizer_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type event_attendeesCreateOrConnectWithoutUserInput = {
    where: event_attendeesWhereUniqueInput
    create: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput>
  }

  export type event_attendeesCreateManyUserInputEnvelope = {
    data: event_attendeesCreateManyUserInput | event_attendeesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type transactions_tableCreateWithoutUserInput = {
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    event: event_tableCreateNestedOneWithoutTransactionsInput
    ticket?: ticket_holdsCreateNestedManyWithoutTransactionsInput
    voucher?: voucher_tableCreateNestedOneWithoutTransactions_tableInput
  }

  export type transactions_tableUncheckedCreateWithoutUserInput = {
    id?: number
    event_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    ticket?: ticket_holdsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactions_tableCreateOrConnectWithoutUserInput = {
    where: transactions_tableWhereUniqueInput
    create: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput>
  }

  export type transactions_tableCreateManyUserInputEnvelope = {
    data: transactions_tableCreateManyUserInput | transactions_tableCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_couponCreateWithoutUserInput = {
    used_at?: Date | string | null
    coupon: coupon_tableCreateNestedOneWithoutUser_couponInput
  }

  export type user_couponUncheckedCreateWithoutUserInput = {
    id?: number
    coupon_id: number
    used_at?: Date | string | null
  }

  export type user_couponCreateOrConnectWithoutUserInput = {
    where: user_couponWhereUniqueInput
    create: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput>
  }

  export type user_couponCreateManyUserInputEnvelope = {
    data: user_couponCreateManyUserInput | user_couponCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_profileUpsertWithoutUserInput = {
    update: XOR<user_profileUpdateWithoutUserInput, user_profileUncheckedUpdateWithoutUserInput>
    create: XOR<user_profileCreateWithoutUserInput, user_profileUncheckedCreateWithoutUserInput>
    where?: user_profileWhereInput
  }

  export type user_profileUpdateToOneWithWhereWithoutUserInput = {
    where?: user_profileWhereInput
    data: XOR<user_profileUpdateWithoutUserInput, user_profileUncheckedUpdateWithoutUserInput>
  }

  export type user_profileUpdateWithoutUserInput = {
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type user_profileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_fullname?: StringFieldUpdateOperationsInput | string
    user_date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user_phone?: IntFieldUpdateOperationsInput | number
    user_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type user_pointsUpsertWithWhereUniqueWithoutUserInput = {
    where: user_pointsWhereUniqueInput
    update: XOR<user_pointsUpdateWithoutUserInput, user_pointsUncheckedUpdateWithoutUserInput>
    create: XOR<user_pointsCreateWithoutUserInput, user_pointsUncheckedCreateWithoutUserInput>
  }

  export type user_pointsUpdateWithWhereUniqueWithoutUserInput = {
    where: user_pointsWhereUniqueInput
    data: XOR<user_pointsUpdateWithoutUserInput, user_pointsUncheckedUpdateWithoutUserInput>
  }

  export type user_pointsUpdateManyWithWhereWithoutUserInput = {
    where: user_pointsScalarWhereInput
    data: XOR<user_pointsUpdateManyMutationInput, user_pointsUncheckedUpdateManyWithoutUserInput>
  }

  export type user_pointsScalarWhereInput = {
    AND?: user_pointsScalarWhereInput | user_pointsScalarWhereInput[]
    OR?: user_pointsScalarWhereInput[]
    NOT?: user_pointsScalarWhereInput | user_pointsScalarWhereInput[]
    id?: IntFilter<"user_points"> | number
    points?: IntFilter<"user_points"> | number
    points_source_type?: StringFilter<"user_points"> | string
    points_source_id?: IntFilter<"user_points"> | number
    earned_at?: DateTimeFilter<"user_points"> | Date | string
    expires_at?: DateTimeFilter<"user_points"> | Date | string
    points_remaining?: IntFilter<"user_points"> | number
    user_id?: IntFilter<"user_points"> | number
  }

  export type points_redemptionUpsertWithWhereUniqueWithoutUserInput = {
    where: points_redemptionWhereUniqueInput
    update: XOR<points_redemptionUpdateWithoutUserInput, points_redemptionUncheckedUpdateWithoutUserInput>
    create: XOR<points_redemptionCreateWithoutUserInput, points_redemptionUncheckedCreateWithoutUserInput>
  }

  export type points_redemptionUpdateWithWhereUniqueWithoutUserInput = {
    where: points_redemptionWhereUniqueInput
    data: XOR<points_redemptionUpdateWithoutUserInput, points_redemptionUncheckedUpdateWithoutUserInput>
  }

  export type points_redemptionUpdateManyWithWhereWithoutUserInput = {
    where: points_redemptionScalarWhereInput
    data: XOR<points_redemptionUpdateManyMutationInput, points_redemptionUncheckedUpdateManyWithoutUserInput>
  }

  export type points_redemptionScalarWhereInput = {
    AND?: points_redemptionScalarWhereInput | points_redemptionScalarWhereInput[]
    OR?: points_redemptionScalarWhereInput[]
    NOT?: points_redemptionScalarWhereInput | points_redemptionScalarWhereInput[]
    id?: IntFilter<"points_redemption"> | number
    user_id?: IntFilter<"points_redemption"> | number
    total_points?: IntFilter<"points_redemption"> | number
    redeemed_at?: DateTimeFilter<"points_redemption"> | Date | string
  }

  export type organizer_reviewsUpsertWithWhereUniqueWithoutUserInput = {
    where: organizer_reviewsWhereUniqueInput
    update: XOR<organizer_reviewsUpdateWithoutUserInput, organizer_reviewsUncheckedUpdateWithoutUserInput>
    create: XOR<organizer_reviewsCreateWithoutUserInput, organizer_reviewsUncheckedCreateWithoutUserInput>
  }

  export type organizer_reviewsUpdateWithWhereUniqueWithoutUserInput = {
    where: organizer_reviewsWhereUniqueInput
    data: XOR<organizer_reviewsUpdateWithoutUserInput, organizer_reviewsUncheckedUpdateWithoutUserInput>
  }

  export type organizer_reviewsUpdateManyWithWhereWithoutUserInput = {
    where: organizer_reviewsScalarWhereInput
    data: XOR<organizer_reviewsUpdateManyMutationInput, organizer_reviewsUncheckedUpdateManyWithoutUserInput>
  }

  export type organizer_reviewsScalarWhereInput = {
    AND?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
    OR?: organizer_reviewsScalarWhereInput[]
    NOT?: organizer_reviewsScalarWhereInput | organizer_reviewsScalarWhereInput[]
    id?: IntFilter<"organizer_reviews"> | number
    organizer_id?: IntFilter<"organizer_reviews"> | number
    event_id?: IntFilter<"organizer_reviews"> | number
    user_id?: IntFilter<"organizer_reviews"> | number
    rating?: IntFilter<"organizer_reviews"> | number
    review?: StringFilter<"organizer_reviews"> | string
    created_at?: DateTimeFilter<"organizer_reviews"> | Date | string
  }

  export type ticket_holdsUpsertWithWhereUniqueWithoutUserInput = {
    where: ticket_holdsWhereUniqueInput
    update: XOR<ticket_holdsUpdateWithoutUserInput, ticket_holdsUncheckedUpdateWithoutUserInput>
    create: XOR<ticket_holdsCreateWithoutUserInput, ticket_holdsUncheckedCreateWithoutUserInput>
  }

  export type ticket_holdsUpdateWithWhereUniqueWithoutUserInput = {
    where: ticket_holdsWhereUniqueInput
    data: XOR<ticket_holdsUpdateWithoutUserInput, ticket_holdsUncheckedUpdateWithoutUserInput>
  }

  export type ticket_holdsUpdateManyWithWhereWithoutUserInput = {
    where: ticket_holdsScalarWhereInput
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyWithoutUserInput>
  }

  export type ticket_holdsScalarWhereInput = {
    AND?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
    OR?: ticket_holdsScalarWhereInput[]
    NOT?: ticket_holdsScalarWhereInput | ticket_holdsScalarWhereInput[]
    id?: IntFilter<"ticket_holds"> | number
    event_id?: IntFilter<"ticket_holds"> | number
    user_id?: IntFilter<"ticket_holds"> | number
    ticket_type_id?: IntFilter<"ticket_holds"> | number
    ticket_quantity?: IntFilter<"ticket_holds"> | number
    held_at?: DateTimeFilter<"ticket_holds"> | Date | string
    expires_at?: DateTimeFilter<"ticket_holds"> | Date | string
    transactions_id?: IntFilter<"ticket_holds"> | number
    status?: Enumcoupon_statusFilter<"ticket_holds"> | $Enums.coupon_status
  }

  export type event_attendeesUpsertWithWhereUniqueWithoutUserInput = {
    where: event_attendeesWhereUniqueInput
    update: XOR<event_attendeesUpdateWithoutUserInput, event_attendeesUncheckedUpdateWithoutUserInput>
    create: XOR<event_attendeesCreateWithoutUserInput, event_attendeesUncheckedCreateWithoutUserInput>
  }

  export type event_attendeesUpdateWithWhereUniqueWithoutUserInput = {
    where: event_attendeesWhereUniqueInput
    data: XOR<event_attendeesUpdateWithoutUserInput, event_attendeesUncheckedUpdateWithoutUserInput>
  }

  export type event_attendeesUpdateManyWithWhereWithoutUserInput = {
    where: event_attendeesScalarWhereInput
    data: XOR<event_attendeesUpdateManyMutationInput, event_attendeesUncheckedUpdateManyWithoutUserInput>
  }

  export type event_attendeesScalarWhereInput = {
    AND?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
    OR?: event_attendeesScalarWhereInput[]
    NOT?: event_attendeesScalarWhereInput | event_attendeesScalarWhereInput[]
    id?: IntFilter<"event_attendees"> | number
    event_id?: IntFilter<"event_attendees"> | number
    organizer_id?: IntFilter<"event_attendees"> | number
    user_id?: IntFilter<"event_attendees"> | number
    ticket_quantity?: IntFilter<"event_attendees"> | number
    total_price_paid?: IntFilter<"event_attendees"> | number
    status?: Enumevent_statusFilter<"event_attendees"> | $Enums.event_status
  }

  export type transactions_tableUpsertWithWhereUniqueWithoutUserInput = {
    where: transactions_tableWhereUniqueInput
    update: XOR<transactions_tableUpdateWithoutUserInput, transactions_tableUncheckedUpdateWithoutUserInput>
    create: XOR<transactions_tableCreateWithoutUserInput, transactions_tableUncheckedCreateWithoutUserInput>
  }

  export type transactions_tableUpdateWithWhereUniqueWithoutUserInput = {
    where: transactions_tableWhereUniqueInput
    data: XOR<transactions_tableUpdateWithoutUserInput, transactions_tableUncheckedUpdateWithoutUserInput>
  }

  export type transactions_tableUpdateManyWithWhereWithoutUserInput = {
    where: transactions_tableScalarWhereInput
    data: XOR<transactions_tableUpdateManyMutationInput, transactions_tableUncheckedUpdateManyWithoutUserInput>
  }

  export type transactions_tableScalarWhereInput = {
    AND?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
    OR?: transactions_tableScalarWhereInput[]
    NOT?: transactions_tableScalarWhereInput | transactions_tableScalarWhereInput[]
    id?: IntFilter<"transactions_table"> | number
    user_id?: IntFilter<"transactions_table"> | number
    event_id?: IntFilter<"transactions_table"> | number
    voucher_id?: IntNullableFilter<"transactions_table"> | number | null
    created_at?: DateTimeFilter<"transactions_table"> | Date | string
    status?: Enumtransactions_statusFilter<"transactions_table"> | $Enums.transactions_status
    payment_proof_url?: StringFilter<"transactions_table"> | string
  }

  export type user_couponUpsertWithWhereUniqueWithoutUserInput = {
    where: user_couponWhereUniqueInput
    update: XOR<user_couponUpdateWithoutUserInput, user_couponUncheckedUpdateWithoutUserInput>
    create: XOR<user_couponCreateWithoutUserInput, user_couponUncheckedCreateWithoutUserInput>
  }

  export type user_couponUpdateWithWhereUniqueWithoutUserInput = {
    where: user_couponWhereUniqueInput
    data: XOR<user_couponUpdateWithoutUserInput, user_couponUncheckedUpdateWithoutUserInput>
  }

  export type user_couponUpdateManyWithWhereWithoutUserInput = {
    where: user_couponScalarWhereInput
    data: XOR<user_couponUpdateManyMutationInput, user_couponUncheckedUpdateManyWithoutUserInput>
  }

  export type user_couponScalarWhereInput = {
    AND?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
    OR?: user_couponScalarWhereInput[]
    NOT?: user_couponScalarWhereInput | user_couponScalarWhereInput[]
    id?: IntFilter<"user_coupon"> | number
    user_id?: IntFilter<"user_coupon"> | number
    coupon_id?: IntFilter<"user_coupon"> | number
    used_at?: DateTimeNullableFilter<"user_coupon"> | Date | string | null
  }

  export type user_accountCreateWithoutUser_profileInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutUser_profileInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutUser_profileInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutUser_profileInput, user_accountUncheckedCreateWithoutUser_profileInput>
  }

  export type user_accountUpsertWithoutUser_profileInput = {
    update: XOR<user_accountUpdateWithoutUser_profileInput, user_accountUncheckedUpdateWithoutUser_profileInput>
    create: XOR<user_accountCreateWithoutUser_profileInput, user_accountUncheckedCreateWithoutUser_profileInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutUser_profileInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutUser_profileInput, user_accountUncheckedUpdateWithoutUser_profileInput>
  }

  export type user_accountUpdateWithoutUser_profileInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutUser_profileInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_accountCreateWithoutUser_pointsInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutUser_pointsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutUser_pointsInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutUser_pointsInput, user_accountUncheckedCreateWithoutUser_pointsInput>
  }

  export type points_redemption_itemsCreateWithoutUser_pointsInput = {
    points_redemption: points_redemptionCreateNestedOneWithoutPoints_redemption_itemsInput
  }

  export type points_redemption_itemsUncheckedCreateWithoutUser_pointsInput = {
    id?: number
    redemption_id: number
  }

  export type points_redemption_itemsCreateOrConnectWithoutUser_pointsInput = {
    where: points_redemption_itemsWhereUniqueInput
    create: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput>
  }

  export type points_redemption_itemsCreateManyUser_pointsInputEnvelope = {
    data: points_redemption_itemsCreateManyUser_pointsInput | points_redemption_itemsCreateManyUser_pointsInput[]
    skipDuplicates?: boolean
  }

  export type user_accountUpsertWithoutUser_pointsInput = {
    update: XOR<user_accountUpdateWithoutUser_pointsInput, user_accountUncheckedUpdateWithoutUser_pointsInput>
    create: XOR<user_accountCreateWithoutUser_pointsInput, user_accountUncheckedCreateWithoutUser_pointsInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutUser_pointsInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutUser_pointsInput, user_accountUncheckedUpdateWithoutUser_pointsInput>
  }

  export type user_accountUpdateWithoutUser_pointsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutUser_pointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type points_redemption_itemsUpsertWithWhereUniqueWithoutUser_pointsInput = {
    where: points_redemption_itemsWhereUniqueInput
    update: XOR<points_redemption_itemsUpdateWithoutUser_pointsInput, points_redemption_itemsUncheckedUpdateWithoutUser_pointsInput>
    create: XOR<points_redemption_itemsCreateWithoutUser_pointsInput, points_redemption_itemsUncheckedCreateWithoutUser_pointsInput>
  }

  export type points_redemption_itemsUpdateWithWhereUniqueWithoutUser_pointsInput = {
    where: points_redemption_itemsWhereUniqueInput
    data: XOR<points_redemption_itemsUpdateWithoutUser_pointsInput, points_redemption_itemsUncheckedUpdateWithoutUser_pointsInput>
  }

  export type points_redemption_itemsUpdateManyWithWhereWithoutUser_pointsInput = {
    where: points_redemption_itemsScalarWhereInput
    data: XOR<points_redemption_itemsUpdateManyMutationInput, points_redemption_itemsUncheckedUpdateManyWithoutUser_pointsInput>
  }

  export type points_redemption_itemsScalarWhereInput = {
    AND?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
    OR?: points_redemption_itemsScalarWhereInput[]
    NOT?: points_redemption_itemsScalarWhereInput | points_redemption_itemsScalarWhereInput[]
    id?: IntFilter<"points_redemption_items"> | number
    user_point_id?: IntFilter<"points_redemption_items"> | number
    redemption_id?: IntFilter<"points_redemption_items"> | number
  }

  export type user_accountCreateWithoutPoints_redemptionInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutPoints_redemptionInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutPoints_redemptionInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutPoints_redemptionInput, user_accountUncheckedCreateWithoutPoints_redemptionInput>
  }

  export type points_redemption_itemsCreateWithoutPoints_redemptionInput = {
    user_points: user_pointsCreateNestedOneWithoutPoints_redemption_itemsInput
  }

  export type points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput = {
    id?: number
    user_point_id: number
  }

  export type points_redemption_itemsCreateOrConnectWithoutPoints_redemptionInput = {
    where: points_redemption_itemsWhereUniqueInput
    create: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput>
  }

  export type points_redemption_itemsCreateManyPoints_redemptionInputEnvelope = {
    data: points_redemption_itemsCreateManyPoints_redemptionInput | points_redemption_itemsCreateManyPoints_redemptionInput[]
    skipDuplicates?: boolean
  }

  export type user_accountUpsertWithoutPoints_redemptionInput = {
    update: XOR<user_accountUpdateWithoutPoints_redemptionInput, user_accountUncheckedUpdateWithoutPoints_redemptionInput>
    create: XOR<user_accountCreateWithoutPoints_redemptionInput, user_accountUncheckedCreateWithoutPoints_redemptionInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutPoints_redemptionInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutPoints_redemptionInput, user_accountUncheckedUpdateWithoutPoints_redemptionInput>
  }

  export type user_accountUpdateWithoutPoints_redemptionInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutPoints_redemptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type points_redemption_itemsUpsertWithWhereUniqueWithoutPoints_redemptionInput = {
    where: points_redemption_itemsWhereUniqueInput
    update: XOR<points_redemption_itemsUpdateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedUpdateWithoutPoints_redemptionInput>
    create: XOR<points_redemption_itemsCreateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedCreateWithoutPoints_redemptionInput>
  }

  export type points_redemption_itemsUpdateWithWhereUniqueWithoutPoints_redemptionInput = {
    where: points_redemption_itemsWhereUniqueInput
    data: XOR<points_redemption_itemsUpdateWithoutPoints_redemptionInput, points_redemption_itemsUncheckedUpdateWithoutPoints_redemptionInput>
  }

  export type points_redemption_itemsUpdateManyWithWhereWithoutPoints_redemptionInput = {
    where: points_redemption_itemsScalarWhereInput
    data: XOR<points_redemption_itemsUpdateManyMutationInput, points_redemption_itemsUncheckedUpdateManyWithoutPoints_redemptionInput>
  }

  export type user_pointsCreateWithoutPoints_redemption_itemsInput = {
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    user: user_accountCreateNestedOneWithoutUser_pointsInput
  }

  export type user_pointsUncheckedCreateWithoutPoints_redemption_itemsInput = {
    id?: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
    user_id: number
  }

  export type user_pointsCreateOrConnectWithoutPoints_redemption_itemsInput = {
    where: user_pointsWhereUniqueInput
    create: XOR<user_pointsCreateWithoutPoints_redemption_itemsInput, user_pointsUncheckedCreateWithoutPoints_redemption_itemsInput>
  }

  export type points_redemptionCreateWithoutPoints_redemption_itemsInput = {
    total_points: number
    redeemed_at: Date | string
    user: user_accountCreateNestedOneWithoutPoints_redemptionInput
  }

  export type points_redemptionUncheckedCreateWithoutPoints_redemption_itemsInput = {
    id?: number
    user_id: number
    total_points: number
    redeemed_at: Date | string
  }

  export type points_redemptionCreateOrConnectWithoutPoints_redemption_itemsInput = {
    where: points_redemptionWhereUniqueInput
    create: XOR<points_redemptionCreateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedCreateWithoutPoints_redemption_itemsInput>
  }

  export type user_pointsUpsertWithoutPoints_redemption_itemsInput = {
    update: XOR<user_pointsUpdateWithoutPoints_redemption_itemsInput, user_pointsUncheckedUpdateWithoutPoints_redemption_itemsInput>
    create: XOR<user_pointsCreateWithoutPoints_redemption_itemsInput, user_pointsUncheckedCreateWithoutPoints_redemption_itemsInput>
    where?: user_pointsWhereInput
  }

  export type user_pointsUpdateToOneWithWhereWithoutPoints_redemption_itemsInput = {
    where?: user_pointsWhereInput
    data: XOR<user_pointsUpdateWithoutPoints_redemption_itemsInput, user_pointsUncheckedUpdateWithoutPoints_redemption_itemsInput>
  }

  export type user_pointsUpdateWithoutPoints_redemption_itemsInput = {
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    user?: user_accountUpdateOneRequiredWithoutUser_pointsNestedInput
  }

  export type user_pointsUncheckedUpdateWithoutPoints_redemption_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemptionUpsertWithoutPoints_redemption_itemsInput = {
    update: XOR<points_redemptionUpdateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedUpdateWithoutPoints_redemption_itemsInput>
    create: XOR<points_redemptionCreateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedCreateWithoutPoints_redemption_itemsInput>
    where?: points_redemptionWhereInput
  }

  export type points_redemptionUpdateToOneWithWhereWithoutPoints_redemption_itemsInput = {
    where?: points_redemptionWhereInput
    data: XOR<points_redemptionUpdateWithoutPoints_redemption_itemsInput, points_redemptionUncheckedUpdateWithoutPoints_redemption_itemsInput>
  }

  export type points_redemptionUpdateWithoutPoints_redemption_itemsInput = {
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: user_accountUpdateOneRequiredWithoutPoints_redemptionNestedInput
  }

  export type points_redemptionUncheckedUpdateWithoutPoints_redemption_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_couponCreateWithoutCouponInput = {
    used_at?: Date | string | null
    user: user_accountCreateNestedOneWithoutUser_couponInput
  }

  export type user_couponUncheckedCreateWithoutCouponInput = {
    id?: number
    user_id: number
    used_at?: Date | string | null
  }

  export type user_couponCreateOrConnectWithoutCouponInput = {
    where: user_couponWhereUniqueInput
    create: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput>
  }

  export type user_couponCreateManyCouponInputEnvelope = {
    data: user_couponCreateManyCouponInput | user_couponCreateManyCouponInput[]
    skipDuplicates?: boolean
  }

  export type user_couponUpsertWithWhereUniqueWithoutCouponInput = {
    where: user_couponWhereUniqueInput
    update: XOR<user_couponUpdateWithoutCouponInput, user_couponUncheckedUpdateWithoutCouponInput>
    create: XOR<user_couponCreateWithoutCouponInput, user_couponUncheckedCreateWithoutCouponInput>
  }

  export type user_couponUpdateWithWhereUniqueWithoutCouponInput = {
    where: user_couponWhereUniqueInput
    data: XOR<user_couponUpdateWithoutCouponInput, user_couponUncheckedUpdateWithoutCouponInput>
  }

  export type user_couponUpdateManyWithWhereWithoutCouponInput = {
    where: user_couponScalarWhereInput
    data: XOR<user_couponUpdateManyMutationInput, user_couponUncheckedUpdateManyWithoutCouponInput>
  }

  export type user_accountCreateWithoutUser_couponInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutUser_couponInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutUser_couponInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutUser_couponInput, user_accountUncheckedCreateWithoutUser_couponInput>
  }

  export type coupon_tableCreateWithoutUser_couponInput = {
    event_id?: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at?: Date | string
    expires_at: Date | string
    used_at?: Date | string | null
    usage_limit: number
    used_count?: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
  }

  export type coupon_tableUncheckedCreateWithoutUser_couponInput = {
    id?: number
    event_id?: number | null
    code: string
    discount_type: $Enums.discount_type
    discount_value: number
    created_at?: Date | string
    expires_at: Date | string
    used_at?: Date | string | null
    usage_limit: number
    used_count?: number
    status: $Enums.coupon_status
    issued_by: $Enums.issuer
  }

  export type coupon_tableCreateOrConnectWithoutUser_couponInput = {
    where: coupon_tableWhereUniqueInput
    create: XOR<coupon_tableCreateWithoutUser_couponInput, coupon_tableUncheckedCreateWithoutUser_couponInput>
  }

  export type user_accountUpsertWithoutUser_couponInput = {
    update: XOR<user_accountUpdateWithoutUser_couponInput, user_accountUncheckedUpdateWithoutUser_couponInput>
    create: XOR<user_accountCreateWithoutUser_couponInput, user_accountUncheckedCreateWithoutUser_couponInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutUser_couponInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutUser_couponInput, user_accountUncheckedUpdateWithoutUser_couponInput>
  }

  export type user_accountUpdateWithoutUser_couponInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutUser_couponInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
  }

  export type coupon_tableUpsertWithoutUser_couponInput = {
    update: XOR<coupon_tableUpdateWithoutUser_couponInput, coupon_tableUncheckedUpdateWithoutUser_couponInput>
    create: XOR<coupon_tableCreateWithoutUser_couponInput, coupon_tableUncheckedCreateWithoutUser_couponInput>
    where?: coupon_tableWhereInput
  }

  export type coupon_tableUpdateToOneWithWhereWithoutUser_couponInput = {
    where?: coupon_tableWhereInput
    data: XOR<coupon_tableUpdateWithoutUser_couponInput, coupon_tableUncheckedUpdateWithoutUser_couponInput>
  }

  export type coupon_tableUpdateWithoutUser_couponInput = {
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
  }

  export type coupon_tableUncheckedUpdateWithoutUser_couponInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: NullableIntFieldUpdateOperationsInput | number | null
    code?: StringFieldUpdateOperationsInput | string
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    used_count?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    issued_by?: EnumissuerFieldUpdateOperationsInput | $Enums.issuer
  }

  export type organizer_profileCreateWithoutOrganizerInput = {
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
  }

  export type organizer_profileUncheckedCreateWithoutOrganizerInput = {
    id?: number
    organizer_name: string
    organizer_address: string
    organizer_phone: number
    organizer_profile_image: string
  }

  export type organizer_profileCreateOrConnectWithoutOrganizerInput = {
    where: organizer_profileWhereUniqueInput
    create: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
  }

  export type organizer_reviewsCreateWithoutOrganizerInput = {
    rating: number
    review: string
    created_at?: Date | string
    event: event_tableCreateNestedOneWithoutOrganizer_reviewsInput
    user: user_accountCreateNestedOneWithoutOrganizer_reviewsInput
  }

  export type organizer_reviewsUncheckedCreateWithoutOrganizerInput = {
    id?: number
    event_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type organizer_reviewsCreateOrConnectWithoutOrganizerInput = {
    where: organizer_reviewsWhereUniqueInput
    create: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput>
  }

  export type organizer_reviewsCreateManyOrganizerInputEnvelope = {
    data: organizer_reviewsCreateManyOrganizerInput | organizer_reviewsCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type event_tableCreateWithoutOrganizerInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutOrganizerInput = {
    id?: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutOrganizerInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput>
  }

  export type event_tableCreateManyOrganizerInputEnvelope = {
    data: event_tableCreateManyOrganizerInput | event_tableCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type event_attendeesCreateWithoutOrganizerInput = {
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
    event: event_tableCreateNestedOneWithoutEvent_attendeesInput
    user: user_accountCreateNestedOneWithoutEvent_attendeesInput
  }

  export type event_attendeesUncheckedCreateWithoutOrganizerInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type event_attendeesCreateOrConnectWithoutOrganizerInput = {
    where: event_attendeesWhereUniqueInput
    create: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput>
  }

  export type event_attendeesCreateManyOrganizerInputEnvelope = {
    data: event_attendeesCreateManyOrganizerInput | event_attendeesCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type voucher_tableCreateWithoutOrganizerInput = {
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    event: event_tableCreateNestedOneWithoutVoucherInput
    transactions_table?: transactions_tableCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableUncheckedCreateWithoutOrganizerInput = {
    id?: number
    event_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    transactions_table?: transactions_tableUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableCreateOrConnectWithoutOrganizerInput = {
    where: voucher_tableWhereUniqueInput
    create: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput>
  }

  export type voucher_tableCreateManyOrganizerInputEnvelope = {
    data: voucher_tableCreateManyOrganizerInput | voucher_tableCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type organizer_profileUpsertWithoutOrganizerInput = {
    update: XOR<organizer_profileUpdateWithoutOrganizerInput, organizer_profileUncheckedUpdateWithoutOrganizerInput>
    create: XOR<organizer_profileCreateWithoutOrganizerInput, organizer_profileUncheckedCreateWithoutOrganizerInput>
    where?: organizer_profileWhereInput
  }

  export type organizer_profileUpdateToOneWithWhereWithoutOrganizerInput = {
    where?: organizer_profileWhereInput
    data: XOR<organizer_profileUpdateWithoutOrganizerInput, organizer_profileUncheckedUpdateWithoutOrganizerInput>
  }

  export type organizer_profileUpdateWithoutOrganizerInput = {
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type organizer_profileUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_address?: StringFieldUpdateOperationsInput | string
    organizer_phone?: IntFieldUpdateOperationsInput | number
    organizer_profile_image?: StringFieldUpdateOperationsInput | string
  }

  export type organizer_reviewsUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: organizer_reviewsWhereUniqueInput
    update: XOR<organizer_reviewsUpdateWithoutOrganizerInput, organizer_reviewsUncheckedUpdateWithoutOrganizerInput>
    create: XOR<organizer_reviewsCreateWithoutOrganizerInput, organizer_reviewsUncheckedCreateWithoutOrganizerInput>
  }

  export type organizer_reviewsUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: organizer_reviewsWhereUniqueInput
    data: XOR<organizer_reviewsUpdateWithoutOrganizerInput, organizer_reviewsUncheckedUpdateWithoutOrganizerInput>
  }

  export type organizer_reviewsUpdateManyWithWhereWithoutOrganizerInput = {
    where: organizer_reviewsScalarWhereInput
    data: XOR<organizer_reviewsUpdateManyMutationInput, organizer_reviewsUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type event_tableUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: event_tableWhereUniqueInput
    update: XOR<event_tableUpdateWithoutOrganizerInput, event_tableUncheckedUpdateWithoutOrganizerInput>
    create: XOR<event_tableCreateWithoutOrganizerInput, event_tableUncheckedCreateWithoutOrganizerInput>
  }

  export type event_tableUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: event_tableWhereUniqueInput
    data: XOR<event_tableUpdateWithoutOrganizerInput, event_tableUncheckedUpdateWithoutOrganizerInput>
  }

  export type event_tableUpdateManyWithWhereWithoutOrganizerInput = {
    where: event_tableScalarWhereInput
    data: XOR<event_tableUpdateManyMutationInput, event_tableUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type event_tableScalarWhereInput = {
    AND?: event_tableScalarWhereInput | event_tableScalarWhereInput[]
    OR?: event_tableScalarWhereInput[]
    NOT?: event_tableScalarWhereInput | event_tableScalarWhereInput[]
    id?: IntFilter<"event_table"> | number
    organizer_id?: IntFilter<"event_table"> | number
    name?: StringFilter<"event_table"> | string
    price?: IntFilter<"event_table"> | number
    start_date?: DateTimeFilter<"event_table"> | Date | string
    end_date?: DateTimeFilter<"event_table"> | Date | string
    seat_capacity?: IntFilter<"event_table"> | number
    event_type?: StringFilter<"event_table"> | string
    created_at?: DateTimeFilter<"event_table"> | Date | string
  }

  export type event_attendeesUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: event_attendeesWhereUniqueInput
    update: XOR<event_attendeesUpdateWithoutOrganizerInput, event_attendeesUncheckedUpdateWithoutOrganizerInput>
    create: XOR<event_attendeesCreateWithoutOrganizerInput, event_attendeesUncheckedCreateWithoutOrganizerInput>
  }

  export type event_attendeesUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: event_attendeesWhereUniqueInput
    data: XOR<event_attendeesUpdateWithoutOrganizerInput, event_attendeesUncheckedUpdateWithoutOrganizerInput>
  }

  export type event_attendeesUpdateManyWithWhereWithoutOrganizerInput = {
    where: event_attendeesScalarWhereInput
    data: XOR<event_attendeesUpdateManyMutationInput, event_attendeesUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type voucher_tableUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: voucher_tableWhereUniqueInput
    update: XOR<voucher_tableUpdateWithoutOrganizerInput, voucher_tableUncheckedUpdateWithoutOrganizerInput>
    create: XOR<voucher_tableCreateWithoutOrganizerInput, voucher_tableUncheckedCreateWithoutOrganizerInput>
  }

  export type voucher_tableUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: voucher_tableWhereUniqueInput
    data: XOR<voucher_tableUpdateWithoutOrganizerInput, voucher_tableUncheckedUpdateWithoutOrganizerInput>
  }

  export type voucher_tableUpdateManyWithWhereWithoutOrganizerInput = {
    where: voucher_tableScalarWhereInput
    data: XOR<voucher_tableUpdateManyMutationInput, voucher_tableUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type voucher_tableScalarWhereInput = {
    AND?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
    OR?: voucher_tableScalarWhereInput[]
    NOT?: voucher_tableScalarWhereInput | voucher_tableScalarWhereInput[]
    id?: IntFilter<"voucher_table"> | number
    organizer_id?: IntFilter<"voucher_table"> | number
    event_id?: IntFilter<"voucher_table"> | number
    start_at?: DateTimeFilter<"voucher_table"> | Date | string
    expires_at?: DateTimeNullableFilter<"voucher_table"> | Date | string | null
    usage_limit?: IntFilter<"voucher_table"> | number
    discount_type?: Enumdiscount_typeFilter<"voucher_table"> | $Enums.discount_type
    discount_value?: IntFilter<"voucher_table"> | number
  }

  export type organizer_accountCreateWithoutOrganizer_profileInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateWithoutOrganizer_profileInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableUncheckedCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountCreateOrConnectWithoutOrganizer_profileInput = {
    where: organizer_accountWhereUniqueInput
    create: XOR<organizer_accountCreateWithoutOrganizer_profileInput, organizer_accountUncheckedCreateWithoutOrganizer_profileInput>
  }

  export type organizer_accountUpsertWithoutOrganizer_profileInput = {
    update: XOR<organizer_accountUpdateWithoutOrganizer_profileInput, organizer_accountUncheckedUpdateWithoutOrganizer_profileInput>
    create: XOR<organizer_accountCreateWithoutOrganizer_profileInput, organizer_accountUncheckedCreateWithoutOrganizer_profileInput>
    where?: organizer_accountWhereInput
  }

  export type organizer_accountUpdateToOneWithWhereWithoutOrganizer_profileInput = {
    where?: organizer_accountWhereInput
    data: XOR<organizer_accountUpdateWithoutOrganizer_profileInput, organizer_accountUncheckedUpdateWithoutOrganizer_profileInput>
  }

  export type organizer_accountUpdateWithoutOrganizer_profileInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_reviews?: organizer_reviewsUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateWithoutOrganizer_profileInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUncheckedUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountCreateWithoutOrganizer_reviewsInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileCreateNestedOneWithoutOrganizerInput
    event_table?: event_tableCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateWithoutOrganizer_reviewsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput
    event_table?: event_tableUncheckedCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountCreateOrConnectWithoutOrganizer_reviewsInput = {
    where: organizer_accountWhereUniqueInput
    create: XOR<organizer_accountCreateWithoutOrganizer_reviewsInput, organizer_accountUncheckedCreateWithoutOrganizer_reviewsInput>
  }

  export type event_tableCreateWithoutOrganizer_reviewsInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutOrganizer_reviewsInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutOrganizer_reviewsInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutOrganizer_reviewsInput, event_tableUncheckedCreateWithoutOrganizer_reviewsInput>
  }

  export type user_accountCreateWithoutOrganizer_reviewsInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutOrganizer_reviewsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutOrganizer_reviewsInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutOrganizer_reviewsInput, user_accountUncheckedCreateWithoutOrganizer_reviewsInput>
  }

  export type organizer_accountUpsertWithoutOrganizer_reviewsInput = {
    update: XOR<organizer_accountUpdateWithoutOrganizer_reviewsInput, organizer_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
    create: XOR<organizer_accountCreateWithoutOrganizer_reviewsInput, organizer_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    where?: organizer_accountWhereInput
  }

  export type organizer_accountUpdateToOneWithWhereWithoutOrganizer_reviewsInput = {
    where?: organizer_accountWhereInput
    data: XOR<organizer_accountUpdateWithoutOrganizer_reviewsInput, organizer_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type organizer_accountUpdateWithoutOrganizer_reviewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUpdateOneWithoutOrganizerNestedInput
    event_table?: event_tableUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateWithoutOrganizer_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput
    event_table?: event_tableUncheckedUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type event_tableUpsertWithoutOrganizer_reviewsInput = {
    update: XOR<event_tableUpdateWithoutOrganizer_reviewsInput, event_tableUncheckedUpdateWithoutOrganizer_reviewsInput>
    create: XOR<event_tableCreateWithoutOrganizer_reviewsInput, event_tableUncheckedCreateWithoutOrganizer_reviewsInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutOrganizer_reviewsInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutOrganizer_reviewsInput, event_tableUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type event_tableUpdateWithoutOrganizer_reviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutOrganizer_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type user_accountUpsertWithoutOrganizer_reviewsInput = {
    update: XOR<user_accountUpdateWithoutOrganizer_reviewsInput, user_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
    create: XOR<user_accountCreateWithoutOrganizer_reviewsInput, user_accountUncheckedCreateWithoutOrganizer_reviewsInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutOrganizer_reviewsInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutOrganizer_reviewsInput, user_accountUncheckedUpdateWithoutOrganizer_reviewsInput>
  }

  export type user_accountUpdateWithoutOrganizer_reviewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutOrganizer_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type organizer_accountCreateWithoutEvent_tableInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateWithoutEvent_tableInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountCreateOrConnectWithoutEvent_tableInput = {
    where: organizer_accountWhereUniqueInput
    create: XOR<organizer_accountCreateWithoutEvent_tableInput, organizer_accountUncheckedCreateWithoutEvent_tableInput>
  }

  export type organizer_reviewsCreateWithoutEventInput = {
    rating: number
    review: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutOrganizer_reviewsInput
    user: user_accountCreateNestedOneWithoutOrganizer_reviewsInput
  }

  export type organizer_reviewsUncheckedCreateWithoutEventInput = {
    id?: number
    organizer_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type organizer_reviewsCreateOrConnectWithoutEventInput = {
    where: organizer_reviewsWhereUniqueInput
    create: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput>
  }

  export type organizer_reviewsCreateManyEventInputEnvelope = {
    data: organizer_reviewsCreateManyEventInput | organizer_reviewsCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ticket_holdsCreateWithoutEventInput = {
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
    user: user_accountCreateNestedOneWithoutTicket_holdsInput
    ticket_type: ticket_typeCreateNestedOneWithoutTicket_holdsInput
    transactions: transactions_tableCreateNestedOneWithoutTicketInput
  }

  export type ticket_holdsUncheckedCreateWithoutEventInput = {
    id?: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsCreateOrConnectWithoutEventInput = {
    where: ticket_holdsWhereUniqueInput
    create: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput>
  }

  export type ticket_holdsCreateManyEventInputEnvelope = {
    data: ticket_holdsCreateManyEventInput | ticket_holdsCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type ticket_typeCreateWithoutEventInput = {
    type_name: string
    price: number
    quota: number
    ticket_holds?: ticket_holdsCreateNestedManyWithoutTicket_typeInput
  }

  export type ticket_typeUncheckedCreateWithoutEventInput = {
    id?: number
    type_name: string
    price: number
    quota: number
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutTicket_typeInput
  }

  export type ticket_typeCreateOrConnectWithoutEventInput = {
    where: ticket_typeWhereUniqueInput
    create: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput>
  }

  export type ticket_typeCreateManyEventInputEnvelope = {
    data: ticket_typeCreateManyEventInput | ticket_typeCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type event_attendeesCreateWithoutEventInput = {
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
    organizer: organizer_accountCreateNestedOneWithoutEvent_attendeesInput
    user: user_accountCreateNestedOneWithoutEvent_attendeesInput
  }

  export type event_attendeesUncheckedCreateWithoutEventInput = {
    id?: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type event_attendeesCreateOrConnectWithoutEventInput = {
    where: event_attendeesWhereUniqueInput
    create: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput>
  }

  export type event_attendeesCreateManyEventInputEnvelope = {
    data: event_attendeesCreateManyEventInput | event_attendeesCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type transactions_tableCreateWithoutEventInput = {
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    user: user_accountCreateNestedOneWithoutTransactionsInput
    ticket?: ticket_holdsCreateNestedManyWithoutTransactionsInput
    voucher?: voucher_tableCreateNestedOneWithoutTransactions_tableInput
  }

  export type transactions_tableUncheckedCreateWithoutEventInput = {
    id?: number
    user_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    ticket?: ticket_holdsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactions_tableCreateOrConnectWithoutEventInput = {
    where: transactions_tableWhereUniqueInput
    create: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput>
  }

  export type transactions_tableCreateManyEventInputEnvelope = {
    data: transactions_tableCreateManyEventInput | transactions_tableCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type voucher_tableCreateWithoutEventInput = {
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    organizer: organizer_accountCreateNestedOneWithoutVoucherInput
    transactions_table?: transactions_tableCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableUncheckedCreateWithoutEventInput = {
    id?: number
    organizer_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    transactions_table?: transactions_tableUncheckedCreateNestedManyWithoutVoucherInput
  }

  export type voucher_tableCreateOrConnectWithoutEventInput = {
    where: voucher_tableWhereUniqueInput
    create: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput>
  }

  export type voucher_tableCreateManyEventInputEnvelope = {
    data: voucher_tableCreateManyEventInput | voucher_tableCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type organizer_accountUpsertWithoutEvent_tableInput = {
    update: XOR<organizer_accountUpdateWithoutEvent_tableInput, organizer_accountUncheckedUpdateWithoutEvent_tableInput>
    create: XOR<organizer_accountCreateWithoutEvent_tableInput, organizer_accountUncheckedCreateWithoutEvent_tableInput>
    where?: organizer_accountWhereInput
  }

  export type organizer_accountUpdateToOneWithWhereWithoutEvent_tableInput = {
    where?: organizer_accountWhereInput
    data: XOR<organizer_accountUpdateWithoutEvent_tableInput, organizer_accountUncheckedUpdateWithoutEvent_tableInput>
  }

  export type organizer_accountUpdateWithoutEvent_tableInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateWithoutEvent_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_reviewsUpsertWithWhereUniqueWithoutEventInput = {
    where: organizer_reviewsWhereUniqueInput
    update: XOR<organizer_reviewsUpdateWithoutEventInput, organizer_reviewsUncheckedUpdateWithoutEventInput>
    create: XOR<organizer_reviewsCreateWithoutEventInput, organizer_reviewsUncheckedCreateWithoutEventInput>
  }

  export type organizer_reviewsUpdateWithWhereUniqueWithoutEventInput = {
    where: organizer_reviewsWhereUniqueInput
    data: XOR<organizer_reviewsUpdateWithoutEventInput, organizer_reviewsUncheckedUpdateWithoutEventInput>
  }

  export type organizer_reviewsUpdateManyWithWhereWithoutEventInput = {
    where: organizer_reviewsScalarWhereInput
    data: XOR<organizer_reviewsUpdateManyMutationInput, organizer_reviewsUncheckedUpdateManyWithoutEventInput>
  }

  export type ticket_holdsUpsertWithWhereUniqueWithoutEventInput = {
    where: ticket_holdsWhereUniqueInput
    update: XOR<ticket_holdsUpdateWithoutEventInput, ticket_holdsUncheckedUpdateWithoutEventInput>
    create: XOR<ticket_holdsCreateWithoutEventInput, ticket_holdsUncheckedCreateWithoutEventInput>
  }

  export type ticket_holdsUpdateWithWhereUniqueWithoutEventInput = {
    where: ticket_holdsWhereUniqueInput
    data: XOR<ticket_holdsUpdateWithoutEventInput, ticket_holdsUncheckedUpdateWithoutEventInput>
  }

  export type ticket_holdsUpdateManyWithWhereWithoutEventInput = {
    where: ticket_holdsScalarWhereInput
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyWithoutEventInput>
  }

  export type ticket_typeUpsertWithWhereUniqueWithoutEventInput = {
    where: ticket_typeWhereUniqueInput
    update: XOR<ticket_typeUpdateWithoutEventInput, ticket_typeUncheckedUpdateWithoutEventInput>
    create: XOR<ticket_typeCreateWithoutEventInput, ticket_typeUncheckedCreateWithoutEventInput>
  }

  export type ticket_typeUpdateWithWhereUniqueWithoutEventInput = {
    where: ticket_typeWhereUniqueInput
    data: XOR<ticket_typeUpdateWithoutEventInput, ticket_typeUncheckedUpdateWithoutEventInput>
  }

  export type ticket_typeUpdateManyWithWhereWithoutEventInput = {
    where: ticket_typeScalarWhereInput
    data: XOR<ticket_typeUpdateManyMutationInput, ticket_typeUncheckedUpdateManyWithoutEventInput>
  }

  export type ticket_typeScalarWhereInput = {
    AND?: ticket_typeScalarWhereInput | ticket_typeScalarWhereInput[]
    OR?: ticket_typeScalarWhereInput[]
    NOT?: ticket_typeScalarWhereInput | ticket_typeScalarWhereInput[]
    id?: IntFilter<"ticket_type"> | number
    event_id?: IntFilter<"ticket_type"> | number
    type_name?: StringFilter<"ticket_type"> | string
    price?: IntFilter<"ticket_type"> | number
    quota?: IntFilter<"ticket_type"> | number
  }

  export type event_attendeesUpsertWithWhereUniqueWithoutEventInput = {
    where: event_attendeesWhereUniqueInput
    update: XOR<event_attendeesUpdateWithoutEventInput, event_attendeesUncheckedUpdateWithoutEventInput>
    create: XOR<event_attendeesCreateWithoutEventInput, event_attendeesUncheckedCreateWithoutEventInput>
  }

  export type event_attendeesUpdateWithWhereUniqueWithoutEventInput = {
    where: event_attendeesWhereUniqueInput
    data: XOR<event_attendeesUpdateWithoutEventInput, event_attendeesUncheckedUpdateWithoutEventInput>
  }

  export type event_attendeesUpdateManyWithWhereWithoutEventInput = {
    where: event_attendeesScalarWhereInput
    data: XOR<event_attendeesUpdateManyMutationInput, event_attendeesUncheckedUpdateManyWithoutEventInput>
  }

  export type transactions_tableUpsertWithWhereUniqueWithoutEventInput = {
    where: transactions_tableWhereUniqueInput
    update: XOR<transactions_tableUpdateWithoutEventInput, transactions_tableUncheckedUpdateWithoutEventInput>
    create: XOR<transactions_tableCreateWithoutEventInput, transactions_tableUncheckedCreateWithoutEventInput>
  }

  export type transactions_tableUpdateWithWhereUniqueWithoutEventInput = {
    where: transactions_tableWhereUniqueInput
    data: XOR<transactions_tableUpdateWithoutEventInput, transactions_tableUncheckedUpdateWithoutEventInput>
  }

  export type transactions_tableUpdateManyWithWhereWithoutEventInput = {
    where: transactions_tableScalarWhereInput
    data: XOR<transactions_tableUpdateManyMutationInput, transactions_tableUncheckedUpdateManyWithoutEventInput>
  }

  export type voucher_tableUpsertWithWhereUniqueWithoutEventInput = {
    where: voucher_tableWhereUniqueInput
    update: XOR<voucher_tableUpdateWithoutEventInput, voucher_tableUncheckedUpdateWithoutEventInput>
    create: XOR<voucher_tableCreateWithoutEventInput, voucher_tableUncheckedCreateWithoutEventInput>
  }

  export type voucher_tableUpdateWithWhereUniqueWithoutEventInput = {
    where: voucher_tableWhereUniqueInput
    data: XOR<voucher_tableUpdateWithoutEventInput, voucher_tableUncheckedUpdateWithoutEventInput>
  }

  export type voucher_tableUpdateManyWithWhereWithoutEventInput = {
    where: voucher_tableScalarWhereInput
    data: XOR<voucher_tableUpdateManyMutationInput, voucher_tableUncheckedUpdateManyWithoutEventInput>
  }

  export type event_tableCreateWithoutTicket_holdsInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutTicket_holdsInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutTicket_holdsInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutTicket_holdsInput, event_tableUncheckedCreateWithoutTicket_holdsInput>
  }

  export type user_accountCreateWithoutTicket_holdsInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutTicket_holdsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutTicket_holdsInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutTicket_holdsInput, user_accountUncheckedCreateWithoutTicket_holdsInput>
  }

  export type ticket_typeCreateWithoutTicket_holdsInput = {
    type_name: string
    price: number
    quota: number
    event: event_tableCreateNestedOneWithoutTicket_typeInput
  }

  export type ticket_typeUncheckedCreateWithoutTicket_holdsInput = {
    id?: number
    event_id: number
    type_name: string
    price: number
    quota: number
  }

  export type ticket_typeCreateOrConnectWithoutTicket_holdsInput = {
    where: ticket_typeWhereUniqueInput
    create: XOR<ticket_typeCreateWithoutTicket_holdsInput, ticket_typeUncheckedCreateWithoutTicket_holdsInput>
  }

  export type transactions_tableCreateWithoutTicketInput = {
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    user: user_accountCreateNestedOneWithoutTransactionsInput
    event: event_tableCreateNestedOneWithoutTransactionsInput
    voucher?: voucher_tableCreateNestedOneWithoutTransactions_tableInput
  }

  export type transactions_tableUncheckedCreateWithoutTicketInput = {
    id?: number
    user_id: number
    event_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
  }

  export type transactions_tableCreateOrConnectWithoutTicketInput = {
    where: transactions_tableWhereUniqueInput
    create: XOR<transactions_tableCreateWithoutTicketInput, transactions_tableUncheckedCreateWithoutTicketInput>
  }

  export type event_tableUpsertWithoutTicket_holdsInput = {
    update: XOR<event_tableUpdateWithoutTicket_holdsInput, event_tableUncheckedUpdateWithoutTicket_holdsInput>
    create: XOR<event_tableCreateWithoutTicket_holdsInput, event_tableUncheckedCreateWithoutTicket_holdsInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutTicket_holdsInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutTicket_holdsInput, event_tableUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type event_tableUpdateWithoutTicket_holdsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutTicket_holdsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type user_accountUpsertWithoutTicket_holdsInput = {
    update: XOR<user_accountUpdateWithoutTicket_holdsInput, user_accountUncheckedUpdateWithoutTicket_holdsInput>
    create: XOR<user_accountCreateWithoutTicket_holdsInput, user_accountUncheckedCreateWithoutTicket_holdsInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutTicket_holdsInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutTicket_holdsInput, user_accountUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type user_accountUpdateWithoutTicket_holdsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutTicket_holdsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ticket_typeUpsertWithoutTicket_holdsInput = {
    update: XOR<ticket_typeUpdateWithoutTicket_holdsInput, ticket_typeUncheckedUpdateWithoutTicket_holdsInput>
    create: XOR<ticket_typeCreateWithoutTicket_holdsInput, ticket_typeUncheckedCreateWithoutTicket_holdsInput>
    where?: ticket_typeWhereInput
  }

  export type ticket_typeUpdateToOneWithWhereWithoutTicket_holdsInput = {
    where?: ticket_typeWhereInput
    data: XOR<ticket_typeUpdateWithoutTicket_holdsInput, ticket_typeUncheckedUpdateWithoutTicket_holdsInput>
  }

  export type ticket_typeUpdateWithoutTicket_holdsInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
    event?: event_tableUpdateOneRequiredWithoutTicket_typeNestedInput
  }

  export type ticket_typeUncheckedUpdateWithoutTicket_holdsInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
  }

  export type transactions_tableUpsertWithoutTicketInput = {
    update: XOR<transactions_tableUpdateWithoutTicketInput, transactions_tableUncheckedUpdateWithoutTicketInput>
    create: XOR<transactions_tableCreateWithoutTicketInput, transactions_tableUncheckedCreateWithoutTicketInput>
    where?: transactions_tableWhereInput
  }

  export type transactions_tableUpdateToOneWithWhereWithoutTicketInput = {
    where?: transactions_tableWhereInput
    data: XOR<transactions_tableUpdateWithoutTicketInput, transactions_tableUncheckedUpdateWithoutTicketInput>
  }

  export type transactions_tableUpdateWithoutTicketInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    user?: user_accountUpdateOneRequiredWithoutTransactionsNestedInput
    event?: event_tableUpdateOneRequiredWithoutTransactionsNestedInput
    voucher?: voucher_tableUpdateOneWithoutTransactions_tableNestedInput
  }

  export type transactions_tableUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }

  export type event_tableCreateWithoutTicket_typeInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutTicket_typeInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutTicket_typeInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutTicket_typeInput, event_tableUncheckedCreateWithoutTicket_typeInput>
  }

  export type ticket_holdsCreateWithoutTicket_typeInput = {
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
    event: event_tableCreateNestedOneWithoutTicket_holdsInput
    user: user_accountCreateNestedOneWithoutTicket_holdsInput
    transactions: transactions_tableCreateNestedOneWithoutTicketInput
  }

  export type ticket_holdsUncheckedCreateWithoutTicket_typeInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsCreateOrConnectWithoutTicket_typeInput = {
    where: ticket_holdsWhereUniqueInput
    create: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput>
  }

  export type ticket_holdsCreateManyTicket_typeInputEnvelope = {
    data: ticket_holdsCreateManyTicket_typeInput | ticket_holdsCreateManyTicket_typeInput[]
    skipDuplicates?: boolean
  }

  export type event_tableUpsertWithoutTicket_typeInput = {
    update: XOR<event_tableUpdateWithoutTicket_typeInput, event_tableUncheckedUpdateWithoutTicket_typeInput>
    create: XOR<event_tableCreateWithoutTicket_typeInput, event_tableUncheckedCreateWithoutTicket_typeInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutTicket_typeInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutTicket_typeInput, event_tableUncheckedUpdateWithoutTicket_typeInput>
  }

  export type event_tableUpdateWithoutTicket_typeInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ticket_holdsUpsertWithWhereUniqueWithoutTicket_typeInput = {
    where: ticket_holdsWhereUniqueInput
    update: XOR<ticket_holdsUpdateWithoutTicket_typeInput, ticket_holdsUncheckedUpdateWithoutTicket_typeInput>
    create: XOR<ticket_holdsCreateWithoutTicket_typeInput, ticket_holdsUncheckedCreateWithoutTicket_typeInput>
  }

  export type ticket_holdsUpdateWithWhereUniqueWithoutTicket_typeInput = {
    where: ticket_holdsWhereUniqueInput
    data: XOR<ticket_holdsUpdateWithoutTicket_typeInput, ticket_holdsUncheckedUpdateWithoutTicket_typeInput>
  }

  export type ticket_holdsUpdateManyWithWhereWithoutTicket_typeInput = {
    where: ticket_holdsScalarWhereInput
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyWithoutTicket_typeInput>
  }

  export type event_tableCreateWithoutEvent_attendeesInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutEvent_attendeesInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutEvent_attendeesInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutEvent_attendeesInput, event_tableUncheckedCreateWithoutEvent_attendeesInput>
  }

  export type organizer_accountCreateWithoutEvent_attendeesInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateWithoutEvent_attendeesInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableUncheckedCreateNestedManyWithoutOrganizerInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountCreateOrConnectWithoutEvent_attendeesInput = {
    where: organizer_accountWhereUniqueInput
    create: XOR<organizer_accountCreateWithoutEvent_attendeesInput, organizer_accountUncheckedCreateWithoutEvent_attendeesInput>
  }

  export type user_accountCreateWithoutEvent_attendeesInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    transactions?: transactions_tableCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutEvent_attendeesInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutEvent_attendeesInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutEvent_attendeesInput, user_accountUncheckedCreateWithoutEvent_attendeesInput>
  }

  export type event_tableUpsertWithoutEvent_attendeesInput = {
    update: XOR<event_tableUpdateWithoutEvent_attendeesInput, event_tableUncheckedUpdateWithoutEvent_attendeesInput>
    create: XOR<event_tableCreateWithoutEvent_attendeesInput, event_tableUncheckedCreateWithoutEvent_attendeesInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutEvent_attendeesInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutEvent_attendeesInput, event_tableUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type event_tableUpdateWithoutEvent_attendeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutEvent_attendeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type organizer_accountUpsertWithoutEvent_attendeesInput = {
    update: XOR<organizer_accountUpdateWithoutEvent_attendeesInput, organizer_accountUncheckedUpdateWithoutEvent_attendeesInput>
    create: XOR<organizer_accountCreateWithoutEvent_attendeesInput, organizer_accountUncheckedCreateWithoutEvent_attendeesInput>
    where?: organizer_accountWhereInput
  }

  export type organizer_accountUpdateToOneWithWhereWithoutEvent_attendeesInput = {
    where?: organizer_accountWhereInput
    data: XOR<organizer_accountUpdateWithoutEvent_attendeesInput, organizer_accountUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type organizer_accountUpdateWithoutEvent_attendeesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateWithoutEvent_attendeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUncheckedUpdateManyWithoutOrganizerNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type user_accountUpsertWithoutEvent_attendeesInput = {
    update: XOR<user_accountUpdateWithoutEvent_attendeesInput, user_accountUncheckedUpdateWithoutEvent_attendeesInput>
    create: XOR<user_accountCreateWithoutEvent_attendeesInput, user_accountUncheckedCreateWithoutEvent_attendeesInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutEvent_attendeesInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutEvent_attendeesInput, user_accountUncheckedUpdateWithoutEvent_attendeesInput>
  }

  export type user_accountUpdateWithoutEvent_attendeesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutEvent_attendeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_accountCreateWithoutTransactionsInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileCreateNestedOneWithoutUserInput
    user_points?: user_pointsCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesCreateNestedManyWithoutUserInput
    user_coupon?: user_couponCreateNestedManyWithoutUserInput
  }

  export type user_accountUncheckedCreateWithoutTransactionsInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    referral_code: string
    referred_by_code?: string | null
    imgProfile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user_profile?: user_profileUncheckedCreateNestedOneWithoutUserInput
    user_points?: user_pointsUncheckedCreateNestedManyWithoutUserInput
    points_redemption?: points_redemptionUncheckedCreateNestedManyWithoutUserInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutUserInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutUserInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutUserInput
    user_coupon?: user_couponUncheckedCreateNestedManyWithoutUserInput
  }

  export type user_accountCreateOrConnectWithoutTransactionsInput = {
    where: user_accountWhereUniqueInput
    create: XOR<user_accountCreateWithoutTransactionsInput, user_accountUncheckedCreateWithoutTransactionsInput>
  }

  export type event_tableCreateWithoutTransactionsInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    voucher?: voucher_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutTransactionsInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    voucher?: voucher_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutTransactionsInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutTransactionsInput, event_tableUncheckedCreateWithoutTransactionsInput>
  }

  export type ticket_holdsCreateWithoutTransactionsInput = {
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
    event: event_tableCreateNestedOneWithoutTicket_holdsInput
    user: user_accountCreateNestedOneWithoutTicket_holdsInput
    ticket_type: ticket_typeCreateNestedOneWithoutTicket_holdsInput
  }

  export type ticket_holdsUncheckedCreateWithoutTransactionsInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
  }

  export type ticket_holdsCreateOrConnectWithoutTransactionsInput = {
    where: ticket_holdsWhereUniqueInput
    create: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput>
  }

  export type ticket_holdsCreateManyTransactionsInputEnvelope = {
    data: ticket_holdsCreateManyTransactionsInput | ticket_holdsCreateManyTransactionsInput[]
    skipDuplicates?: boolean
  }

  export type voucher_tableCreateWithoutTransactions_tableInput = {
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
    organizer: organizer_accountCreateNestedOneWithoutVoucherInput
    event: event_tableCreateNestedOneWithoutVoucherInput
  }

  export type voucher_tableUncheckedCreateWithoutTransactions_tableInput = {
    id?: number
    organizer_id: number
    event_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
  }

  export type voucher_tableCreateOrConnectWithoutTransactions_tableInput = {
    where: voucher_tableWhereUniqueInput
    create: XOR<voucher_tableCreateWithoutTransactions_tableInput, voucher_tableUncheckedCreateWithoutTransactions_tableInput>
  }

  export type user_accountUpsertWithoutTransactionsInput = {
    update: XOR<user_accountUpdateWithoutTransactionsInput, user_accountUncheckedUpdateWithoutTransactionsInput>
    create: XOR<user_accountCreateWithoutTransactionsInput, user_accountUncheckedCreateWithoutTransactionsInput>
    where?: user_accountWhereInput
  }

  export type user_accountUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: user_accountWhereInput
    data: XOR<user_accountUpdateWithoutTransactionsInput, user_accountUncheckedUpdateWithoutTransactionsInput>
  }

  export type user_accountUpdateWithoutTransactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUpdateManyWithoutUserNestedInput
  }

  export type user_accountUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    referral_code?: StringFieldUpdateOperationsInput | string
    referred_by_code?: NullableStringFieldUpdateOperationsInput | string | null
    imgProfile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_profile?: user_profileUncheckedUpdateOneWithoutUserNestedInput
    user_points?: user_pointsUncheckedUpdateManyWithoutUserNestedInput
    points_redemption?: points_redemptionUncheckedUpdateManyWithoutUserNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutUserNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutUserNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutUserNestedInput
    user_coupon?: user_couponUncheckedUpdateManyWithoutUserNestedInput
  }

  export type event_tableUpsertWithoutTransactionsInput = {
    update: XOR<event_tableUpdateWithoutTransactionsInput, event_tableUncheckedUpdateWithoutTransactionsInput>
    create: XOR<event_tableCreateWithoutTransactionsInput, event_tableUncheckedCreateWithoutTransactionsInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutTransactionsInput, event_tableUncheckedUpdateWithoutTransactionsInput>
  }

  export type event_tableUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ticket_holdsUpsertWithWhereUniqueWithoutTransactionsInput = {
    where: ticket_holdsWhereUniqueInput
    update: XOR<ticket_holdsUpdateWithoutTransactionsInput, ticket_holdsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ticket_holdsCreateWithoutTransactionsInput, ticket_holdsUncheckedCreateWithoutTransactionsInput>
  }

  export type ticket_holdsUpdateWithWhereUniqueWithoutTransactionsInput = {
    where: ticket_holdsWhereUniqueInput
    data: XOR<ticket_holdsUpdateWithoutTransactionsInput, ticket_holdsUncheckedUpdateWithoutTransactionsInput>
  }

  export type ticket_holdsUpdateManyWithWhereWithoutTransactionsInput = {
    where: ticket_holdsScalarWhereInput
    data: XOR<ticket_holdsUpdateManyMutationInput, ticket_holdsUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type voucher_tableUpsertWithoutTransactions_tableInput = {
    update: XOR<voucher_tableUpdateWithoutTransactions_tableInput, voucher_tableUncheckedUpdateWithoutTransactions_tableInput>
    create: XOR<voucher_tableCreateWithoutTransactions_tableInput, voucher_tableUncheckedCreateWithoutTransactions_tableInput>
    where?: voucher_tableWhereInput
  }

  export type voucher_tableUpdateToOneWithWhereWithoutTransactions_tableInput = {
    where?: voucher_tableWhereInput
    data: XOR<voucher_tableUpdateWithoutTransactions_tableInput, voucher_tableUncheckedUpdateWithoutTransactions_tableInput>
  }

  export type voucher_tableUpdateWithoutTransactions_tableInput = {
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    organizer?: organizer_accountUpdateOneRequiredWithoutVoucherNestedInput
    event?: event_tableUpdateOneRequiredWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateWithoutTransactions_tableInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
  }

  export type organizer_accountCreateWithoutVoucherInput = {
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountUncheckedCreateWithoutVoucherInput = {
    id?: number
    username: string
    email: string
    password: string
    role: $Enums.account_role
    organizer_profile?: organizer_profileUncheckedCreateNestedOneWithoutOrganizerInput
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutOrganizerInput
    event_table?: event_tableUncheckedCreateNestedManyWithoutOrganizerInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type organizer_accountCreateOrConnectWithoutVoucherInput = {
    where: organizer_accountWhereUniqueInput
    create: XOR<organizer_accountCreateWithoutVoucherInput, organizer_accountUncheckedCreateWithoutVoucherInput>
  }

  export type event_tableCreateWithoutVoucherInput = {
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer: organizer_accountCreateNestedOneWithoutEvent_tableInput
    organizer_reviews?: organizer_reviewsCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesCreateNestedManyWithoutEventInput
    transactions?: transactions_tableCreateNestedManyWithoutEventInput
  }

  export type event_tableUncheckedCreateWithoutVoucherInput = {
    id?: number
    organizer_id: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
    organizer_reviews?: organizer_reviewsUncheckedCreateNestedManyWithoutEventInput
    ticket_holds?: ticket_holdsUncheckedCreateNestedManyWithoutEventInput
    ticket_type?: ticket_typeUncheckedCreateNestedManyWithoutEventInput
    event_attendees?: event_attendeesUncheckedCreateNestedManyWithoutEventInput
    transactions?: transactions_tableUncheckedCreateNestedManyWithoutEventInput
  }

  export type event_tableCreateOrConnectWithoutVoucherInput = {
    where: event_tableWhereUniqueInput
    create: XOR<event_tableCreateWithoutVoucherInput, event_tableUncheckedCreateWithoutVoucherInput>
  }

  export type transactions_tableCreateWithoutVoucherInput = {
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    user: user_accountCreateNestedOneWithoutTransactionsInput
    event: event_tableCreateNestedOneWithoutTransactionsInput
    ticket?: ticket_holdsCreateNestedManyWithoutTransactionsInput
  }

  export type transactions_tableUncheckedCreateWithoutVoucherInput = {
    id?: number
    user_id: number
    event_id: number
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
    ticket?: ticket_holdsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactions_tableCreateOrConnectWithoutVoucherInput = {
    where: transactions_tableWhereUniqueInput
    create: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput>
  }

  export type transactions_tableCreateManyVoucherInputEnvelope = {
    data: transactions_tableCreateManyVoucherInput | transactions_tableCreateManyVoucherInput[]
    skipDuplicates?: boolean
  }

  export type organizer_accountUpsertWithoutVoucherInput = {
    update: XOR<organizer_accountUpdateWithoutVoucherInput, organizer_accountUncheckedUpdateWithoutVoucherInput>
    create: XOR<organizer_accountCreateWithoutVoucherInput, organizer_accountUncheckedCreateWithoutVoucherInput>
    where?: organizer_accountWhereInput
  }

  export type organizer_accountUpdateToOneWithWhereWithoutVoucherInput = {
    where?: organizer_accountWhereInput
    data: XOR<organizer_accountUpdateWithoutVoucherInput, organizer_accountUncheckedUpdateWithoutVoucherInput>
  }

  export type organizer_accountUpdateWithoutVoucherInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutOrganizerNestedInput
  }

  export type organizer_accountUncheckedUpdateWithoutVoucherInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: Enumaccount_roleFieldUpdateOperationsInput | $Enums.account_role
    organizer_profile?: organizer_profileUncheckedUpdateOneWithoutOrganizerNestedInput
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutOrganizerNestedInput
    event_table?: event_tableUncheckedUpdateManyWithoutOrganizerNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type event_tableUpsertWithoutVoucherInput = {
    update: XOR<event_tableUpdateWithoutVoucherInput, event_tableUncheckedUpdateWithoutVoucherInput>
    create: XOR<event_tableCreateWithoutVoucherInput, event_tableUncheckedCreateWithoutVoucherInput>
    where?: event_tableWhereInput
  }

  export type event_tableUpdateToOneWithWhereWithoutVoucherInput = {
    where?: event_tableWhereInput
    data: XOR<event_tableUpdateWithoutVoucherInput, event_tableUncheckedUpdateWithoutVoucherInput>
  }

  export type event_tableUpdateWithoutVoucherInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_tableNestedInput
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutVoucherInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type transactions_tableUpsertWithWhereUniqueWithoutVoucherInput = {
    where: transactions_tableWhereUniqueInput
    update: XOR<transactions_tableUpdateWithoutVoucherInput, transactions_tableUncheckedUpdateWithoutVoucherInput>
    create: XOR<transactions_tableCreateWithoutVoucherInput, transactions_tableUncheckedCreateWithoutVoucherInput>
  }

  export type transactions_tableUpdateWithWhereUniqueWithoutVoucherInput = {
    where: transactions_tableWhereUniqueInput
    data: XOR<transactions_tableUpdateWithoutVoucherInput, transactions_tableUncheckedUpdateWithoutVoucherInput>
  }

  export type transactions_tableUpdateManyWithWhereWithoutVoucherInput = {
    where: transactions_tableScalarWhereInput
    data: XOR<transactions_tableUpdateManyMutationInput, transactions_tableUncheckedUpdateManyWithoutVoucherInput>
  }

  export type user_pointsCreateManyUserInput = {
    id?: number
    points: number
    points_source_type: string
    points_source_id: number
    earned_at: Date | string
    expires_at: Date | string
    points_remaining: number
  }

  export type points_redemptionCreateManyUserInput = {
    id?: number
    total_points: number
    redeemed_at: Date | string
  }

  export type organizer_reviewsCreateManyUserInput = {
    id?: number
    organizer_id: number
    event_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type ticket_holdsCreateManyUserInput = {
    id?: number
    event_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type event_attendeesCreateManyUserInput = {
    id?: number
    event_id: number
    organizer_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type transactions_tableCreateManyUserInput = {
    id?: number
    event_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
  }

  export type user_couponCreateManyUserInput = {
    id?: number
    coupon_id: number
    used_at?: Date | string | null
  }

  export type user_pointsUpdateWithoutUserInput = {
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    points_redemption_items?: points_redemption_itemsUpdateManyWithoutUser_pointsNestedInput
  }

  export type user_pointsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
    points_redemption_items?: points_redemption_itemsUncheckedUpdateManyWithoutUser_pointsNestedInput
  }

  export type user_pointsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    points_source_type?: StringFieldUpdateOperationsInput | string
    points_source_id?: IntFieldUpdateOperationsInput | number
    earned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_remaining?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemptionUpdateWithoutUserInput = {
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_redemption_items?: points_redemption_itemsUpdateManyWithoutPoints_redemptionNestedInput
  }

  export type points_redemptionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
    points_redemption_items?: points_redemption_itemsUncheckedUpdateManyWithoutPoints_redemptionNestedInput
  }

  export type points_redemptionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    total_points?: IntFieldUpdateOperationsInput | number
    redeemed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
    event?: event_tableUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
  }

  export type organizer_reviewsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticket_holdsUpdateWithoutUserInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    event?: event_tableUpdateOneRequiredWithoutTicket_holdsNestedInput
    ticket_type?: ticket_typeUpdateOneRequiredWithoutTicket_holdsNestedInput
    transactions?: transactions_tableUpdateOneRequiredWithoutTicketNestedInput
  }

  export type ticket_holdsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type event_attendeesUpdateWithoutUserInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
    event?: event_tableUpdateOneRequiredWithoutEvent_attendeesNestedInput
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
  }

  export type event_attendeesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type event_attendeesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type transactions_tableUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    event?: event_tableUpdateOneRequiredWithoutTransactionsNestedInput
    ticket?: ticket_holdsUpdateManyWithoutTransactionsNestedInput
    voucher?: voucher_tableUpdateOneWithoutTransactions_tableNestedInput
  }

  export type transactions_tableUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    ticket?: ticket_holdsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactions_tableUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }

  export type user_couponUpdateWithoutUserInput = {
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    coupon?: coupon_tableUpdateOneRequiredWithoutUser_couponNestedInput
  }

  export type user_couponUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    coupon_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_couponUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    coupon_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type points_redemption_itemsCreateManyUser_pointsInput = {
    id?: number
    redemption_id: number
  }

  export type points_redemption_itemsUpdateWithoutUser_pointsInput = {
    points_redemption?: points_redemptionUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput
  }

  export type points_redemption_itemsUncheckedUpdateWithoutUser_pointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    redemption_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemption_itemsUncheckedUpdateManyWithoutUser_pointsInput = {
    id?: IntFieldUpdateOperationsInput | number
    redemption_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemption_itemsCreateManyPoints_redemptionInput = {
    id?: number
    user_point_id: number
  }

  export type points_redemption_itemsUpdateWithoutPoints_redemptionInput = {
    user_points?: user_pointsUpdateOneRequiredWithoutPoints_redemption_itemsNestedInput
  }

  export type points_redemption_itemsUncheckedUpdateWithoutPoints_redemptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_point_id?: IntFieldUpdateOperationsInput | number
  }

  export type points_redemption_itemsUncheckedUpdateManyWithoutPoints_redemptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_point_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_couponCreateManyCouponInput = {
    id?: number
    user_id: number
    used_at?: Date | string | null
  }

  export type user_couponUpdateWithoutCouponInput = {
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: user_accountUpdateOneRequiredWithoutUser_couponNestedInput
  }

  export type user_couponUncheckedUpdateWithoutCouponInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type user_couponUncheckedUpdateManyWithoutCouponInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type organizer_reviewsCreateManyOrganizerInput = {
    id?: number
    event_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type event_tableCreateManyOrganizerInput = {
    id?: number
    name: string
    price: number
    start_date: Date | string
    end_date: Date | string
    seat_capacity: number
    event_type: string
    created_at?: Date | string
  }

  export type event_attendeesCreateManyOrganizerInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type voucher_tableCreateManyOrganizerInput = {
    id?: number
    event_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
  }

  export type organizer_reviewsUpdateWithoutOrganizerInput = {
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: event_tableUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
    user?: user_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
  }

  export type organizer_reviewsUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_tableUpdateWithoutOrganizerInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer_reviews?: organizer_reviewsUncheckedUpdateManyWithoutEventNestedInput
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutEventNestedInput
    ticket_type?: ticket_typeUncheckedUpdateManyWithoutEventNestedInput
    event_attendees?: event_attendeesUncheckedUpdateManyWithoutEventNestedInput
    transactions?: transactions_tableUncheckedUpdateManyWithoutEventNestedInput
    voucher?: voucher_tableUncheckedUpdateManyWithoutEventNestedInput
  }

  export type event_tableUncheckedUpdateManyWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    seat_capacity?: IntFieldUpdateOperationsInput | number
    event_type?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type event_attendeesUpdateWithoutOrganizerInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
    event?: event_tableUpdateOneRequiredWithoutEvent_attendeesNestedInput
    user?: user_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
  }

  export type event_attendeesUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type event_attendeesUncheckedUpdateManyWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type voucher_tableUpdateWithoutOrganizerInput = {
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    event?: event_tableUpdateOneRequiredWithoutVoucherNestedInput
    transactions_table?: transactions_tableUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    transactions_table?: transactions_tableUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateManyWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
  }

  export type organizer_reviewsCreateManyEventInput = {
    id?: number
    organizer_id: number
    user_id: number
    rating: number
    review: string
    created_at?: Date | string
  }

  export type ticket_holdsCreateManyEventInput = {
    id?: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_typeCreateManyEventInput = {
    id?: number
    type_name: string
    price: number
    quota: number
  }

  export type event_attendeesCreateManyEventInput = {
    id?: number
    organizer_id: number
    user_id: number
    ticket_quantity: number
    total_price_paid: number
    status: $Enums.event_status
  }

  export type transactions_tableCreateManyEventInput = {
    id?: number
    user_id: number
    voucher_id?: number | null
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
  }

  export type voucher_tableCreateManyEventInput = {
    id?: number
    organizer_id: number
    start_at: Date | string
    expires_at?: Date | string | null
    usage_limit: number
    discount_type: $Enums.discount_type
    discount_value: number
  }

  export type organizer_reviewsUpdateWithoutEventInput = {
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: organizer_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
    user?: user_accountUpdateOneRequiredWithoutOrganizer_reviewsNestedInput
  }

  export type organizer_reviewsUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type organizer_reviewsUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticket_holdsUpdateWithoutEventInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    user?: user_accountUpdateOneRequiredWithoutTicket_holdsNestedInput
    ticket_type?: ticket_typeUpdateOneRequiredWithoutTicket_holdsNestedInput
    transactions?: transactions_tableUpdateOneRequiredWithoutTicketNestedInput
  }

  export type ticket_holdsUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_typeUpdateWithoutEventInput = {
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
    ticket_holds?: ticket_holdsUpdateManyWithoutTicket_typeNestedInput
  }

  export type ticket_typeUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
    ticket_holds?: ticket_holdsUncheckedUpdateManyWithoutTicket_typeNestedInput
  }

  export type ticket_typeUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    type_name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quota?: IntFieldUpdateOperationsInput | number
  }

  export type event_attendeesUpdateWithoutEventInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
    organizer?: organizer_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
    user?: user_accountUpdateOneRequiredWithoutEvent_attendeesNestedInput
  }

  export type event_attendeesUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type event_attendeesUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    total_price_paid?: IntFieldUpdateOperationsInput | number
    status?: Enumevent_statusFieldUpdateOperationsInput | $Enums.event_status
  }

  export type transactions_tableUpdateWithoutEventInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    user?: user_accountUpdateOneRequiredWithoutTransactionsNestedInput
    ticket?: ticket_holdsUpdateManyWithoutTransactionsNestedInput
    voucher?: voucher_tableUpdateOneWithoutTransactions_tableNestedInput
  }

  export type transactions_tableUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    ticket?: ticket_holdsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactions_tableUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    voucher_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }

  export type voucher_tableUpdateWithoutEventInput = {
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    organizer?: organizer_accountUpdateOneRequiredWithoutVoucherNestedInput
    transactions_table?: transactions_tableUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
    transactions_table?: transactions_tableUncheckedUpdateManyWithoutVoucherNestedInput
  }

  export type voucher_tableUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizer_id?: IntFieldUpdateOperationsInput | number
    start_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usage_limit?: IntFieldUpdateOperationsInput | number
    discount_type?: Enumdiscount_typeFieldUpdateOperationsInput | $Enums.discount_type
    discount_value?: IntFieldUpdateOperationsInput | number
  }

  export type ticket_holdsCreateManyTicket_typeInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    transactions_id: number
    status: $Enums.coupon_status
  }

  export type ticket_holdsUpdateWithoutTicket_typeInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    event?: event_tableUpdateOneRequiredWithoutTicket_holdsNestedInput
    user?: user_accountUpdateOneRequiredWithoutTicket_holdsNestedInput
    transactions?: transactions_tableUpdateOneRequiredWithoutTicketNestedInput
  }

  export type ticket_holdsUncheckedUpdateWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsUncheckedUpdateManyWithoutTicket_typeInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions_id?: IntFieldUpdateOperationsInput | number
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsCreateManyTransactionsInput = {
    id?: number
    event_id: number
    user_id: number
    ticket_type_id: number
    ticket_quantity: number
    held_at: Date | string
    expires_at: Date | string
    status: $Enums.coupon_status
  }

  export type ticket_holdsUpdateWithoutTransactionsInput = {
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
    event?: event_tableUpdateOneRequiredWithoutTicket_holdsNestedInput
    user?: user_accountUpdateOneRequiredWithoutTicket_holdsNestedInput
    ticket_type?: ticket_typeUpdateOneRequiredWithoutTicket_holdsNestedInput
  }

  export type ticket_holdsUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type ticket_holdsUncheckedUpdateManyWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    ticket_type_id?: IntFieldUpdateOperationsInput | number
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    held_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumcoupon_statusFieldUpdateOperationsInput | $Enums.coupon_status
  }

  export type transactions_tableCreateManyVoucherInput = {
    id?: number
    user_id: number
    event_id: number
    created_at?: Date | string
    status: $Enums.transactions_status
    payment_proof_url: string
  }

  export type transactions_tableUpdateWithoutVoucherInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    user?: user_accountUpdateOneRequiredWithoutTransactionsNestedInput
    event?: event_tableUpdateOneRequiredWithoutTransactionsNestedInput
    ticket?: ticket_holdsUpdateManyWithoutTransactionsNestedInput
  }

  export type transactions_tableUncheckedUpdateWithoutVoucherInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
    ticket?: ticket_holdsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactions_tableUncheckedUpdateManyWithoutVoucherInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    event_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: Enumtransactions_statusFieldUpdateOperationsInput | $Enums.transactions_status
    payment_proof_url?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}